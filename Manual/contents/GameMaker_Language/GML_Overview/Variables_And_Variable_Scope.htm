<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Variabili e ambito delle variabili</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining variables and their scoping in GML" />
  <meta name="rh-index-keywords" content="Variables And Variable Scope" />
  <meta name="search-keywords" content="variables,scope,local variables,instance variables,global variables" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Variabili e ambito delle variabili</h1>
  <p>Come ogni linguaggio di programmazione, <b>GML</b> usa le <i>variabili</i> come unit√† di base per la maggior parte delle operazioni di programmazione. Le variabili sono usate per immagazzinare informazioni nella memoria dei dispositivi per un uso successivo (o istantaneo), e viene dato loro un nome in modo da potervi fare riferimento in <span class="notranslate">runtime</span> e <span class="notranslate">script</span> funzioni. Una variabile in <b>GML</b> pu√≤ memorizzare molte cose diverse <a href="Data_Types.htm"><strong>tipi di dati</strong></a>come un numero reale (es: 100, 2.456575, -56 etc...), un <span class="notranslate">string</span> (es: &quot;Hello world!&quot;), un intero (es: 1, 556, -7), o un booleano (<span class="inline">true</span> o <span class="inline">false</span>), cos√¨ come altre cose:</p>
  <p class="code">var _num = 126.4545;<br />
    var _str = &quot;Hello World&quot;;<br />
    new_num = _num * 100;<br />
    global.my_string = _str + &quot; I said&quot;;</p>
  <p>Potete anche usare le variabili per contenere i valori restituiti dalle funzioni, per esempio:</p>
  <p class="code">var _id = instance_nearest(x, y, obj_Tree);<br />
    root = sqrt(1000);<br />
    global.str = string_upper(&quot;Hello World&quot;);</p>
  <p>Quindi, una variabile √® qualcosa a cui possiamo dare un nome e che possiamo usare per memorizzare un valore da usare successivamente in una o pi√π operazioni. Un grande esempio &quot;del mondo reale&quot; di una variabile √® <b>pi greco ùúã . </b>.. √® una variabile che tutti conoscono e contiene il valore 3,14159265 (ecc...). Perch√© ce l'abbiamo nella nostra lingua? Beh, √® molto pi√π facile dire a qualcuno &quot;pi greco&quot; che &quot;tre punti uno quattro uno cinque nove due sei cinque&quot;! Nominare le cose in questo modo rende la vita molto pi√π semplice e significa anche che se il valore di quella variabile dovesse mai cambiare, non dobbiamo cambiare il numero ovunque, poich√© il <i>nome</i> della variabile √® ancora lo stesso.</p>
  <p>Quando si formano le variabili in <b>GML</b> devono avere un nome che inizia con una lettera o con il simbolo underscore &quot;_&quot; e possono contenere solo lettere, numeri e il simbolo underscore '_' con una lunghezza massima di 64 simboli. Quindi, le variabili valide sono cose come <span class="inline">fish</span>, <span class="inline">foo_bar</span>, <span class="inline">num1</span>, o <span class="inline">_str</span>, mentre le variabili non valide sarebbero <span class="inline">6fish</span>, <span class="inline">foo bar</span>, o <span class="inline">*num</span>.</p>
  <p>Ora, in molti linguaggi di programmazione √® necessario creare una variabile &quot;assegnazione&quot; prima di poterla usare. Questo significa fondamentalmente che si dice al computer il nome che si vuole usare per la variabile e le si assegna un valore iniziale. Alla variabile viene poi dato un posto in memoria per memorizzare il valore o eseguire operazioni su di essa. L'assegnazione di una variabile prende la forma di:</p>
  <p class="code">&lt;variable&gt; = &lt;expression&gt;;</p>
  <p>Un'espressione pu√≤ essere un semplice valore ma pu√≤ anche essere pi√π complicata, cos√¨, piuttosto che assegnare un valore a una variabile, si pu√≤ anche aggiungere un valore al valore corrente della variabile usando <span class="inline"><b>+=</b></span>, per esempio:</p>
  <p class="code">a = 100;¬†¬†¬†// Assigning a simple value<br />
    b = 200;<br />
    c = 300;<br />
    a += b;¬†¬†¬†¬†// Assigning with operation<br />
    a = b + c; // Assigning with expression</p>
  <p class="note"><span class="note">NOTA</span> Il sito <span class="notranslate">GameMaker Language</span> accetta anche &quot;<span class="inline">:=</span>&quot; per le assegnazioni, anche se questo non √® tipicamente il modo pi√π comune per farlo:</p>
  <p class="code">&lt;variable&gt; := &lt;expression&gt;;</p>
  <p>Allo stesso modo, potete sottrarre usando <span class="inline"><b>-=</b></span>, moltiplicare usando <span class="inline"><b>*=</b></span>, dividere usando <span class="inline"><b>/=</b></span>, o usare operatori bitwise usando <span class="inline"><b>|=</b></span>, <span class="inline"><b>&amp;=</b></span>, o <span class="inline"><b>^=</b></span>. Potete anche aggiungere o sottrarre <i>uno</i> da un valore usando <span class="inline"><b>++</b></span>, <span class="inline"><b>--</b></span>. Per ulteriori informazioni consultate la sezione <a href="Expressions_And_Operators.htm">Espressioni e Operatori</a>.</p>
  <p>Notate che <i>non potete</i> fare quanto segue (o qualsiasi variazione):</p>
  <p class="code">a = b = c = 4;</p>
  <p>E invece dovrebbe essere fatto come:</p>
  <p class="code">a = 4;<br />
    b = 4;<br />
    c = 4;</p>
  <p>Le assegnazioni delle variabili mostrate sopra sono tutte variabili di <strong>istanza </strong>, tuttavia ci sono in realt√† altre tre categorie di variabili principali quando si programma con <span data-keyref="GameMaker Name">GameMaker</span> e ognuna ha il suo <strong>ambito </strong>(che pu√≤ essere considerato come la sua area di funzionamento, o portata). I diversi tipi di variabili e il loro ambito sono tutti descritti nelle pagine seguenti:</p>
  <ul class="colour">
    <li><a href="Variables/Local_Variables.htm">Variabili locali</a></li>
    <li><a href="Variables/Instance_Variables.htm">Variabili di istanza</a></li>
    <li><a href="Variables/Global_Variables.htm">Variabili globali</a></li>
    <li><a href="Variables/Constants.htm">Costanti</a></li>
  </ul>
  <p>Il <span class="notranslate">GameMaker Language</span> ha anche diverse variabili incorporate che possono avere uno qualsiasi degli scopi sopra menzionati (eccetto <i>locale</i>). Queste variabili sono speciali perch√© sono incluse di default come parte del <span class="notranslate">objects</span> e del <span class="notranslate">rooms</span> nel mondo di gioco. Alcune variabili globali incorporate sono elencate nella sezione menzionata sopra, e le diverse parti del manuale per <span class="notranslate">sprites</span>, <span class="notranslate">rooms</span>, <span class="notranslate">objects</span>, ecc... delineano anche le variabili incorporate disponibili in ogni caso. Esempi di tali variabili di istanza incorporate sarebbero:</p>
  <ul class="colour">
    <li><span class="inline"><a href="../GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/sprite_index.htm">sprite_index</a></span></li>
    <li><a href="../GML_Reference/Asset_Management/Paths/Path_Variables/path_index.htm"><span class="inline">path_scale</span></a></li>
    <li><a href="../GML_Reference/Asset_Management/Instances/Instance_Variables/speed.htm"><span class="inline">speed</span></a></li>
  </ul>
  <p>Ed esempi di variabili globali incorporate sarebbero:</p>
  <ul class="colour">
    <li><a href="../GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_xport.htm"><span class="inline">view_xport</span></a></li>
    <li><a href="../GML_Reference/OS_And_Compiler/GM_version.htm"><span class="inline">GM_version</span></a></li>
    <li><a href="../GML_Reference/Asset_Management/Rooms/room.htm"><span class="inline">room</span></a></li>
  </ul>
  <p>La maggior parte delle variabili incorporate pu√≤ essere cambiata e impostata come le altre variabili, e alcune possono anche essere <a href="Arrays.htm">array</a>, solo che non dovete impostarle per crearle come fareste con una variabile regolare, poich√© saranno gi√† inizializzate a un valore predefinito.</p>
  <p>Infine, ci sono un certo numero di funzioni che sono dedicate a impostare, ottenere o controllare le variabili in qualche modo, disponibili dalla pagina seguente:</p>
  <ul class="colour">
    <li><a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">Funzioni variabili</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Indietro: <a href="GML_Overview.htm">Panoramica GML</a></div>
        <div style="float:right">Prossimo: <a data-xref="{title}" href="Data_Types.htm">Tipi di dati</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">¬© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tutti i diritti riservati</span></h5>
  </div>
  <!-- KEYWORDS
variables
variables - built-in
variables - scope
declaring variables
scope
built-in variables
-->
  <!-- TAGS
variables
-->
</body>
</html>