<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Tipi di dati</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining Data Types" />
  <meta name="rh-index-keywords" content="Data Types" />
  <meta name="search-keywords" content="Data Types" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Tipi di dati</h1>
  <p>Nella sezione precedente abbiamo trattato le <a href="Variables_And_Variable_Scope.htm">variabili e le loro regole di scoping</a>, ma poco è stato detto sui diversi <b>tipi di dati</b> che una variabile può memorizzare. Pertanto, questa sezione spiega i diversi tipi e a cosa possono servire.</p>
  <p>Prima di continuare, spieghiamo brevemente cosa si intende per &quot;tipi di dati&quot;. Quando si crea una variabile, questa può essere utilizzata per contenere informazioni e, quando si chiama una funzione, può anche contenere informazioni restituite. Tuttavia, queste informazioni possono avere diversi &quot;sapori&quot;: ad esempio, possono essere <em>numeri reali</em> o <em>stringhe</em>. Questi diversi tipi di valori vengono chiamati <b>tipi di dati</b> e quando si utilizza <span class="notranslate">GameMaker Language</span> possono essere uno qualsiasi dei seguenti:</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Numeri reali</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">I numeri reali sono qualsiasi valore che non sia <span class="notranslate">string</span>, né alcuno degli altri <span class="notranslate">data types</span> possibili. Quindi, 124, 45639,566546456, 0, -45,5 ecc. sono tutti esempi di numeri reali. Tutti i numeri reali vengono memorizzati come valori in virgola mobile a doppia precisione a 64 bit (o come valori interi) e il compilatore ottimizza dove possibile (ad esempio, 0,0 viene ottimizzato al valore intero di 0).</p>
    <p class="dropspot">Quando si tratta di un valore diverso da un numero intero, è possibile che si verifichino lievi errori di arrotondamento dovuti alla natura della matematica in virgola mobile. Per ulteriori informazioni su questa e altre funzioni relative ai numeri, consultare: <a href="../GML_Reference/Maths_And_Numbers/Number_Functions/Number_Functions.htm">Riferimento GML - Funzioni numeriche</a>.</p>
    <p class="note"><span class="note">NOTA</span> Sul target <b>HTML5</b>, tutti i numeri reali sono doppi.</p>
    <p class="dropspot">Si noti che mentre le variabili create in <span data-keyref="GameMaker Name">GameMaker</span> sono tutte memorizzate come numeri in virgola mobile a doppia precisione o interi, è possibile utilizzare altri formati quando si ha a che fare con <span class="notranslate">extensions</span>. Queste possono essere passate a <span data-keyref="GameMaker Name">GameMaker</span> da <span class="notranslate">extension</span> e poi controllate usando la funzione <span class="inline">is_*()</span> appropriata, il cui elenco è disponibile <a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">qui</a>.</p>
    <p> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#">Booleano</a></p>
  <div class="droptext" data-targetname="drop-down6">
    <p class="dropspot">Un booleano è semplicemente un valore che può essere <span class="inline">true</span> o <span class="inline">false</span>. Si noti che attualmente <span data-keyref="GameMaker Name">GameMaker</span> interpreta un numero reale uguale o inferiore a 0,5 come un valore <span class="inline">false</span> e qualsiasi numero reale superiore a 0,5 come <span class="inline">true</span>.
      Questo <i>non</i> significa però che dobbiate controllare 1 e 0 (o qualsiasi altro numero reale) come veri e falsi, in quanto sono disponibili anche le <b>costanti</b> <span class="inline">true</span> e <span class="inline">false</span> che dovrebbero essere sempre utilizzate nel vostro codice per
      per evitare problemi nel caso in cui, in un futuro aggiornamento, venissero aggiunti dei veri booleani <span class="notranslate">data types</span>.</p>
    <p class="dropspot">È possibile convertire qualsiasi numero reale in un valore implicitamente booleano utilizzando la seguente funzione:</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="../GML_Reference/Variable_Functions/bool.htm"><span class="notranslate">bool</span></a></li>
    </ul>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Corde</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot"><label for="one">Un <span class="notranslate">string</span> è semplicemente un testo che è stato messo tra virgolette &quot;...&quot;. È possibile eseguire alcune operazioni su <span class="notranslate">strings</span>, come sommare due <span class="notranslate">strings</span> per creare un <span class="notranslate">string</span> più lungo (concatenazione) e si possono anche modificare le proprietà di <span class="notranslate">string</span> e persino estrarre numeri reali da esso. Per maggiori informazioni su <span class="notranslate">strings</span> e sulle funzioni di <span class="notranslate">string</span> si veda: <a href="../GML_Reference/Strings/Strings.htm">Riferimento GML - Stringhe</a>.</label></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">Array</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot"><label for="three">Un array è uno speciale <span class="notranslate">data type</span> che può essere utilizzato per contenere più valori. Si assegna l'array a una variabile e poi si &quot;riempiono&quot; i diversi indici dell'array con i valori. Questo array può essere passato a <span class="notranslate">scripts</span> e alle funzioni su base pass-by-reference; tuttavia, se si modifica l'array passato, questo diventerà una copia dell'array originale e dovrà essere riportato alla variabile originale per aggiornare l'array. Per ulteriori informazioni sugli array, consultare: <a href="Arrays.htm">Panoramica GML - Array</a>.</label></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">Strutture</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot"><label for="eleven">Un <span class="notranslate">struct</span> (talvolta chiamato &quot;oggetto leggero&quot;) è una struttura di dati grezzi che funge da contenitore per le variabili di tutti gli <span class="notranslate">data types</span> oggetti. Si assegna un <span class="notranslate">struct</span> a una variabile e nel <span class="notranslate">struct</span> si possono definire altre variabili che possono essere lette o scritte a seconda delle necessità. Per informazioni più dettagliate su <span class="notranslate">structs</span>, si veda la sezione <a href="Structs.htm">Panoramica GML - Strutture</a>.</label></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">Variabili del metodo</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot"><label for="twelve">Una variabile di metodo è una variabile a cui è stata assegnata una funzione e che può essere utilizzata esattamente come si farebbe con una funzione di <span class="notranslate">GML</span> <span class="notranslate">runtime</span>. Per informazioni più dettagliate, consultare la sezione <a href="Method_Variables.htm">Variabili di metodo</a>.</label></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down13" href="#">int64</a></p>
  <div class="droptext" data-targetname="drop-down13">
    <p class="dropspot">Un &quot;int64&quot; è un intero a 64 bit che può essere creato utilizzando <span class="inline"><a href="../GML_Reference/Variable_Functions/int64.htm">int64()</a></span> (passando un numero reale non a 64 bit) o leggendo un valore <span class="inline">buffer_u64</span> da un <a href="../GML_Reference/Buffers/buffer_read.htm">buffer</a>.</p>
    <p class="dropspot">Questo può essere utilizzato nei casi in cui è strettamente necessario un intero a 64 bit, oppure quando si vuole lavorare con il <a href="../../Additional_Information/Bitwise_Operators.htm">bit-shifting</a> e si ha bisogno di quelle posizioni a 64 bit.</p>
    <p class="dropspot">Qualsiasi operazione bitwise, anche se eseguita su valori non a 64 bit, restituirà sempre un intero a 64 bit.</p>
    <p class="dropspot">Anche le divisioni su valori int64 restituiscono numeri interi (ad esempio: <span class="inline2">int64(5) / int64(2) = 2</span>).</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#">Valori esadecimali</a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p class="dropspot"><span data-keyref="GameMaker Name">GameMaker</span> accetta <b>i letterali esadecimali</b> come valori legittimi. I valori esadecimali sono particolarmente comuni quando si lavora con i colori, ma possono essere utilizzati ovunque sia richiesto un valore intero positivo. I valori esadecimali possono essere formattati nei due modi seguenti, dove <span class="inline"><em>abcd</em></span> è il valore esadecimale effettivo:</p>
    <p class="code"><span style="background-color: transparent;"><strong>$</strong><em>abcd</em></span><br />
      <strong>0x</strong><em>abcd</em>
    </p>
    <p class="dropspot">Ad esempio, i seguenti valori decimali possono essere espressi in esadecimale come mostrato:</p>
    <p class="code"><strong>11406</strong> -&gt; $2c8e, 0x2c8e<br />
      <strong>16777215</strong> -&gt; $ffffff, 0xffffff
    </p>
    <hr />
    <p class="dropspot">Un valore esadecimale può anche iniziare con un simbolo hash/pound<span class="inline2">(#</span>), ma quando viene scritto in questo modo, il suo valore non sarà uguale a un valore esadecimale simile scritto utilizzando un formato precedentemente mostrato<span class="inline2">($</span> o <span class="inline2">0x</span>). Ciò è dovuto al modo in cui i colori sono interpretati in <span class="notranslate">GML</span>, che ha richiesto la modifica del formato dei valori esadecimali hash/pound in modo che i colori CSS possano essere scritti in formato <span class="inline2">#RRGGBB</span>. Per ulteriori informazioni, leggere <a data-xref="{text}" href="../GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm#h">Colori esadecimali</a>.</p>
    <p class="dropspot">Ad esempio, i due seguenti non sono uguali:</p>
    <p class="code">$2c8edd <strong>!=</strong> #2c8edd</p>
    <p class="dropspot">Affinché si riferiscano allo stesso valore decimale, è necessario scambiare i primi due e gli ultimi due caratteri:</p>
    <p class="code">$<strong>2c</strong>8edd <strong>=</strong><strong>=</strong> #dd8e<strong>2c</strong></p>
    <p> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#">Puntatore</a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p class="dropspot">Un puntatore è un <span class="notranslate">data type</span> che &quot;punta&quot; a una posizione di memoria. Non è possibile eseguire operazioni su un puntatore e viene utilizzato solo per alcune funzioni molto specifiche, come l'ottenimento di un indirizzo <span class="notranslate">texture</span> o <span class="notranslate">buffer</span> dalla memoria per un'altra funzione. Per esempi di funzioni che restituiscono un puntatore si può vedere <a href="../GML_Reference/Buffers/buffer_get_address.htm"><span class="inline">buffer_get_address()</span></a> o <a href="../GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_texture.htm"><span class="inline">sprite_get_texture()</span></a>.</p>
    <p class="dropspot">Esiste anche una funzione per verificare se un valore è un puntatore (vedere &quot;<b>Verifica dei tipi di dati</b>&quot;, più avanti) e una funzione per convertire un valore in un puntatore:</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="../GML_Reference/Variable_Functions/ptr.htm" style="background-color: transparent;"><span class="notranslate">ptr</span></a></li>
    </ul>
    <p class="dropspot">Quando si utilizzano i puntatori, è possibile utilizzare (e farsi restituire) le seguenti costanti incorporate:</p>
    <table class=" cke_show_border">
      <tbody>
        <tr>
          <th>Costante</th>
          <th>Descrizione</th>
        </tr>
        <tr>
          <td><span class="notranslate"><span class="inline">pointer_null</span></td>
          <td>Questa costante indica che il puntatore non punta a nulla di significativo (come <span class="inline">NULL</span> in C++ o <span class="inline">null</span> in C#). Questo valore è <a class="glossterm" data-glossterm="falsario" href="#">falso</a>.</td>
        </tr>
        <tr>
          <td><span class="notranslate"><span class="inline">pointer_invalid</span></td>
          <td>Questa costante significa semplicemente che il valore non è un puntatore valido.</td>
        </tr>
      </tbody>
    </table>
    <p> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#">Enum</a></p>
  <div class="droptext" data-targetname="drop-down8">
    <p class="dropspot">Un enum è un &quot;enumeratore&quot; e consente essenzialmente di creare il proprio <span class="notranslate">data type</span> limitato con un elenco di valori costanti. Gli enum sono spiegati in modo approfondito nella pagina delle <a href="Variables/Constants.htm">costanti</a>.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#">Non definito</a></p>
  <div class="droptext" data-targetname="drop-down9">
    <p class="dropspot"><label for="seven">Un valore indefinito (noto anche come valore &quot;nullo&quot;) è quello in cui un'espressione non ha un valore corretto, sebbene sia sintatticamente corretta, e quindi deve restituire <i>qualcosa</i>. Per esempio, supponiamo di avere una <a href="../GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm">mappa DS</a> e di usare la funzione <a href="../GML_Reference/Data_Structures/DS_Maps/ds_map_find_value.htm"><span class="inline">ds_map_find_value()</span></a>. Cosa succede se la mappa non ha il valore cercato? Dal momento che la funzione è formattata correttamente e il problema è che non esiste tale valore, allora restituirà la costante <span class="inline">undefined</span>, e si potrà controllare questa costante come si controllerebbe <span class="inline">true</span> o qualsiasi altro valore.<br></label></p>
    <p class="code"><label for="seven">var _value = ds_map_find_value(my_map, &quot;key&quot;);<br /><br />if (<a href="../GML_Reference/Variable_Functions/is_undefined.htm">is_undefined</a>(value)) {<br />    show_debug_message(&quot;The key does not exist!&quot;);<br />}</label><br /></p>
    <p class="dropspot"> <br /></p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down10" href="#">NaN</a></p>
  <div class="droptext" data-targetname="drop-down10">
    <p class="dropspot"><label for="nine"><span class="inline">NaN</span> sta per &quot;non un numero&quot; ed è una costante che può essere restituita quando il compilatore non può valutare i risultati di un'operazione come un numero. Ad esempio, 0/0 non può essere definito come un numero reale, e quindi viene rappresentato da <span class="inline">NaN</span>, oppure la radice quadrata di un numero negativo - che è considerato un numero &quot;immaginario&quot; - non può essere rappresentata come un numero reale, e quindi viene rappresentata da <span class="inline">NaN</span>.</label></p>
    <p class="dropspot">Si noti che, poiché <span class="inline">NaN</span> non è un numero, non può essere confrontato con se stesso, quindi confronti come <span class="inline">NaN == NaN</span> restituiranno <span class="inline">false</span>. Lo stesso vale per un confronto tra array come questo:</p>
    <p class="code">show_debug_message(array_equals([NaN], [NaN]));<br />
      <br />
      // Output: 0 (false)
    </p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down11" href="#">L'infinito</a></p>
  <div class="droptext" data-targetname="drop-down11">
    <p class="dropspot">La costante <span class="inline">infinity</span> si riferisce a un numero considerato infinito, come il risultato che si otterrebbe dividendo un qualsiasi valore in virgola mobile per zero, per esempio: 1,0/0.</p>
    <p class="dropspot">Si noti che la costante <span class="inline">infinity</span> è uguale a se stessa, quindi <span class="inline">infinity == infinity</span> restituirà <span class="inline">true</span>.</p>
  </div>
  <p id="variable"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down12" href="#">Qualsiasi</a></p>
  <div class="droptext" data-targetname="drop-down12">
    <p class="dropspot">Il termine &quot;<strong>Any&quot;</strong> <span class="notranslate">data type</span> si trova in molte pagine del manuale, ad esempio <a href="../GML_Reference/Variable_Functions/is_string.htm">negli argomenti</a> o come <a href="../GML_Reference/Variable_Functions/array_get.htm">valore di ritorno</a>. Indica che <em>qualsiasi tipo di valore</em> è accettato o può essere restituito.</p>
  </div>
  <p> </p>
  <p>È possibile controllare <span class="notranslate">data type</span> di qualsiasi variabile utilizzando le funzioni elencate nella pagina seguente:</p>
  <ul class="colour">
    <li><a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">Funzioni variabili</a></li>
  </ul>
  <p>Qui si possono trovare anche tabelle di tipo aritmetico che mostrano i risultati di diverse operazioni utilizzando la variabile mista <span class="notranslate">data types</span>:</p>
  <ul class="colour">
    <li><a data-xref="{title}" href="../../Additional_Information/Type_Tables.htm">Tabelle di tipo</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Indietro: <a href="GML_Overview.htm">Panoramica del GML</a></div>
        <div style="float:right">Avanti: <a data-xref="{title}" href="Language_Features/If_Else_and_Conditional_Operators.htm">if / else e operatori condizionali</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tutti i diritti riservati</span></h5>
  </div>
  <!-- KEYWORDS
Data Type - Real
Data Type - String
Data Type - Pointer
Data Type - Undefined
Data Type - Enum
Data Type - True
Data Type - False
Data Type - Array
Data Type - Boolean
Data Type - NaN
Data Type - Infinite
Data Type - Struct
real
string
pointer
undefined
enum
true
false
arrays
boolean
NaN
infinite
ptr
struct
pointer_null
pointer_invalid
-->
  <!-- TAGS
data_type
real
string
pointer
undefined
enum
true
false
arrays
boolean
ptr
struct
pointer_null
pointer_invalid
-->
</body>
</html>