<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Accessori</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the different Accessors" />
  <meta name="rh-index-keywords" content="Accessors" />
  <meta name="search-keywords" content="Accessors,@,[| ],[@ ],[# ],[? ],grid accessor,list accessor,map accessor,array accessor" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Accessori</h1>
  <p>Il sito <span class="notranslate">GameMaker Language</span> (<span class="notranslate">GML</span>) permette anche di accedere a certe <a href="../GML_Reference/Data_Structures/Data_Structures.htm">strutture di dati</a> e <a href="Arrays.htm">array</a> attraverso l'uso di espressioni logiche chiamate <b>accessori</b>. Questo è strutturato in modo simile a quando si lavora normalmente con un array, solo che si usa un <em>simbolo identificatore</em> prima del primo argomento per dire a <span data-keyref="GameMaker Name">GameMaker</span> che si sta lavorando su una struttura dati (precedentemente creata) o sul letterale dell'array.</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down10" href="#">Elenchi DS [| ]</a></p>
  <div class="droptext" data-targetname="drop-down10">
    <p class="dropspot">La sintassi per le <a href="../GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm">liste DS</a> è:</p>
    <p class="code">list_index[| index]</p>
    <p class="dropspot">Così, quando avete usato <span class="inline">ds_list_create()</span> per creare la vostra lista, userete l'indice della lista (che avete memorizzato in una variabile) per farvi riferimento, con il valore &quot;index&quot; che è la posizione nella lista da impostare o aggiungere. Per esempio, il seguente codice crea una lista e poi aggiunge 10 voci, impostando ogni voce su un numero casuale da 0 a 9:</p>
    <p class="code">ds = ds_list_create();<br />
      var _index = 0;<br />
      repeat(10)<br />
      {<br />
          ds[| _index++] = irandom(9);<br />
      }</p>
    <p class="dropspot">Notate che se state usando un'espressione per aggiungere un riferimento ad un indice che ha già un valore, il valore precedente sarà sostituito piuttosto che avere un ulteriore indice aggiunto alla lista. Per aggiungere ulteriori voci avreste bisogno di conoscere la dimensione di ds_list e aggiungerle alla fine. Vale anche la pena notare che è possibile impostare un indice di lista che è <i>maggiore</i> della dimensione della lista a cui si fa riferimento, e questo imposterà quel valore, espandendo la lista allo stesso tempo e inizializzando tutte le posizioni nella lista fino all'indice dato come 0.</p>
    <p class="dropspot">Una volta che avete creato la struttura della vostra lista e l'avete riempita di dati, per ottenere valori dalla lista dovreste avere qualcosa come:</p>
    <p class="code">value = ds[| 5];</p>
    <p class="dropspot">Quanto sopra otterrà il valore dalla posizione 5 (il sesto indice, poiché le liste iniziano da 0) e lo memorizzerà in una variabile. Se fornite una posizione che è al di fuori della dimensione della lista, allora verrà restituito il valore <span class="inline">undefined</span>, che potete controllare usando la funzione <a href="../GML_Reference/Variable_Functions/is_undefined.htm"><span class="inline">is_undefined()</span></a>.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down13" href="#">Mappe DS [? ]</a></p>
  <div class="droptext" data-targetname="drop-down13">
    <p class="dropspot">La sintassi per le <a href="../GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm">mappe DS</a> è:</p>
    <p class="code">map_index[? key]</p>
    <p class="dropspot">Dopo aver creato la vostra mappa con <span class="inline">ds_map_create()</span>, userete l'indice della mappa che avete memorizzato in una variabile per farvi riferimento, con il valore &quot;key&quot; che è la chiave della mappa da impostare o ottenere. Per esempio, il seguente codice crea una mappa e poi vi aggiunge alcune voci usando questa sintassi:</p>
    <p class="code">ds = ds_map_create();<br />
      ds[? &quot;Name&quot;] = &quot;Hamish&quot;;<br />
      ds[? &quot;Company&quot;] = &quot;MacSeweeny Games&quot;;<br />
      ds[? &quot;Game&quot;] = &quot;Catch The Haggis&quot;;</p>
    <p class="dropspot">Notate che se la mappa contiene già lo stesso valore chiave che state cercando di aggiungere, non creerà una chiave duplicata con il nuovo valore, ma piuttosto il valore precedente verrà sostituito.</p>
    <p class="dropspot">Una volta che avete creato la vostra struttura di mappa e l'avete riempita di dati, per ottenere valori da una specifica chiave di mappa dovreste avere qualcosa del genere:</p>
    <p class="code">value = ds[? &quot;Name&quot;];</p>
    <p class="dropspot">Quanto sopra otterrà il valore dalla chiave &quot;Name&quot; e lo memorizzerà in una variabile, ma siate consapevoli che se la chiave data non esiste nella mappa DS, allora il valore restituito sarà <span class="inline">undefined</span>. Questo può essere controllato usando la funzione <a href="../GML_Reference/Variable_Functions/is_undefined.htm"><span class="inline">is_undefined()</span></a>.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down14" href="#">Griglie DS [# ]</a></p>
  <div class="droptext" data-targetname="drop-down14">
    <p class="dropspot">La sintassi per la <a href="../GML_Reference/Data_Structures/DS_Grids/DS_Grids.htm">griglia DS</a> è:</p>
    <p class="code">grid_index[# xpos, ypos]</p>
    <p class="dropspot">Dopo aver creato la vostra griglia con la funzione <span class="inline">ds_grid_create()</span>, userete l'indice della griglia che avete memorizzato in una variabile per farvi riferimento, con &quot;xpos&quot; e &quot;ypos&quot; che sono la posizione all'interno della griglia per ottenere o impostare un valore. Per esempio, il seguente codice crea una griglia, la cancella a 0 e poi vi aggiunge alcune voci:</p>
    <p class="code">ds = ds_grid_create();<br />
      ds_grid_clear(ds, 0);<br />
      var _gw = ds_grid_width(ds) - 1;<br />
      var _gh = ds_grid_height(ds) - 1;<br />
      repeat(10)<br />
      {<br />
          var _xx = irandom(_gw);<br />
          var _yy = irandom(_gh);<br />
          if (ds[# _xx, _yy] == 0)<br />
          {<br />
              ds[# _xx, _yy] = 1;<br />
          }<br />
      }</p>
    <p class="dropspot">Una volta che avete creato la vostra struttura a griglia e l'avete riempita di dati, per ottenere valori da una specifica posizione della griglia dovreste avere qualcosa come:</p>
    <p class="code">value = ds[# mouse_x div 16, mouse_y div 16];</p>
    <p class="dropspot">Quanto sopra otterrà il valore dalla ds_grid data in base alla posizione del mouse (diviso per la larghezza della &quot;cella&quot; in <span class="notranslate">room</span> per ottenere la posizione corretta). Se si fornisce una posizione che è al di fuori dei confini della griglia, allora verrà restituito il valore <span class="inline">undefined</span>, che si può controllare utilizzando la funzione <a href="../GML_Reference/Variable_Functions/is_undefined.htm"><span class="inline">is_undefined()</span></a>.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down15" href="#">Array [@ ]</a></p>
  <div class="droptext" data-targetname="drop-down15">
    <p class="dropspot">Questo accessor è usato solo quando l'<a href="../../Settings/Game_Options.htm">opzione Copy on Write</a> è abilitata.</p>
    <p class="dropspot">Gli array hanno anche i loro accessi che funzionano in modo simile a quelli elencati sopra per le strutture di dati. Tuttavia gli accessi agli array hanno una proprietà interessante ed è quella di permettervi di modificare un array da una <a href="Script_Functions.htm">funzione di script</a> o <a href="Method_Variables.htm"><span class="notranslate">method</span></a> senza doverlo copiare. Quando passate un array in una funzione, viene <strong>passato per riferimento</strong>, il che significa che l'array stesso non viene dato in <span class="notranslate">script</span> ma piuttosto viene semplicemente referenziato per ottenere i dati. Normalmente se avete bisogno di cambiare l'array, verrebbe <em>copiato </em>in <span class="notranslate">script</span> e poi avreste bisogno di passare indietro (restituire) l'array copiato per aggiornare l'array originale. Questo può avere un costoso overhead di elaborazione, e quindi potete usare l'accessor invece, dato che cambierà l'array originale <em>direttamente </em>senza la necessità di copiarlo. Potete vedere come funziona negli esempi qui sotto.</p>
    <p class="dropspot">La sintassi per gli array, usando l'accessor <span class="inline">@</span>, è:</p>
    <p class="code">array[@ i]</p>
    <p class="dropspot">Dopo aver creato il vostro array in un'istanza, potete passarlo a <span class="notranslate">script</span> per riferimento e usare l'accessor <span class="inline">@</span> per cambiarlo direttamente. Per esempio dovreste creare l'array e chiamare la funzione in questo modo:</p>
    <p class="code">array[99] = 0;<br />
      array_populate(array);</p>
    <p class="dropspot">La funzione stessa avrebbe qualcosa del genere:</p>
    <p class="code">function array_populate(_array)<br />
      {<br />
          var a = _array; var i = 0;<br />
          repeat(25)<br />
          {<br />
              i = irandom(99);<br />
              while (a[i] != 0)<br />
              {<br />
                  i = irandom(99);<br />
              }<br />
              a[@ i] = 100;<br />
          }<br />
      }</p>
    <p class="dropspot">Tutto quello che fa questa funzione è selezionare 25 posizioni casuali nell'array e impostare il valore della posizione scelta dell'array a 100.</p>
    <p class="dropspot">Naturalmente, l'accessor <span class="inline">@</span> non è richiesto quando <strong>Copy on Write</strong> è disabilitato.</p>
    <p class="note"><span class="note">NOTA</span> Non potete usare l'accessor di array <span class="inline">@</span> quando lavorate con l'array <span class="inline">argument[n]</span> nelle funzioni di script.</p>
    <p class="dropspot"> </p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down16" href="#">Strutture [$ ]</a></p>
  <div class="droptext" data-targetname="drop-down16">
    <p class="dropspot"><span>La sintassi per le <a href="Structs.htm">strutture</a> è</span></p>
    <p class="code">struct[$ &quot;name&quot;]</p>
    <p class="dropspot">Questo accessor è essenzialmente un wrapper per le funzioni <span><a href="../GML_Reference/Variable_Functions/variable_struct_get.htm"><span class="inline">variable_struct_get()</span></a> e <a href="../GML_Reference/Variable_Functions/variable_struct_set.htm"><span class="inline">variable_struct_set()</span></a>, e lo usereste proprio come l'accessor per una mappa DS. Per esempio, se avete creato un <span class="notranslate">struct</span> e volete recuperare un valore da una variabile chiamata &quot;my_health&quot; allora fareste:</span></p>
    <p class="code">var _hp = struct[$ &quot;my_health&quot;];</p>
    <p class="dropspot">Come potete vedere, non fornite la variabile stessa, ma piuttosto una <em>stringa</em> con la variabile. Notate che se <span class="notranslate">struct</span> non ha una variabile con il nome dato, allora l'accessor restituirà <span class="inline">undefined</span> come valore.</p>
    <p class="dropspot">Per impostare una variabile in un <span class="notranslate">struct</span> allora dovreste fare come segue</p>
    <p class="code">struct[$ &quot;my_score&quot;] = 100;</p>
    <p class="dropspot">Come per ottenere un valore, si fornisce il nome della variabile da impostare come <span class="notranslate">string</span>, e sarà impostata al valore dato. Se il nome della variabile usata non esiste in <span class="notranslate">struct</span>, allora verrà creata e impostata al valore dato.</p>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p>Una caratteristica importante degli accessori è il fatto che possono essere <i>concatenati</i> insieme. Questo significa che se avete diverse strutture dati e/o array annidati, non c'è più bisogno di usare una varietà di funzioni per avere accesso ad un valore che è in profondità nella struttura annidata. Per esempio, diciamo che avete un array, e ogni elemento nell'array è una lista DS, come questa:</p>
  <p class="code">array = array_create(3);<br />
    for (var i = 0; i &lt; 3; ++i;)<br />
    {<br />
        array[i] = ds_list_create();<br />
        switch(i)<br />
        {<br />
            case 0:<br />
                with (obj_Wall) ds_list_add(array[i], id);<br />
            break;<br />
    <br />
            case 1:<br />
                with (obj_Door) ds_list_add(array[i], id);<br />
            break;<br />
    <br />
            case 2:<br />
                with (obj_Chest) ds_list_add(array[i], id);<br />
            break;<br />
        }<br />
    }
  </p>
  <p>Nel codice precedente abbiamo creato un array di 3 elementi e assegnato una lista DS a ciascuno di essi, e poi abbiamo popolato le diverse liste con gli ID di istanza dei vari <span class="notranslate">objects</span> nel gioco. Ora, per accedere ad un ID in una delle liste possiamo fare quanto segue:</p>
  <p class="code">var _list = array[0];<br />
    var _id = ds_list_find_value(_list, 0);</p>
  <p>Tuttavia, si può fare la stessa cosa usando gli accessi concatenati in un modo molto più pulito che usa meno codice:</p>
  <p class="code">var _id = array[0][| 0];</p>
  <p>Potete concatenare più accessi in questo modo e possono essere di più tipi per ottenere l'accesso alle informazioni memorizzate in ogni parte della struttura annidata. Qui ci sono altri esempi:</p>
  <p class="code">// Access a grid that has been added to a list that is part of a map:<br />
    var _a = data[? &quot;lists&quot;][| 0][# 0, 0];<br />
    <br />
    // Access an array nested in a list from a script and modify it:<br />
    data[| 0][@ 10] = 100;<br />
    <br />
    // Access a map nested in a grid nested in a list nested in an array:<br />
    data[0][| 10][# 3, 4][? &quot;key&quot;] = &quot;hello world&quot;;
  </p>
  <p>Usare accessi concatenati per le cose non solo significa che potete scrivere codice più compatto, ma vi permetterà anche di usare l'iterazione (per esempio, usando un <a href="Language_Features/for.htm"><span class="inline">for</span></a> loop) e altre tecniche per accedere ai dati in modo più pulito e intuitivo.</p>
  <p>Vale la pena notare che quando si usano gli accessori in questo modo, si dovrebbe sempre usare l'accessore <span class="inline">@</span> per gli array, altrimenti si aggiungerà un sovraccarico extra a qualsiasi azione venga eseguita. Come menzionato sopra, per default gli array sono passati per riferimento nelle funzioni e poi usano il comportamento &quot;copy on write&quot; quando vengono modificati. Tuttavia, se l'array è parte di una catena, allora l'elemento precedente nella catena sarà aggiornato con l'array copiato e l'&quot;originale&quot; sarà cancellato. Per esempio, facendo qualcosa del genere:</p>
  <p class="code">// In an object event<br />
    data[| 0][0] = 100;<br />
    <br />
    // In a function<br />
    data[| 0][0] = 200;
  </p>
  <p>ottiene gli stessi risultati che fare questo:</p>
  <p class="code">// In an object event<br />
    data[| 0][0] = 100;<br />
    <br />
    // In a function<br />
    data[| 0][@ 0] = 200;
  </p>
  <p>Tuttavia, il secondo esempio è migliore perché funziona senza l'inutile sovraccarico di copiare prima l'intero array.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Indietro: <a href="GML_Overview.htm">Panoramica GML</a></div>
        <div style="float:right">Avanti: <a data-xref="{title}" href="Language_Features.htm">Caratteristiche della lingua</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tutti i diritti riservati</span></h5>
  </div>
  <!-- KEYWORDS
div
mod
bitwise operators
bitshift
and
or
xor 
&amp;&amp;
||
^^
%
|
&amp;
^
&lt;&lt;
&gt;&gt;
bitwise or
bitwise and
bitwise xor
bitshift left
bitshift right
&lt;
&lt;=
==
!=
&gt;
&gt;=
++
$
hexadecimal
-->
  <!-- TAGS
expressions_operators
-->
</body>
</html>