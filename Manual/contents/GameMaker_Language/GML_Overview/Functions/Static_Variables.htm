<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Variabili statiche</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page outlining the use of Static Variables" />
  <meta name="rh-index-keywords" content="Static Variables" />
  <meta name="search-keywords" content="Static Variables,static" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Variabili statiche</h1>
  <p>Una caratteristica interessante delle <a href="../Script_Functions.htm">funzioni di script</a> e delle <a href="../Method_Variables.htm">variabili di metodo</a> è che possono avere <strong>variabili statiche</strong>. Una variabile statica è quella che viene definita la prima volta che la funzione viene chiamata e che manterrà il suo valore da allora in poi. Per creare una variabile statica è necessario definirla usando la parola chiave <span class="inline">static</span>, come mostrato in questo semplice esempio:</p>
  <p class="code">counter = function()<br />
    {<br />
        static num = 0;<br />
        return num++;<br />
    }</p>
  <p>Nell'esempio precedente, la variabile <span class="inline">num</span> è una variabile statica, e quindi sarà definita come <span class="inline">0</span> la prima volta che la funzione viene chiamata, ma ogni volta che la funzione viene chiamata dopo, l'inizializzazione della variabile sarà ignorata. Quindi, se poi chiamate questa funzione in questo modo</p>
  <p class="code">for (var i = 0; i &lt; 10; ++i;)<br />
    {<br />
        show_debug_message(counter());<br />
    }</p>
  <p>L'output sarà:</p>
  <p class="code">0<br />
    1<br />
    2<br />
    3<br />
    4<br />
    5<br />
    6<br />
    7<br />
    8<br />
    9</p>
  <p>Se non avete usato la parola chiave <span class="inline">static</span> qui, allora l'output sarebbe semplicemente <span class="inline">0</span> per ogni iterazione di <span class="notranslate">loop</span>, poiché la variabile <span class="inline">num</span> verrà definita come <span class="inline">0</span> ogni volta che la funzione viene chiamata prima di essere restituita. Notate che una variabile statica può essere cambiata solo all'interno della funzione originale, e restituirla vi darà semplicemente una copia del suo valore - essenzialmente la variabile statica condivisa può essere cambiata solo dalla funzione che la contiene.</p>
  <p>Una variabile statica è sempre inizializzata all'inizio della funzione, quindi non importa dove definite una variabile statica nella funzione, sarà sempre disponibile per essere letta e cambiata durante la funzione (anche se viene usata prima di essere definita). Vedi il seguente esempio:</p>
  <p class="code">function add_health()<br />
    {<br />
        my_health++;<br />
        show_debug_message(my_health);<br />
        static my_health = 1;<br />
    }</p>
  <p>Qui la variabile statica &quot;<span class="inline">my_health</span>&quot; viene modificata e stampata nell'output del compilatore <em>prima di</em> essere inizializzata. Anche se questo sembra sbagliato, va perfettamente bene perché le variabili statiche sono inizializzate <em>prima che </em>qualsiasi codice di funzione venga eseguito. Notate che se ci sono più variabili statiche in una funzione, l'ordine in cui sono state definite sarà mantenuto quando sono inizializzate all'inizio.</p>
  <p>Potete anche usare la parola chiave <span class="inline">static</span> all'interno di una funzione per creare una <strong>funzione statica</strong>, che - come per le variabili - significa semplicemente che la funzione sarà definita solo una volta, cioè la prima volta che la funzione viene chiamata, per esempio:</p>
  <p class="code">function(_x, _y) Vector2 constructor<br />
    {<br />
        x = _x;<br />
        y = _y;<br />
    <br />
        static Add = function( _other )<br />
        {<br />
            x += _other.x;<br />
            y += _other.y;<br />
        }<br />
    }
  </p>
  <p>Nell'esempio precedente, la funzione costruttore <span class="inline"><span class="inline">Vector2</span> può essere usata per creare un <span class="notranslate">struct</span>, e il <span class="notranslate">struct</span> avrà alcune variabili, una delle quali è la variabile metodo <span class="inline"><span class="inline">Add</span>. Poiché questa variabile è stata definita come statica, la funzione che contiene sarà inizializzata solo <em>una volta </em>la prima volta che la funzione <span class="inline">Vector2</span> viene chiamata, e tutti gli ulteriori <span class="notranslate">structs</span> creati con questo costruttore faranno riferimento alla funzione <span class="inline">Add</span> che è stata creata inizialmente, invece di creare una nuova funzione per ogni <span class="notranslate">struct</span> (per maggiori informazioni su <span class="notranslate">structs</span> e la parola chiave <span class="inline">constructor</span> vedere <a href="../Structs.htm">qui</a>).</p>
  <p>Quando si usa l'ereditarietà con i costruttori, qualsiasi variabile statica nel costruttore figlio sarà inizializzata solo una volta che il costruttore padre è stato eseguito, quindi le variabili statiche del costruttore figlio non sovrascriveranno le variabili statiche del padre. Vedi il seguente esempio:</p>
  <p class="code">function Parent() constructor<br />
    {<br />
        show_debug_message(value);<br />
        static value = 10;<br />
    }<br />
    <br />
    function Child() : Parent() constructor<br />
    {<br />
        show_debug_message(value);<br />
        static value = 20;<br />
    }<br />
    <br />
    var _child = new Child();
  </p>
  <p>Chiamando il costruttore <span class="inline">Child()</span> si stampa questo nel log di uscita:</p>
  <p class="code">10<br />
    20</p>
  <p>Il primo valore viene dal costruttore genitore, e il secondo dal costruttore figlio. Questo mostra che la variabile statica del bambino <span class="inline">value</span> non è stata inizializzata fino a quando il costruttore genitore non è stato finito, e che in ogni costruttore la variabile statica è stata inizializzata prima della chiamata <span class="inline">show_debug_message()</span>.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Indietro: <a href="../GML_Overview.htm">Panoramica GML</a></div>
        <div style="float:right">Avanti: <a data-xref="{title}" href="../Arrays.htm">Array</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tutti i diritti riservati</span></h5>
  </div>
  <!-- KEYWORDS
Static Variables
static
-->
  <!-- TAGS
static
-->
</body>
</html>