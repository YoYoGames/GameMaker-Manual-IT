<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Strutture e costruttori</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page outlining the use of Structs" />
  <meta name="rh-index-keywords" content="Structs" />
  <meta name="search-keywords" content="structs,new,delete,struct" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Strutture e costruttori</h1>
  <p>Una <strong>struct </strong>è una variabile che contiene un insieme di altre variabili. Le variabili contenute in <span class="notranslate">struct</span> possono essere di qualsiasi <a href="Data_Types.htm">tipo di dati</a> precedentemente menzionato e queste variabili possono essere lette e scritte dopo la dichiarazione iniziale di <span class="notranslate">struct</span>; inoltre, è possibile aggiungere altre variabili a una <span class="notranslate">struct</span> dopo che è stata dichiarata.</p>
  <p>Le variabili utilizzate in <span class="notranslate">struct</span> devono seguire il consueto schema di denominazione delle variabili, ossia: non possono iniziare con un numero e devono essere composte solo da caratteri alfanumerici e dal carattere di sottolineatura &quot;_&quot;; si noti inoltre che il contenuto di una <span class="notranslate">struct</span> è <em>indipendente dall'istanza o dalla funzione che l'ha creata</em>, e pertanto è possibile - se lo si desidera - utilizzare nomi di variabili incorporati come <span class="inline">image_index</span> o <span class="inline">x</span> e <span class="inline">y</span>.</p>
  <p>Dopo la creazione iniziale, <span class="notranslate">structs</span> non ha costi di elaborazione finché esiste, anche se occupa spazio in memoria <i>.</i> La sintassi di <span class="notranslate">struct</span> è la seguente:</p>
  <p class="code"><i>&lt;variable&gt;</i> =<br />
    {<br />
    <i>    &lt;variable&gt;</i> : <i>&lt;value&gt;</i>,<br />
    <i>    &lt;variable&gt;</i> : <i>&lt;value&gt;</i>,<br />
        etc...<br />
    };
  </p>
  <p>Quindi, un esempio pratico potrebbe essere:</p>
  <p class="code">mystruct =<br />
    {<br />
        a : 20,<br />
        b : &quot;Hello World&quot;<br />
    };</p>
  <p>Il codice precedente crea un ambito di istanza <span class="notranslate">struct</span> nella variabile <span class="inline">mystruct</span> e la popola con alcuni valori (<span class="notranslate">structs</span> può essere creata a livello locale, di istanza e globale, proprio come qualsiasi altra variabile - si veda la sezione <a href="Variables_And_Variable_Scope.htm">Variabili e ambito delle variabili</a> per maggiori informazioni). Si noti che non è necessario popolare il contenuto di una <span class="notranslate">struct</span> quando viene creata inizialmente e si può creare una <span class="notranslate">struct</span> vuota semplicemente facendo questo:</p>
  <p class="code">mystruct = {};</p>
  <p>Le variabili possono essere aggiunte a questo <span class="notranslate">struct</span> in un momento successivo del codice di gioco. Per aggiungerle in seguito si usa l'operatore punto (come in <a href="Addressing_Variables_In_Other_Instances.htm">Indirizzare le variabili in altre istanze</a>): </p>
  <p class="code">mystruct.newItem = &quot;Some Text&quot;;</p>
  <p>Il risultato è lo stesso dell'inizializzazione di <span class="notranslate">struct</span> in questo modo: </p>
  <p class="code">mystruct =<br />
    {<br />
        newItem : &quot;Some Text&quot;<br />
    };</p>
  <p>Ecco un esempio di <span class="notranslate">struct</span> con diverse variabili e tipi di dati:</p>
  <p class="code">var _xx = 100;<br />
    mystruct =<br />
    {<br />
        a : 10,<br />
        b : &quot;Hello World&quot;,<br />
        c : int64(5),<br />
        d : _xx + 50,<br />
        e : function(a, b)<br />
            {<br />
                return a + b;<br />
            },<br />
        f : [ 10, 20, 30, 40, 50 ],<br />
        g : image_index<br />
    };</p>
  <p>Nel codice sopra riportato si noterà che è possibile definire metodi e utilizzare le funzioni di <span class="notranslate">runtime</span> anche in <span class="notranslate">structs</span>, e che è possibile utilizzare variabili locali e di istanza all'interno della dichiarazione di <span class="notranslate">struct</span>.</p>
  <h3 id="inst_in_struct">Variabili di istanza nella dichiarazione di <span class="notranslate">Struct</span>?</h3>
  <p>Ad esempio, nell'esempio precedente si nota che la variabile <span class="notranslate">struct</span> &quot;g&quot; viene impostata su <span class="inline">image_index</span>, che è una variabile di istanza. Si potrebbe pensare che in questo caso sia necessario utilizzare la <a href="Instance_Keywords.htm">parola chiave</a> <span class="inline">other</span> per ottenere la variabile di istanza, ma non è necessario. In sostanza, quando si definisce una struct<strong>, tutte le variabili membro sul lato sinistro dei due punti &quot;:&quot; sono le variabili della <em>struct</em></strong>, mentre i valori e le variabili sul lato destro utilizzano l'ambito di ciò che definisce la struct (in questo caso, un'istanza). </p>
  <p>Vediamo un semplice esempio per illustrare questo aspetto. Supponiamo di voler definire un <span class="notranslate">struct</span> con le variabili &quot;x&quot; e &quot;y&quot; e di volerle impostare sulle &quot;x&quot; e &quot;y&quot; dell'istanza che definisce il <span class="notranslate">struct</span>. In pratica, il codice sarebbe simile a questo:</p>
  <p class="code">mystruct =<br />
    {<br />
        x : x,<br />
        y : y<br />
    };</p>
  <p>Nel codice sopra riportato, le variabili membro <span class="notranslate">struct</span> <span class="inline">x</span> e <span class="inline">y</span> vengono impostate sui valori contenuti nelle variabili di istanza <span class="inline">x</span> e <span class="inline">y</span>, poiché il lato destro dei due punti &quot;:&quot; si riferisce all'istanza che sta definendo <span class="notranslate">struct</span>. Vale la pena notare che questo significa che <em>non si possono</em> usare le variabili membro <span class="notranslate">struct</span> per definire variabili successive all'interno della dichiarazione <span class="notranslate">struct</span>. Per esempio, il seguente esempio darebbe un errore:</p>
  <p class="code">mystruct =<br />
    {<br />
        a : 10,<br />
        b : 10,<br />
        c : a + b<br />
    }</p>
  <p>L'errore si verifica perché le variabili <span class="inline">a</span> e <span class="inline">b</span> vengono valutate nell'ambito di ciò che definisce <span class="notranslate">struct</span> (sono sul lato destro dei due punti &quot;:&quot;) e <em>non</em> sono quelle definite all'interno di <span class="notranslate">struct</span> stesso.<strong></strong></p>
  <h3 style="padding-left: 20px"><em><strong style="margin-left: 0px">IMPORTANTE!</strong></em> <strong>Non è possibile </strong>utilizzare le variabili di ambito <em><strong>globale </strong></em>come nomi di membri di <span class="notranslate">struct</span>, ad esempio: <span class="inline">game_id</span> o <span class="inline">fps</span>. L'elenco completo di queste variabili globali è disponibile alla pagina seguente:</h3>
  <ul class="colour">
    <li><a href="Struct_Forbidden_Variables.htm">Variabili proibite della struttura</a></li>
  </ul>
  <p>Una volta definito un <span class="notranslate">struct</span>, è possibile accedere ai dati al suo interno utilizzando la notazione &quot;punto&quot;, come in questo caso:</p>
  <p class="code">mystruct =<br />
    {<br />
        a : 20,<br />
        b : &quot;Hello World&quot;<br />
    }<br />
    <br />
    mystring = mystruct.b + string(mystruct.a);
  </p>
  <p>È inoltre possibile eseguire operazioni sulle variabili all'interno di <span class="notranslate">struct</span> o utilizzarle nelle funzioni, proprio come si farebbe con qualsiasi altra variabile. Ad esempio:</p>
  <p class="code">mystruct.a += 1;<br />
    mystruct.b = mystruct.a + 20;<br />
    mydir = point_direction(mouse_x, mouse_y, mystruct.xx, mystruct.yy);</p>
  <p>Infine, <span class="notranslate">structs</span> può avere altri <span class="notranslate">structs</span> annidati al suo interno, come questo:</p>
  <p class="code">mystruct =<br />
    {<br />
        a :<br />
        {<br />
            aa : &quot;This is an example&quot;<br />
        },<br />
        b :<br />
        {<br />
            bb : &quot;And another one&quot;<br />
        },<br />
    };</p>
  <p>Per accedere a questo <span class="notranslate">structs</span> annidato si usa ancora la notazione per punti, come in questo caso:</p>
  <p class="code">var _str = mystuct.a.aa + &quot; &quot; + mystruct.b.bb;<br />
    show_debug_message(_str);</p>
  <p>Un altro modo per accedere ai dati in <span class="notranslate">struct</span> è quello di utilizzare la funzione <a href="Language_Features/with.htm"><span class="inline">with()</span></a> . Ad esempio, si può fare così:</p>
  <p class="code">with(mystruct)<br />
    {<br />
        a += other.x;<br />
    }</p>
  <p>L'uso di <span class="inline">with()</span> cambia l'ambito del codice in <span class="notranslate">struct</span>, dove è possibile manipolare le variabili membro nell'ambito della struct. Si noti che nell'esempio si usa anche la <a href="Instance_Keywords.htm">parola chiave<span class="inline">other</span> </a>. Questo funziona proprio come in un'istanza quando si usa <span class="inline">with()</span> e farà riferimento all'istanza (o <span class="notranslate">struct</span>) che sta effettivamente eseguendo il blocco di codice.</p>
  <p>Quando un <span class="notranslate">struct</span> non è più necessario, può essere rimosso dalla memoria utilizzando l'operatore <a href="Language_Features/delete.htm"><span class="inline">delete</span></a> che segnala il <span class="notranslate">struct</span> come in grado di essere raccolto dalla spazzatura. Questa operazione non è strettamente necessaria, in quanto il <a class="glossterm" data-glossterm="collettore di rifiuti" href="#">garbage collector</a> può farlo automaticamente se <span class="notranslate">struct</span> non è più referenziato nel codice, ma è una buona pratica e la raccomandiamo (per esempio, chiamare <span class="inline">delete</span> nell'<a href="../../The_Asset_Editors/Object_Properties/Object_Events.htm">evento Clean Up</a> di un'istanza per dire esplicitamente al garbage collector che un ambito di istanza <span class="notranslate">struct</span> deve essere cancellato). Ecco un esempio:</p>
  <p class="code">// Create event<br />
    mystruct =<br />
    {<br />
        pos_x : x,<br />
        pos_y : y,<br />
        count : 1000<br />
    };<br />
    <br />
    // Clean Up event<br />
    delete mystruct;
  </p>
  <h2 id="constr">Funzioni del costruttore</h2>
  <p>È inoltre possibile utilizzare <a href="Script_Functions.htm">funzioni</a> o <a href="Method_Variables.htm">metodi</a> <a href="Script_Functions.htm">di script</a> per creare funzioni che possono essere utilizzate per generare nuovi <span class="notranslate">structs</span>, il che richiede l'uso della parola chiave <span class="inline">constructor</span> per la funzione e dell'operatore <a href="Language_Features/new.htm"><span class="inline">new</span></a> quando si crea un <span class="notranslate">struct</span> da tale funzione. Si veda la seguente funzione:</p>
  <p class="code">function Vector2(_x, _y) <strong>constructor</strong><br />
    {<br />
        x = _x;<br />
        y = _y;<br />
    <br />
        static Add = function(_vec2)<br />
        {<br />
            x += _vec2.x;<br />
            y += _vec2.y;<br />
        }<br />
    }
  </p>
  <p>Oppure, utilizzando la sintassi della variabile metodo:</p>
  <p class="code">Vector2 = function(_x, _y) constructor<br />
    {<br />
        x = _x;<br />
        y = _y;<br />
    <br />
        static Add = function(_vec2)<br />
        {<br />
            x += _vec2.x;<br />
            y += _vec2.y;<br />
        }<br />
    }
  </p>
  <p>Qui creiamo una funzione chiamata <span class="inline">Vector2</span> e diciamo a <span data-keyref="GameMaker Name">GameMaker</span> che si tratta di una funzione usata per creare le strutture, aggiungendo la parola chiave <span class="inline">constructor</span> dopo la sua definizione. È quindi possibile chiamare questa funzione costruttore in questo modo:</p>
  <p class="code">v2 = new Vector2(10, 10);</p>
  <p>La variabile <span class="inline">v2</span> conterrà ora un <span class="notranslate">struct</span> con le variabili <span class="inline">x</span> e <span class="inline">y</span> e la variabile metodo <a href="Functions/Static_Variables.htm"><span class="notranslate">static</span></a> <a href="Method_Variables.htm">variabile di metodo</a> <span class="inline">Add</span>.</p>
  <p>È anche possibile utilizzare argomenti opzionali nelle funzioni del costruttore:</p>
  <p class="code">function Vector2(<strong>_x = 0, _y = 0</strong>) constructor<br />
    {<br />
        x = _x;<br />
        y = _y;<br />
    }</p>
  <p>Questo costruttore ora utilizzerà <span class="inline">0</span> per gli argomenti <span class="inline">_x</span> e <span class="inline">_y</span>, se non sono specificati al momento della chiamata della funzione. Ciò significa che è possibile creare un nuovo <span class="inline">Vector2</span> <span class="notranslate">struct</span> senza dover specificare alcun argomento:</p>
  <p class="code">empty_vector = new Vector2();</p>
  <h2>Eredità</h2>
  <p>Le funzioni create in questo modo supporteranno anche l'<b>ereditarietà</b> singola, cioè si può creare una funzione costruttore che <span class="notranslate">inherits</span> dati da un'altra funzione costruttore.</p>
  <p class="note"><strong>NOTA</strong>: Quando si lavora con l'ereditarietà, non si possono usare variabili di metodo per definire la funzione costruttore, ma solo le funzioni <span class="notranslate">script</span>.</p>
  <p>Per esempio, abbiamo creato la funzione costruttore <span class="inline">Vector2</span> qui sopra, quindi possiamo usarla come &quot;genitore&quot; di un'altra funzione costruttore, che chiameremo <span class="inline">Vector3</span>:</p>
  <p class="code">function <strong>Vector3(_x, _y, _z) </strong><strong>:</strong><strong> Vector2(_x, _y) </strong>constructor<br />
    {<br />
        z = _z;<br />
    <br />
        static Add = function( _vec3 )<br />
        {<br />
            x += _vec3.x;<br />
            y += _vec3.y;<br />
            z += _vec3.z;<br />
        }<br />
    }
  </p>
  <p>Come si può notare, nel definire la funzione si usano i due punti &quot;<span class="inline">:</span>&quot; per separare il nuovo costruttore dal costruttore padre da cui si eredita. Il costruttore figlio (<span class="inline">Vector3</span>) passa gli argomenti <span class="inline">_x</span> e <span class="inline">_y</span> al costruttore genitore (<span class="inline">Vector2</span>), che vengono utilizzati per eseguire prima il costruttore del genitore, dopodiché viene eseguito il costruttore del figlio. In questo modo, il costruttore figlio riceve le variabili del genitore (<span class="inline">x</span> e <span class="inline">y</span>) e può anche definire le proprie (<span class="inline">z</span>).</p>
  <p>Si possono anche passare valori costanti nel costruttore padre, in modo che un certo costruttore figlio fornisca sempre gli stessi valori al suo costruttore padre:</p>
  <p class="code">function Item(damage) constructor<br />
    {<br />
        my_damage = damage;<br />
    }<br />
    <br />
    function BasicSword() : Item(10) constructor<br />
    {}<br />
    <br />
    var _basic_sword = new BasicSword();<br />
    show_debug_message(_basic_sword.my_damage); // Prints 10
  </p>
  <p>Ciò significa che il danno di una spada base sarà sempre <span class="inline">10</span>, poiché passa questo valore al suo costruttore genitore, indipendentemente da quali siano i suoi argomenti.</p>
  <p>Si noti che l'assegnazione di un valore predefinito a un argomento in un costruttore figlio sovrascrive il valore predefinito del costruttore padre per quell'argomento. Si veda l'esempio seguente:</p>
  <p class="code">function Parent(value = 10) constructor<br />
    {<br />
        show_debug_message(value);<br />
    }<br />
    <br />
    function Child(value = 20) : Parent(value) constructor<br />
    {<br />
        show_debug_message(value);<br />
    }<br />
    <br />
    var _child = new Child();
  </p>
  <p>Entrambi i costruttori stamperanno <span class="inline">20</span> nel log di output, poiché questo era il valore predefinito per l'argomento impostato dal costruttore figlio e lo stesso valore è stato passato nel costruttore padre.</p>
  <p>Per maggiori dettagli sugli operatori <span class="inline">new</span> e <span class="inline">delete</span>, consultare le pagine seguenti:</p>
  <ul class="colour">
    <li><a href="Language_Features/new.htm"><span class="inline">new</span></a></li>
    <li><span class="inline"><a href="Language_Features/delete.htm"><span class="inline">delete</span> </li>
  </ul>
  <h2>Uscita di stringa</h2>
  <p>Un'ultima cosa da menzionare riguardo a <span class="notranslate">structs</span> è che è possibile cambiare l'output della console per <span class="notranslate">debugging</span>. Per impostazione predefinita, chiamando la funzione <a href="../GML_Reference/Debugging/show_debug_overlay.htm"><span class="inline">show_debug_message()</span></a> su un oggetto <span class="notranslate">struct</span>, viene mostrato il contenuto dell'oggetto <span class="notranslate">struct</span> (come mostrato sopra). Tuttavia, è possibile personalizzare questo messaggio aggiungendo un metodo specifico a <span class="notranslate">struct</span>, chiamato <span class="inline">toString</span>:</p>
  <p class="code">mystruct =<br />
    {<br />
        a : 20,<br />
        b : &quot;Hello World&quot;,<br />
    <br />
        toString : function()<br />
        {<br />
            return &quot;This stuct says &quot; + b + &quot;, &quot; + string(a) + &quot; times!&quot;;<br />
        }<br />
    }<br />
    show_debug_message(mystruct);
  </p>
  <p>Ora, quando viene richiamata la funzione <span class="inline">show_debug_message()</span>, il metodo <span class="inline">toString</span> verrà utilizzato per generare l'output e, con l'esempio precedente, si otterrà:</p>
  <p class="code">This struct says Hello World, 20 times!</p>
  <p>Si noti che si può anche chiamare la funzione <a href="../GML_Reference/Strings/Strings.htm"><span class="inline">string()</span></a> su un riferimento a <span class="notranslate">struct</span> e usarlo per visualizzare il contenuto - o il metodo <span class="inline">toString</span> - sullo schermo, o salvarlo in un file, o altro, ad esempio:</p>
  <p class="code">var _str = string(mystruct);<br />
    draw_text(32, 32, _str);</p>
  <p>Infine, ci sono alcune funzioni di runtime che si possono usare su <span class="notranslate">structs</span> per ottenere le variabili che contengono e alcune altre cose. Le trovate nella sezione seguente:</p>
  <ul class="colour">
    <li><a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">Funzioni variabili</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Indietro: <a href="GML_Overview.htm">Panoramica del GML</a></div>
        <div style="float:right">Avanti: <a data-xref="{title}" href="Commenting_Code.htm">Commentare il codice</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tutti i diritti riservati</span></h5>
  </div>
  <!-- KEYWORDS
Structs
struct
constructor
-->
  <!-- TAGS
structs
-->
</body>
</html>