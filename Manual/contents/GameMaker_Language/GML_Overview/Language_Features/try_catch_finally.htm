<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>try / catch / finally</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the try / catch / finally functions" />
  <meta name="rh-index-keywords" content="try,catch,finally" />
  <meta name="search-keywords" content="try,catch,finally" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>try / catch / finally</h1>
  <p>Le dichiarazioni <span class="inline">try</span>, <span class="inline">catch</span> e <span class="inline">finally</span> possono essere usate nel vostro gioco per il controllo degli errori e vi permettono di testare blocchi di codice e controllare cosa succede se si verificano <a href="../../../Additional_Information/Errors/Runner_Errors.htm">eccezioni di runtime</a>. L'utilizzo di queste dichiarazioni eviterà che l'eccezione ponga fine al gioco e mostri il messaggio di errore standard all'utente, ma questo significa che dovrete gestire ciò che accade dopo in quel caso, come salvare i file di log - per esempio - e terminare il gioco con grazia (si noti che se si sceglie di non fare nulla, il gioco potrebbe diventare instabile e non funzionare correttamente).</p>
  <p>Nella sua forma più elementare, la sintassi di <span class="inline">try</span> è la seguente:</p>
  <p class="code">try<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        ...<br />
    }</p>
  <p>Tuttavia, avere un <span class="inline">try</span> senza qualcosa per gestire effettivamente le eccezioni che il codice può produrre non sarà molto utile, quindi di solito lo accoppiamo con un <span class="inline">catch</span>, con la seguente sintassi:</p>
  <p class="code">try<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        ...<br />
    }<br />
    catch(&lt;variable&gt;)<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        ...<br />
    }</p>
  <p>Ciò che fa <span class="inline">catch</span> è permettervi di eseguire codice extra fornito nel blocco seguente quando un'eccezione dal precedente <span class="inline">try</span> è stata catturata. Se si tratta di un'eccezione <span class="notranslate">runtime</span>, allora la variabile fornita può essere usata per accedere a una <a href="../Structs.htm">struct</a> che conterrà le seguenti informazioni:</p>
  <p class="code">{<br />
    message : &quot;&quot;,               // a string that is a short message for this exception<br />
    longMessage : &quot;&quot;,           // a string that is a longer message for this exception<br />
    script : &quot;&quot;,                // a string that describes where the exception came from<br />
    stacktrace : [ &quot;&quot;, &quot;&quot; ],    // an array of strings that is the stack frame the exception was generated<br />
    }</p>
  <p>Un semplice esempio d'uso è mostrato qui sotto:</p>
  <p class="code">var a = 0, b = 0, c = 0;<br />
    try<br />
    {<br />
        c = a div b;<br />
    }<br />
    catch( _exception)<br />
    {<br />
        show_debug_message(_exception.message);<br />
        show_debug_message(_exception.longMessage);<br />
        show_debug_message(_exception.script);<br />
        show_debug_message(_exception.stacktrace);<br />
    }</p>
  <p>Può essere che si voglia eseguire del codice indipendentemente dal fatto che un'eccezione sia stata lanciata o meno, e quindi per questo si può aggiungere un blocco <span class="inline">finally</span>. La sintassi di <span class="inline">finally</span> è:</p>
  <p class="code">finally<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        etc...<br />
    }</p>
  <p>Vale la pena notare che si può avere qualsiasi combinazione di questi insieme, cioè:</p>
  <ul class="colour">
    <li><span class="inline">try</span> / <span class="inline">finally</span></li>
    <li><span class="inline">try</span> / <span class="inline">catch</span></li>
    <li><span class="inline">try</span> / <span class="inline">catch</span> / <span class="inline">finally</span></li>
  </ul>
  <p>Notate che all'interno del blocco <span class="inline">finally</span> <em>non potete </em>usare <a href="break.htm"><span class="inline">break</span></a>, <a href="continue.htm"><span class="inline">continue</span></a>, <a href="exit.htm"><span class="inline">exit</span></a> o <a href="return.htm"><span class="inline">return</span></a> poiché non hanno alcun significato in questo contesto e il compilatore genererà un errore se vengono utilizzati.</p>
  <p>Infine, potete anche annidare vari <span class="inline">try</span> / <span class="inline">catch</span> / <span class="inline">finally</span> uno dentro l'altro, per esempio:</p>
  <p class="code">var a = 0, b = 0, c = 0;<br />
    try<br />
    {<br />
        try<br />
        {<br />
            c = a div b;<br />
        }<br />
        finally<br />
        {<br />
            ++a;<br />
        }<br />
    }<br />
    catch(_exception)<br />
    {<br />
        ++a;<br />
        show_debug_message(_exception.message);<br />
        show_debug_message(_exception.longMessage);<br />
        show_debug_message(_exception.script);<br />
        show_debug_message(_exception.stacktrace);<br />
    }<br />
    finally<br />
    {<br />
        show_debug_message(&quot;a = &quot; + string(a));<br />
    }</p>
  <p>Vale la pena notare che si può prendere il posto del messaggio di errore predefinito <span class="notranslate">GML</span> e usare il proprio codice di gestione chiamando la funzione <a href="../../GML_Reference/Debugging/exception_unhandled_handler.htm"><span class="inline">exception_unhandled_handler()</span></a>. Questa <a href="../Runtime_Functions.htm">funzione di runtime</a> vi permette di fornire un codice personalizzato <a href="../Method_Variables.htm"><span class="notranslate">method</span></a> da utilizzare che sarà chiamato ogni volta che si verifica un'eccezione non gestita nel vostro gioco.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Indietro: <a href="../Language_Features.htm">Caratteristiche della lingua</a></div>
        <div style="float:right">Il prossimo: <a href="throw.htm"><span class="notranslate">throw</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tutti i diritti riservati</span></h5>
  </div>
  <!-- KEYWORDS
try
catch
finally
-->
  <!-- TAGS
try
catch
finally
-->
</body>
</html>