<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>con</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the with function" />
  <meta name="rh-index-keywords" content="with" />
  <meta name="search-keywords" content="with" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>con</h1>
  <p>Come indicato nella sezione <a href="../Addressing_Variables_In_Other_Instances.htm">Indirizzare le variabili in altre istanze</a>, è possibile leggere e cambiare il valore delle variabili in istanze e <a href="../Structs.htm">strutture</a> diverse da quella che sta eseguendo qualsiasi codice. Tuttavia, in un certo numero di casi si vuole fare molto di più che cambiare una singola variabile all'interno di quelle altre istanze, e si possono voler eseguire azioni di codice più complesse che richiedono più funzioni e linee di codice. Per esempio, immaginate di voler spostare tutte le istanze di una palla <span class="notranslate">object</span> nel vostro gioco di 8 pixel verso il basso. Potreste pensare che questo si ottenga semplicemente con il seguente pezzo di codice:</p>
  <p class="code">obj_ball.y = obj_ball.y + 8;</p>
  <p>Ma questo non è corretto, perché il lato destro dell'assegnazione prende il valore della coordinata y della prima palla e vi aggiunge 8. Poi questo nuovo valore viene impostato come coordinata y di <em>tutte le </em>palline, quindi il risultato è che tutte le palline hanno la stessa coordinata y, e anche se si usa il seguente:</p>
  <p class="code">obj_ball.y += 8;</p>
  <p>avrà esattamente lo stesso effetto perché è semplicemente un'abbreviazione della prima dichiarazione. Quindi come <i>possiamo</i> ottenere qualcosa del genere? Questo è il motivo per cui la dichiarazione <span class="inline">with</span> esiste in <span class="notranslate">GML</span>. La dichiarazione <span class="inline">with</span> ha la seguente sintassi:</p>
  <p class="code">with (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p>Per l'<a class="glossterm" data-glossterm="espressione" href="#">espressione</a>, potete indicare una o più istanze (o un <span class="notranslate">struct</span>) su cui eseguire il codice, usando un ID di istanza, l'ID <span class="notranslate">object</span> (che indica che <i>tutte le istanze</i> nel <span class="notranslate">room</span> di questo <span class="notranslate">object</span> devono eseguire il blocco di codice), l'ID <span class="notranslate">struct</span>, o una delle <a href="../Instance_Keywords.htm">parole chiave</a> speciali (<span class="inline">all</span> o <span class="inline">other</span>). Questo cambierà lo <strong>scopo</strong> del codice all'interno delle parentesi graffe <span class="inline">{}</span> dall'istanza, <span class="notranslate">struct</span> o funzione che effettivamente contiene il codice all'istanza (o istanze o <span class="notranslate">struct</span>) data nell'espressione.</p>
  <p>Una volta che l'espressione ha impostato lo scopo di <span class="inline">with</span>, l'<a class="glossterm" data-glossterm="dichiarazione" href="#">istruzione</a> verrà eseguita per ciascuna delle istanze indicate, come se quell'istanza fosse l'istanza corrente ( <span class="inline">self</span>). Quindi, tornando al nostro problema originale, per spostare tutte le istanze della palla <span class="notranslate">object</span> 8 pixel verso il basso si dovrebbe digitare:</p>
  <p class="code">with (obj_ball)<br />
    {<br />
        y += 8;<br />
    }</p>
  <p>Essenzialmente questo è un <span class="notranslate">loop</span>, e ogni <a class="glossterm" data-glossterm="iterazione" href="#">iterazione</a> del <span class="notranslate">loop</span>, il codice verrà eseguito su un'istanza del <span class="notranslate">object</span> <span class="inline">obj_ball</span>.</p>
  <p>Se volete eseguire più istruzioni, basta includerle nelle parentesi graffe, come fareste con qualsiasi altro blocco di codice. Così, per esempio, per spostare tutte le palline nel nostro esempio in una posizione casuale e dare loro una velocità e una direzione casuale, si dovrebbe usare:</p>
  <p class="code">with (obj_ball)<br />
    {<br />
        x = random(room_width);<br />
        y = random(room_height);<br />
        speed = 1 + random(2);<br />
        direction = random(360);<br />
    }</p>
  <p>Come accennato in precedenza, all'interno delle dichiarazioni, l'istanza o la struct indicata è diventata l'istanza di destinazione (<span class="inline">self</span>) che esegue il blocco di codice, il che significa che l'istanza originale (che contiene l'indirizzo <span class="inline">with</span> e l'intero blocco di codice) è diventata l <a href="../Instance_Keywords.htm"><span class="inline">other</span></a> istanza. Così - per esempio - per spostare tutte le palline nella posizione dell'istanza corrente che contiene effettivamente il codice, si può digitare questo:</p>
  <p class="code">with (obj_ball)<br />
    {<br />
        x = other.x;<br />
        y = other.y;<br />
    }</p>
  <p>La dichiarazione <span class="inline">with</span> è uno strumento estremamente potente ed è utile in molte, molte circostanze quindi è importante che tu capisca appieno come può essere usata. Per aiutarvi ci sono alcuni esempi di utilizzo qui sotto:</p>
  <p class="code">with (instance_create_layer(x, y, &quot;Instances&quot;, obj_Ball))<br />
    {<br />
        speed = other.speed;<br />
        direction = other.direction;<br />
    }</p>
  <p>Il codice di cui sopra creerà un'istanza di <span class="inline">obj_Ball</span> e le assegnerà la velocità e la direzione dell'istanza che esegue l'intero blocco di codice.</p>
  <p class="code">with (instance_nearest(x, y, obj_Ball))<br />
    {<br />
        instance_destroy();<br />
    }</p>
  <p>Il codice di cui sopra distruggerà l'istanza di <span class="inline">obj_Ball</span> più vicina all'istanza che esegue il codice.</p>
  <p class="code">with(clone_struct)<br />
    {<br />
        xx = other.x;<br />
        yy = other.y;<br />
        spd = other.speed;<br />
        dir = other.direction;<br />
    }</p>
  <p>Il codice qui sopra usa <span class="inline">with</span> per indirizzare un <span class="notranslate">struct</span> e impostare le variabili membro date <span class="notranslate">struct</span> ai valori memorizzati nelle variabili di istanza dell'istanza che chiama il codice.</p>
  <p class="code">var _inst = noone;<br />
    with (obj_ball)<br />
    {<br />
        if (str &gt; other.str)<br />
        {<br />
            _inst = id;<br />
        }<br />
    }<br />
    if (_inst != noone)<br />
    {<br />
        target = _inst;<br />
    }</p>
  <p>Il codice di cui sopra è leggermente più complesso dei precedenti a causa dell'uso di una <a href="../Variables_And_Variable_Scope.htm">variabile locale</a>. Questa variabile è <strong>locale </strong>all'<em>evento</em> o alla<em>funzione di</em> <em>script </em>e non all'istanza o a <span class="notranslate">struct</span> e quindi può essere usata e raggiunta da tutte le istanze che sono referenziate all'interno del blocco di codice. Così, nel codice sopra abbiamo impostato una variabile locale alla parola chiave speciale <span class="inline">noone</span> e poi usiamo la costruzione <span class="inline">with</span> per far sì che ogni istanza di <span class="inline">obj_Ball</span> controlli la sua variabile <span class="inline">str</span> contro quella dell'istanza che esegue il blocco di codice. Se il valore della variabile è maggiore, allora memorizzano il loro ID unico nella variabile locale <span class="inline">inst</span>, il che significa che alla fine del codice, solo l'istanza con un valore maggiore dell'istanza chiamante (o della parola chiave <span class="inline">noone</span> se nessuna è maggiore) sarà memorizzata nella variabile locale <span class="inline">_inst</span>.</p>
  <p>Vale la pena notare che potete usare le dichiarazioni speciali <span class="inline"><a href="break.htm">break</a></span> e <span class="inline"><a href="continue.htm">continue</a></span> all'interno di una <font face="Lucida Console"><span style="font-size: 16px;"><b>con</b></span></font> chiamata. Usando <span class="inline">break</span> si uscirà immediatamente dal blocco di codice <span class="inline">with</span> e si passerà a qualsiasi codice che si trova nell'evento o nella funzione dopo che <span class="inline">with</span> dovrebbe aver finito, ad es:</p>
  <p class="code">var count = 0;<br />
    with (obj_Enemy)<br />
    {<br />
        if (++count &gt; 10)<br />
        {<br />
            break;<br />
        }<br />
        hp = 100;<br />
    }</p>
  <p>Il codice di cui sopra <span class="notranslate">loops</span> attraverso le istanze nella <span class="notranslate">room</span> della <span class="notranslate">object</span> <span class="inline">obj_Enemy</span> e imposta la variabile <span class="inline">hp</span> a 100 per le prime 10 che trova. Se esistono più di 10 istanze, il codice chiama <span class="inline">break</span> e finisce.</p>
  <p>Un esempio di utilizzo di <span class="inline">continue</span> in un ciclo <span class="inline">with</span> sarebbe:</p>
  <p class="code">with (obj_Enemy_Parent)<br />
    {<br />
        if (invulnerable == true)<br />
        {<br />
            continue;<br />
        }<br />
        hp -= 25;<br />
    }</p>
  <p>Questo codice <span class="notranslate">loop</span> passerà attraverso tutte le istanze con il genitore <span class="inline">obj_Enemy_Parent</span>, poi controlla ogni istanza per vedere se la variabile di istanza <span class="inline">invulnerable</span> è <span class="inline">true</span> o no. Se lo è, la parola chiave <span class="inline">continue</span> termina l'iterazione corrente di <span class="notranslate">loop</span> e passa alla prossima istanza disponibile, altrimenti rimuove 25 dalla variabile <span class="inline">hp</span>. Questo si ripete fino a quando tutte le istanze con quel genitore sono state controllate.</p>
  <div data-conref="../../../assets/snippets/Instance_creation_order_warning.hts"> </div>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Indietro: <a href="../Language_Features.htm">Caratteristiche della lingua</a></div>
        <div style="float:right">Il prossimo: <a href="return.htm"><span class="notranslate">return</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tutti i diritti riservati</span></h5>
  </div>
  <!-- KEYWORDS
with
-->
  <!-- TAGS
with
-->
</body>
</html>