<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>mentre</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the while function" />
  <meta name="rh-index-keywords" content="while" />
  <meta name="search-keywords" content="while" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>mentre</h1>
  <p>Il <span class="notranslate">GameMaker Language</span> ha un certo numero di modi in cui potete eseguire dei <i>cicli</i>, uno dei più importanti è il <span class="inline">while</span> <span class="notranslate">loop</span>. Questa funzione <span class="notranslate">loop</span> ha la forma:</p>
  <p class="code">while (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p>Qui avete un'<a class="glossterm" data-glossterm="dichiarazione" href="#">istruzione</a> che viene iterata più volte in base ai risultati della valutazione di un'<a class="glossterm" data-glossterm="espressione" href="#">espressione</a>, cioè: con un <span class="inline">while</span> <span class="notranslate">loop</span>, finché l'espressione valuta a <span class="inline">true</span>, l'istruzione (che può anche essere un blocco di codice di istruzioni multiple con parentesi graffe <span class="inline">{}</span>) viene eseguita. Qui sotto potete trovare un esempio di un modo tipico di usare &quot;while&quot;:</p>
  <p class="code">while (place_meeting(x, y, obj_Wall))<br />
    {<br />
        x -= 1;<br />
    }</p>
  <p>Il codice qui sopra sta controllando una collisione tra l'istanza chiamante e un'istanza &quot;muro&quot;, ed eseguirà più <a class="glossterm" data-glossterm="iterazione" href="#">iterazioni</a>mentre se ne verifica una - spostando l'istanza a sinistra di un pixel - finché l'istanza non è più in collisione.</p>
  <p><strong>Quando dovreste usare un <span class="inline">while</span> <span class="notranslate">loop</span>?</strong> Dovrebbe essere usato ogni volta che volete ripetere una o più dichiarazioni, ma non sapete - o non vi interessa - quante volte deve ripetere, tenendo presente che se la valutazione iniziale è <span class="inline">false</span>, le dichiarazioni potrebbero anche non essere eseguite.</p>
  <p>Si prega di notare che dovreste <strong>stare molto attenti ai vostri cicli <span class="inline">while</span> </strong>! Potete facilmente fare <i>infiniti</i> <span class="notranslate">loops</span>, nel qual caso il vostro gioco si bloccherà e non reagirà più a nessun input dell'utente e dovrà essere chiuso a forza. Per esempio:</p>
  <p class="code">while (!place_free(x, y))<br />
    {<br />
        x = random(room_width);<br />
        y = random(room_height);<br />
    }</p>
  <p>Ora, il codice di cui sopra può funzionare bene, ma può anche causare un infinito <span class="notranslate">loop</span> se l'istanza non è in grado di trovare una posizione vuota in cui muoversi, e questo causerà un blocco del gioco. Se vi trovate in una posizione in cui questo genere di cose è una possibilità, allora dovreste o usare un diverso tipo di <span class="notranslate">loop</span> non bloccante, o usare un ulteriore controllo della variabile nell'espressione (potete usare espressioni multiple insieme agli<span class="glossextra">operatori</span> <a href="../Expressions_And_Operators.htm"><span class="inline">and</span> (&amp;<span class="inline">&amp;</span>)</a>, <a href="../Expressions_And_Operators.htm"><span class="inline">or</span> (<span class="inline">||</span>)</a> e <a href="../Expressions_And_Operators.htm"><span class="inline">xor</span> (<span class="inline">^^</span>)</a> per il controllo):</p>
  <p class="code">var _check = 0;<br />
    while ((!place_free(x, y)) &amp;&amp; (_check &lt; 100))<br />
    {<br />
        x = random(room_width);<br />
        y = random(room_height);<br />
        _check += 1;<br />
    }<br />
    if (_check &gt;= 100) <br />
    {<br />
        // code failed, so deal with it<br />
    }</p>
  <p>In alternativa potete usare l'istruzione <span class="inline"><a href="break.htm">break</a></span> per uscire dal <span class="notranslate">loop</span>, per esempio, il seguente codice genererà 100 numeri casuali e poi continuerà, anche se la valutazione <span class="inline">while</span> sarà <em>sempre</em> <span class="inline">true</span>:</p>
  <p class="code">var i = 0;<br />
    while (true)<br />
    {<br />
        x[i] = random(room_width);<br />
        y[i] = random(room_height);<br />
        if ((i++) &gt;= 100)<br />
        {<br />
            break;<br />
        }<br />
    }</p>
  <p>Potete anche usare l'istruzione <a href="continue.htm"><span class="notranslate">continue</span></a> in un <span class="inline">while</span> <span class="notranslate">loop</span>. Usando questo terminerà l'iterazione corrente <span class="notranslate">loop</span> e ricomincerà il ciclo su una nuova iterazione, per esempio:</p>
  <p class="code">var file = file_text_open_read(&quot;Game_Data.txt&quot;);<br />
    var _num = 0;<br />
    while (!file_text_eof(file))<br />
    {<br />
        var _s = file_text_readln(file);<br />
    <br />
        if (_s == &quot;&quot;)<br />
        {<br />
            continue;<br />
        }<br />
    <br />
        str[num++] = _s;<br />
    }<br />
    <br />
    file_text_close(file);
  </p>
  <p>Questo codice sopra aprirà un file e leggerà una linea da esso ogni <span class="notranslate">loop</span> iterazione fino a quando non si raggiunge la fine del contenuto del file. Se la riga letta è un <span class="notranslate">string</span> vuoto, l'iterazione corrente <span class="notranslate">loop</span> viene terminata usando l'istruzione <span class="inline">continue</span> e viene avviata una nuova iterazione, altrimenti il <span class="notranslate">string</span> viene aggiunto in un <a href="../Arrays.htm">array</a> e la posizione dell'array viene incrementata.</p>
  <p>Per altri esempi di funzioni <span class="notranslate">loop</span> si vedano le sezioni su <a href="repeat.htm"><span class="inline">repeat</span></a>, <a href="do___until.htm"><span class="inline">do... until</span></a>, e <a href="for.htm"><span class="inline">for</span></a>.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Indietro: <a href="../Language_Features.htm">Caratteristiche della lingua</a></div>
        <div style="float:right">Il prossimo: <a href="do___until.htm"><span class="notranslate">do / until</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tutti i diritti riservati</span></h5>
  </div>
  <!-- KEYWORDS
while
-->
  <!-- TAGS
while
-->
</body>
</html>