<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>if / else e operatori condizionali</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the If / Else and Conditional Operators" />
  <meta name="rh-index-keywords" content="?,if,else,ternary operator,then" />
  <meta name="search-keywords" content="if,else,then,?,ternary,conditional" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>if / else e operatori condizionali</h1>
  <p>Una caratteristica fondamentale della maggior parte dei linguaggi di programmazione è la capacità di porre una semplice domanda che dia una risposta booleana <span class="inline">true</span> o <span class="inline">false</span>, e in <span class="notranslate">GML</span> questo si ottiene usando la parola chiave <span class="inline">if</span>. Una semplice condizione <span class="inline">if</span> prende un'<a class="glossterm" data-glossterm="espressione" href="#">espressione</a> ed eseguirà una o più<span class="glossextra">istruzioni</span> se l'espressione si risolve come <span class="inline">true</span>, con la seguente forma base:</p>
  <p class="code">if (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p><br>
    Qui state dicendo che se un'espressione si risolve come <span class="inline">true</span> allora fate qualcosa. Notate che la parte &quot;then&quot; della condizione è <em>implicita</em>, ma c'è una parola chiave <span class="inline">then</span> che può essere usata (sebbene sia quasi sempre omessa), così potete anche creare condizionali come questo:</p>
  <p class="code">if (&lt;expression&gt;) then<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p>Oltre a <span class="inline">if</span> e <span class="inline">then</span>, potete anche usare la parola chiave <span class="inline">else</span> per fare qualcos'altro se l'espressione da controllare si valuta come <span class="inline">false</span>. Questa forma &quot;<span class="inline">if... then... else...</span>&quot; si presenta così:</p>
  <p class="code">if (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
    }<br />
    else<br />
    {<br />
        &lt;statement&gt;;<br />
    }</p>
  <p>In questo caso l'espressione sarà valutata, e se valuta come <span class="inline">false</span>, la dichiarazione dopo <span class="inline">else</span> viene eseguita, altrimenti viene eseguita la dichiarazione iniziale (è <span class="inline">true</span>).</p>
  <p class="note"><span class="note">NOTA</span> Nel linguaggio <span class="notranslate">GameMaker</span> qualsiasi valore che sia minore o uguale a 0 sarà valutato come <span class="inline">false</span>, mentre qualsiasi valore che sia maggiore di 0 sarà valutato come <span class="inline">true</span>.</p>
  <p>È una buona abitudine mettere sempre le parentesi attorno alle espressioni e le parentesi graffe {} attorno alle dichiarazioni in <span class="inline">if</span> (altrimenti solo la prima dichiarazione sarà eseguita), e prendere una nuova riga nel blocco per ogni dichiarazione, per esempio:</p>
  <p class="code">// This will work<br />
    if &lt;expression&gt; &lt;statement&gt;;<br />
    <br />
    // Example:<br />
    if test == true variable = false else variable = true;
  </p>
  <p class="code">// This is better<br />
    if (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;<br />
    }<br />
    else<br />
    {<br />
        &lt;statement&gt;<br />
    }<br />
    <br />
    // Example<br />
    if (test == true)<br />
    {<br />
        variable = false;<br />
    }<br />
    else<br />
    {<br />
        variable = true;<br />
    }
  </p>
  <p>Notate che mentre questo è leggermente più prolisso, significa che non c'è ambiguità nel codice e che compilerà correttamente su tutte le piattaforme in ogni momento. Tuttavia, l'esempio iniziale potrebbe non esserlo, come spiegato nella sezione nella pagina <a href="../Expressions_And_Operators.htm">Espressioni e Operatori</a>.</p>
  <p class="note"><strong>NOTA</strong>: Quando si confrontano due valori per vedere se sono uguali, si dovrebbe usare l'operatore &quot;<span class="inline">==</span>&quot;, e usare solo quello &quot;<span class="inline">=</span>&quot; per l'assegnazione. Attualmente <span class="notranslate">GameMaker</span> li tratta come intercambiabili, ma questo potrebbe cambiare in futuro e il vostro codice sarà più pulito e più ovvio quando userete gli operatori corretti per i confronti e le assegnazioni.</p>
  <p>Per dare un esempio appropriato dell'uso di <span class="inline">if</span>, considerate il seguente codice che sposterà un'istanza verso la posizione <span class="inline">x=200</span> nel <span class="notranslate">room</span> quando si trova nell'evento Step:</p>
  <p class="code">if (x &lt; 200)<br />
    {<br />
        x += 4;<br />
    }<br />
    else<br />
    {<br />
        x = 200;<br />
    }</p>
  <p>Notate che potete anche fare controlli <i>composti</i> in un <span class="inline">if</span>, cioè: controllare vari valori o espressioni nella stessa dichiarazione. Questi controlli possono usare i vari <a href="../Expressions_And_Operators.htm">operatori di combinazione</a> (<span class="inline">&amp;&amp;</span> and, <span class="inline">||</span> or, e <span class="inline">^^</span> xor). Quando si fa questo, <span data-keyref="GameMaker Name">GameMaker</span> valuterà ciascuno di essi uno alla volta, e a seconda di come vengono valutati, il resto può essere saltato. Per esempio:</p>
  <p class="code">if (keyboard_check_pressed(vk_enter)) &amp;&amp; (instance_exists(obj_Player))<br />
    {<br />
        go = false;<br />
        alarm[0] = room_speed;<br />
    }</p>
  <p>Qui stiamo controllando usando l'operatore &quot;and&quot; <span class="inline">&amp;&amp;</span>, quindi sta controllando se <em>entrambe </em>le condizioni in <span class="inline">if</span> valutano a <span class="inline">true</span>, e se la prima è <span class="inline">false</span> allora la seconda non sarà nemmeno controllata. Questo si chiama &quot;cortocircuitare&quot; il codice, quindi quando si combinano espressioni da controllare, ci si dovrebbe assicurare che quella più &quot;economica&quot; per le prestazioni sia sempre la prima per evitare di valutare quelle più costose se la prima valuta a <span class="inline">false</span>. In modo simile, se una condizione può essere valutata come <span class="inline">true</span> o <span class="inline">false</span> al momento della compilazione, allora l'intera condizione sarà rimossa dal codice, per esempio, diciamo che avete una <a href="../Variables/Constants.htm">macro</a> <span class="inline">DEBUG_ON </span>per <span class="notranslate">debugging</span> e può essere sia <span class="inline">true</span> che <span class="inline">false</span> - quando è impostata a <span class="inline">false</span> allora il seguente blocco di codice sarà rimosso dal gioco quando viene compilato:</p>
  <p class="code">if DEBUG_ON == true<br />
    {<br />
        show_debug_message(&quot;Instances = &quot; + string(instance_count));<br />
    }</p>
  <p>Potete anche eseguire <b>operazioni condizionali</b> (conosciute anche come operazioni <b>ternarie</b> ), che sono essenzialmente un modo &quot;scorciatoia&quot; per eseguire un'operazione di base <span class="inline">if</span>. Ha la seguente sintassi:</p>
  <p class="code">variable = &lt;condition&gt; ? &lt;statement1 (if <i>true</i>)&gt; : &lt;statement2 (if <i>false</i>)&gt;</p>
  <p>L'operatore condizionale &quot;<span class="inline">?</span>&quot; restituirà uno dei due valori dati a seconda che l'espressione di condizione valuti <span class="inline">true</span> o <span class="inline">false</span>, per esempio:</p>
  <p class="code">var temp_x = (x &lt; (room_width / 2)) ? 32 : (room_width - 32);</p>
  <p>Il codice di cui sopra controllerà il valore di &quot;x&quot; contro il valore della metà della larghezza di <span class="notranslate">room</span> e poi se è inferiore imposterà &quot;<span class="inline">temp_x</span>&quot; a 32 altrimenti &quot;<span class="inline">temp_x</span>&quot; sarà <span class="notranslate">room</span> width - 32. Qui ci sono alcuni altri esempi di utilizzo:</p>
  <p class="code">draw_text(x, y, &quot;The fee is &quot; + (global.Member ? &quot;$2.00&quot; : &quot;$10.00&quot;));<br />
    path_start(((global.level &gt; 10) ? path_hard : path_easy;), 2, path_action_reverse, true);<br />
    (--hp &lt;= 0) ? instance_destroy() : score += 10;</p>
  <p>Vale anche la pena notare che potete annidare le operazioni condizionali, ma se lo fate, ogni operazione dovrà essere racchiusa tra parentesi, per esempio:</p>
  <p class="code">var c = a ? &quot;foo&quot; : (b ? &quot;bar&quot; : &quot;whee&quot;); // Correct<br />
    var c = a ? &quot;foo&quot; : b ? &quot;bar&quot; : &quot;whee&quot;;   // Will cause an error</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Indietro: <a data-xref="{title}" href="../GML_Overview.htm">Panoramica GML</a></div>
        <div style="float:right">Successivo: <a data-xref="{title}" href="../Addressing_Variables_In_Other_Instances.htm">Indirizzare le variabili in altre istanze</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tutti i diritti riservati</span></h5>
  </div>
  <!-- KEYWORDS
if
else
then
ternary operators
conditional operators
-->
  <!-- TAGS
if
else
then
-->
</body>
</html>