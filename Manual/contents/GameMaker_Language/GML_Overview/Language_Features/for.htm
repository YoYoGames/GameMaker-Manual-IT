<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>per</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the for function" />
  <meta name="rh-index-keywords" content="for" />
  <meta name="search-keywords" content="for" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>per</h1>
  <p>Uno dei modi più usati per iterare su una <a class="glossterm" data-glossterm="dichiarazione" href="#">dichiarazione</a> (o più dichiarazioni) più volte è quello di usare un <span class="inline">for</span> <span class="notranslate">loop</span>, che ha questa forma:</p>
  <p class="code">for (&lt;assignment&gt;; &lt;expression&gt;; &lt;operation&gt;;)<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p>Questo funziona come segue - Prima viene eseguita l'assegnazione che assegna un valore a una variabile, poi l'<a class="glossterm" data-glossterm="espressione" href="#">espressione</a> viene valutata e, se è <span class="inline">true</span>, vengono eseguite le dichiarazioni tra le parentesi graffe{}. Successivamente viene eseguita l'operazione sulla variabile assegnata e poi l'espressione viene valutata di nuovo. Questo <span class="notranslate">loop</span> continuerà finché l'espressione non risulterà essere <span class="inline">false</span>.</p>
  <p>Ora, questo può sembrare complicato se scritto così, ma dovreste interpretarlo come:</p>
  <ol>
    <li>Il primo incarico inizializza il ciclo for</li>
    <li>L'espressione verifica se il sito <span class="notranslate">loop</span> deve essere terminato</li>
    <li>La dichiarazione viene eseguita</li>
    <li>L'operazione viene eseguita</li>
    <li>Tornare al passo 2 ed eseguire nuovamente l'espressione e continuare o uscire dal ciclo</li>
  </ol>
  <p>Questo è estremamente utile per fare compiti ripetitivi che comporterebbero più righe di codice in qualsiasi altro modo, ed è comunemente usato come contatore per valutare array, disegnare cose, impostare valori incrementali, ecc. Il seguente esempio di codice illustra un uso tipico di questo tipo di dichiarazione:</p>
  <p class="code">for (var i = 0; i &lt; 10; i += 1)<br />
    {<br />
        draw_text(32, 32 + (i * 32), string(i) + &quot;. &quot;+ string(scr[i]));<br />
    }</p>
  <p>Il codice qui sopra inizializza un <span class="inline">for</span> <span class="notranslate">loop</span>, iniziando da 0 e contando fino a (e incluso) 9, e poi usa il valore <span class="notranslate">loop</span> di <span class="inline">i</span> per disegnare i valori memorizzati in un array lungo lo schermo. Notate come la variabile <span class="inline">for</span> <span class="notranslate">loop</span> <span class="inline">i</span> è usata non solo per <span class="notranslate">loop</span> attraverso l'array, ma anche per disegnare un numero e per dire a <span data-keyref="GameMaker Name">GameMaker</span> dove disegnare i valori in <span class="notranslate">room</span>. Questa flessibilità è una delle ragioni principali per cui <span class="inline">for</span> <span class="notranslate">loops</span> è così importante nella programmazione.</p>
  <p><strong>Quando dovreste usare un <span class="inline">for</span> <span class="notranslate">loop</span>?</strong> Ogni volta che avete bisogno di eseguire un numero fisso di iterazioni su una o più dichiarazioni tenendo traccia dell'<a class="glossterm" data-glossterm="iterazione" href="#">iterazione</a> che è attualmente in esecuzione e usando quel valore di iterazione.</p>
  <p class="note"><b>NOTA</b>: vedrete molti esempi, quando lavorate con altre persone, delle variabili &quot;<span class="inline">i</span>&quot; e &quot;<span class="inline">j</span>&quot; usate per la variabile contatore <span class="notranslate">loop</span>. Questi <b>non</b> sono nomi di variabili obbligatori e potete usare qualsiasi cosa come &quot;<span class="inline">a</span>&quot; o &quot;<span class="inline">foo</span>&quot; o altro. L'uso di &quot;<span class="inline">i</span>&quot; e &quot;<span class="inline">j</span>&quot; è semplicemente una convenzione standard nella programmazione.</p>
  <p>Vale la pena notare che potete usare le dichiarazioni speciali <span class="inline"><a href="break.htm">break</a></span> e <span class="inline"><a href="continue.htm">continue</a></span> anche all'interno di un <span class="inline">for</span> <span class="notranslate">loop</span>. Usando <span class="inline">break</span> si uscirà immediatamente da <span class="notranslate">loop</span> e si passerà a qualsiasi codice che si trova nell'evento o nella funzione dopo che <span class="notranslate">loop</span> dovrebbe aver finito, per esempio:</p>
  <p class="code">var _inst = noone;<br />
    for (var i = 0; i &lt; 10; i += 1)<br />
    {<br />
        _inst = instance_find(obj_Enemy_Parent, i);<br />
        if (instance_exists(_inst))<br />
        {<br />
            if (_inst.object_index == obj_Enemy_Melee)<br />
            {<br />
                break;<br />
            }<br />
        }<br />
    }<br />
    target = _inst;</p>
  <p>Il codice di cui sopra <span class="notranslate">loops</span> attraverso le 10 istanze più vicine del dato &quot;genitore&quot; <span class="notranslate">object</span>, e se viene trovata un'istanza controlla l'ID dell'istanza <span class="notranslate">object</span>, e se è un'istanza di <span class="inline">obj_Enemy_Melee</span> allora la <span class="notranslate">loop</span> viene terminata usando <span class="inline">break</span> e il valore ID assegnato a una variabile (se non viene trovata nessuna istanza, allora la parola chiave <span class="inline"><a href="../Instance_Keywords.htm">noone</a></span> verrà aggiunta alla variabile).</p>
  <p>Un esempio di utilizzo di <span class="inline">continue</span> in un <span class="inline">for</span> <span class="notranslate">loop</span> sarebbe:</p>
  <p class="code">var _val = 0;<br />
    for (var i = 0; i &lt; 10; i += 1)<br />
    {<br />
        if (val_array[i] &lt;= 0)<br />
        {<br />
            continue;<br />
        }<br />
        _val += val_array[i];<br />
    }<br />
    draw_text(32, 32, &quot;Positive Values Total = &quot; + string(_val));</p>
  <p>Questo codice controllerà il valore memorizzato in ogni posizione di una matrice <a href="../Arrays.htm">di</a> 10 lunghezze 1D, e se qualcuno è minore o uguale a 0, <span class="inline">continue</span> <span class="notranslate">loop</span> , il che significa che l'iterazione corrente finirà, <span class="inline">i</span> sarà incrementato, e la prossima iterazione <span class="notranslate">loop</span> sarà iniziata. Se il valore è maggiore di 0, allora viene aggiunto alla variabile locale <span class="inline">_val</span>, e dopo che il <span class="notranslate">loop</span> è finito il valore totale viene disegnato sullo schermo.</p>
  <p>Per altri esempi di parole chiave <span class="notranslate">loop</span> vedere le sezioni su <a href="repeat.htm"><span class="inline">repeat</span></a>, <a href="while.htm"><span class="inline">while</span></a>, e <a href="do___until.htm"><span class="inline">do / until</span></a>.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Indietro: <a href="../Language_Features.htm">Caratteristiche della lingua</a></div>
        <div style="float:right">Il prossimo: <a href="switch.htm"><span class="notranslate">switch</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tutti i diritti riservati</span></h5>
  </div>
  <!-- KEYWORDS
for
-->
  <!-- TAGS
for
-->
</body>
</html>