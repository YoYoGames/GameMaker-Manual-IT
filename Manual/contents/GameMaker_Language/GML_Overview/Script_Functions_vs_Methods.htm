<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>Funzioni di script e metodi</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../assets/css/default.css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="template" content="../../assets/masterpages/Manual_Page.htt" />
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page explaining practical differences between Script Functions and Methods." />
  <meta name="rh-index-keywords" content="Script Functions vs. Methods" />
  <meta name="search-keywords" content="calling methods, calling script functions, method performance" />
</head>
<body>
  <h1>Funzioni di script e metodi</h1>
  <p>Questa pagina contiene informazioni essenziali sull'uso delle funzioni di <span class="notranslate">script</span> rispetto ai metodi.</p>
  <h2>Differenza di base</h2>
  <p>Con questa sintassi viene creata una <a href="Script_Functions.htm">funzione di script</a>:</p>
  <p class="code">function name()<br />
    {<br />
        code;<br />
    }</p>
  <p>Con questa sintassi si crea una <a href="Method_Variables.htm">variabile di metodo</a>:</p>
  <p class="code">name = function()<br />
    {<br />
        code;<br />
    }</p>
  <p>Si dovrebbe usare la prima sintassi in <span class="notranslate">scripts</span>, per creare funzioni globali che possono essere richiamate da qualsiasi ambito del gioco.</p>
  <p>Si dovrebbe usare la seconda sintassi quando si creano funzioni in <a href="Structs.htm">strutture/costruttori</a> e <span class="notranslate">objects</span>. Questa sintassi crea una variabile contenente un metodo.</p>
  <h2>Chiamate dirette</h2>
  <p>È possibile chiamare direttamente le funzioni e i metodi di <span class="notranslate">script</span> usando le parentesi <span class="inline2">()</span>, proprio come una <a href="Runtime_Functions.htm">funzione di runtime</a>:</p>
  <p class="code">// Create the function<br />
    function reset_x()<br />
    {<br />
        x = xstart;<br />
    }<br />
    <br />
    // Call the function<br />
    reset_x();
  </p>
  <p>È anche possibile utilizzare la funzione <a href="../GML_Reference/Asset_Management/Scripts/script_execute.htm"><span class="inline">script_execute()</span></a> per eseguire una funzione di <span class="notranslate">script</span>, anche se si tratta di una funzione ormai obsoleta e il cui uso è sconsigliato.</p>
  <h2>Chiamate indirette: Metodi</h2>
  <p>È possibile memorizzare un riferimento a un metodo, in un'altra variabile, per richiamarlo successivamente attraverso un'altra variabile:</p>
  <p class="code">// Create method<br />
    reset_alpha = function()<br />
    {<br />
        image_alpha = 1;<br />
    }<br />
    <br />
    // Pass reference and call<br />
    temp_1 = reset_alpha;<br />
    temp_1();
  </p>
  <p class="note"><span class="note">NOTA</span> Si noti che il codice non mette <span class="inline2">()</span> dopo <span class="inline2">reset_alpha</span>. Questo perché stiamo leggendo il riferimento al metodo e non lo stiamo chiamando.</p>
  <p>In questo esempio, la chiamata a <span class="inline2">temp_1</span> richiamerà <span class="inline2">reset_alpha</span>, in quanto memorizza un riferimento a quel <strong>metodo</strong>.</p>
  <p>È assolutamente corretto passare un riferimento a un metodo in questo modo. Quando si usano le funzioni di <span class="notranslate">script</span>, però, c'è un'avvertenza.</p>
  <h2>Chiamate indirette: <span class="notranslate">Script</span> Funzioni</h2>
  <p>È anche possibile memorizzare un riferimento a una funzione di <span class="notranslate">script</span>, in un'altra variabile:</p>
  <p class="code">// Create function<br />
    function reset_x()<br />
    {<br />
        x = xstart;<br />
    }<br />
    <br />
    // Store reference<br />
    temp_1 = reset_x;
  </p>
  <p>Ora si può chiamare <span class="inline2">temp_1</span> facendo così:</p>
  <p class="code">temp_1();</p>
  <p>Tuttavia, poiché questa variabile fa riferimento a una <strong>funzione di script</strong>, deve prima convertirla in un <strong>metodo</strong> e poi chiamarla.</p>
  <p>Questo può facilmente comportare un aumento dell'utilizzo della memoria, soprattutto se lo si richiama a ogni fotogramma, perché il motore deve creare un nuovo metodo a ogni fotogramma per questa chiamata. </p>
  <p>Qual è la soluzione?</p>
  <ul class="colour">
    <li>Utilizzare <a href="../GML_Reference/Asset_Management/Scripts/script_execute.htm"><span class="inline">script_execute()</span></a> per chiamare la funzione <span class="notranslate">script</span> tramite il suo riferimento, che non creerà un metodo.</li>
    <li>Oppure, la soluzione migliore: convertire la funzione <span class="notranslate">script</span> <a href="../GML_Reference/Variable_Functions/method.htm">in un metodo</a> quando si passa il suo riferimento.</li>
  </ul>
  <p>Per implementare la seconda soluzione, il codice dovrebbe essere simile a questo:</p>
  <p class="code">temp_1 = method(undefined, reset_x);</p>
  <p>Si tratta di creare un nuovo metodo dalla funzione di script <span class="inline2">reset_x</span>, utilizzando <a href="../GML_Reference/Variable_Functions/method.htm"><span class="inline">method()</span></a>.</p>
  <p>Chiamare <span class="inline2">temp_1()</span> ora, usando le parentesi, non aumenterà l'utilizzo della memoria, perché il metodo è già stato creato per voi.</p>
  <p>Ancora una volta, questo vale solo se si chiama una funzione <span class="notranslate">script</span> <strong>indirettamente</strong>, tramite un riferimento memorizzato in una variabile. Chiamarla direttamente non causa questi problemi.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Indietro: <a data-xref="{title}" href="GML_Overview.htm">Panoramica del codice GML</a></div>
        <div>Avanti: <a data-xref="{title}" href="Functions/Static_Variables.htm">Variabili statiche</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tutti i diritti riservati</span></h5>
  </div>
  <!-- KEYWORDS
Script Functions vs. Methods
-->
  <!-- TAGS
script_functions_vs_methods
-->
</body>
</html>