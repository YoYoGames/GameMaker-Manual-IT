<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Variabili del metodo</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page outlining the use of Method Variables" />
  <meta name="rh-index-keywords" content="Method Variables" />
  <meta name="search-keywords" content="Method Variables,methods,method" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Variabili del metodo</h1>
  <p>Una variabile di metodo è essenzialmente una variabile a cui è stata assegnata una funzione, &quot;legando&quot; la funzione a un'istanza e consentendo di usare la variabile per fare riferimento alla funzione, proprio come si usa il <a href="Runtime_Functions.htm">nome di</a> una <a href="Runtime_Functions.htm">funzione di runtime</a> per fare riferimento a una funzione incorporata in <span class="notranslate">GML</span>. La variabile utilizzata può avere un ambito <em>locale</em>, di <em>istanza</em> o <em>globale</em> (per ulteriori informazioni sull'ambito delle variabili, vedere <a href="Variables_And_Variable_Scope.htm">qui</a> ).</p>
  <p>Vedere anche: <a data-xref="{title}" href="Script_Functions_vs_Methods.htm">Funzioni di script e metodi</a></p>
  <h2>Creazione di metodi</h2>
  <p>La sintassi per la creazione di una variabile di metodo è la seguente:</p>
  <p class="code"><span><span>name = </span>function( parameter1, parameter2, ... )</span><br />
    <span>{</span><br />
    <span>    statement1;</span><br />
    <span>    statement2;</span><br />
    <span>    ...</span><br />
    <span>}</span>
  </p>
  <p>o</p>
  <p class="code"><span>function name( parameter1, parameter2, ... )<br />
      {</span><br />
    <span>    statement1;</span><br />
    <span>    statement2;</span><br />
    <span>    ...</span><br />
    <span>}</span>
  </p>
  <p class="note">Per creare una funzione in <span class="notranslate">GML</span> Visual, utilizzare <a data-xref="{title}" href="../../Drag_And_Drop/Drag_And_Drop_Reference/Common/Declare_A_New_Function.htm">Dichiara una nuova funzione</a>. Attivare l'opzione &quot;Temp&quot; per creare una variabile di metodo (prima sintassi mostrata sopra).</p>
  <p>In generale, tuttavia, si dovrebbe usare la <em>prima </em>forma per i metodi e la seconda per definire le <a href="Script_Functions.htm">funzioni di script</a>, poiché la seconda forma assegnerà anche un indice <span class="notranslate">script</span> al nome della funzione, mentre la prima forma sarà un &quot;vero&quot; metodo (e richiederà l'uso del prefisso <a href="Variables/Global_Variables.htm"><span class="notranslate">global</span></a> se usato per definire una funzione di script).</p>
  <p class="note"><span class="note">NOTA</span> È possibile verificarlo utilizzando entrambi i moduli nel progetto e chiamando la funzione <span class="notranslate">runtime</span> <a href="../GML_Reference/Variable_Functions/typeof.htm">typeof()</a> su ciascuno di essi. Uno sarà classificato come &quot;numero&quot;, poiché restituisce un ID di indice <span class="notranslate">script</span>, mentre l'altro sarà classificato come &quot;metodo&quot;.</p>
  <p>Quindi, tenete presente che, in generale, quando si parla di metodi e variabili di metodo, ci si riferisce sempre a funzioni che <em>non sono </em>state definite con l'indice <span class="notranslate">script</span>. </p>
  <p>Di seguito sono riportati tre semplici esempi di creazione di una variabile di metodo utilizzando diversi ambiti:</p>
  <p class="code">// Local<br />
    var _debug = function(message)<br />
    {<br />
        show_debug_message(message);<br />
    }<br />
    <br />
    // Instance<br />
    do_maths = function(val1, val2, val3)<br />
    {<br />
        return (val1 * val2) - val3;<br />
    }<br />
    <br />
    // Global<br />
    global.pd = function(_x1, _y1, _x2, _y2);<br />
    {<br />
        return point_distance(_x1, _y1, _x2, _y2);<br />
    }
  </p>
  <p>Si noti che nel codice sopra riportato, i vari parametri forniti come input per la funzione sono tutti denominati e questi nomi sono quelli che devono essere utilizzati all'interno della funzione per riferirsi ai diversi input. Si noti anche che è possibile utilizzare l'istruzione <span class="inline"><a href="Language_Features/return.htm">return</a></span> per restituire un valore da una funzione da utilizzare altrove nel codice e che una funzione <em>senza</em> valore di ritorno definito, restituirà <span class="inline">undefined</span>.per impostazione predefinita.</p>
  <p class="note"><span class="note">NOTA</span> Mentre la variabile sarà nell'ambito scelto, la funzione vera e propria sarà legata all'ambito in cui è stata inizialmente definita. Per esempio, le <a href="Script_Functions.htm">funzioni di script</a> sono tutte di ambito globale e &quot;non vincolate&quot; (cioè non sono associate a nessuna istanza), ma se si ha una funzione <span class="notranslate">script</span> che crea un'altra funzione come variabile di metodo al suo interno e poi si chiama questa funzione <span class="notranslate">script</span> da un'istanza, la funzione usata all'interno di <span class="notranslate">script</span> sarà <strong>vincolata alla variabile di istanza come metodo</strong>. In generale, non è necessario pensarci, ma per le operazioni più complesse con le variabili metodo è bene tenerne conto. Questo vale anche per l'utilizzo di altri costrutti, come ad esempio <a href="Language_Features/with.htm"><span class="inline">with</span></a> - quando si crea una variabile metodo all'interno di un with, la funzione sarà legata all'istanza attualmente in scope.</p>
  <p>Una volta creata, la variabile metodo può essere utilizzata come una funzione <span class="notranslate">runtime</span> o una funzione <span class="notranslate">script</span>, ad esempio:</p>
  <p class="code">create_vec = function(_x1, _y1, _x2, _y2);<br />
    {<br />
        var _array;<br />
        _array[0] = point_distance(_x1, _y1, _x2, _y2);<br />
        _array[1] = point_direction(_x1, _y1, _x2, _y2);<br />
        return _array;<br />
    }<br />
    <br />
    vec = create_vec(x, y, mouse_x, mouse_y);
  </p>
  <p>Le variabili create all'interno di una funzione seguiranno le stesse regole normali e saranno classificate in base alla parola chiave utilizzata o all'ambito della chiamata di funzione. Nell'esempio precedente, abbiamo usato <span class="inline">var</span> e quindi la variabile dell'array si trova nell'ambito <em>locale </em>della funzione. Se non avessimo usato la parola chiave, la variabile sarebbe stata creata nello scope dell'istanza che ha chiamato la funzione.</p>
  <p>I metodi, proprio come le funzioni di <span class="notranslate">script</span>, possono anche accettare argomenti opzionali, che hanno valori predefiniti quando non vengono passati:</p>
  <p class="code">create_attachment = function(_attachment, <strong>_x = x</strong>, <strong>_y = y</strong>)<br />
    {<br />
        return instance_create_layer(_x, _y, layer, _attachment);<br />
    }</p>
  <p>La funzione di cui sopra richiede tre argomenti, di cui gli ultimi due sono facoltativi. Se non vengono inseriti quando la funzione viene chiamata, verranno utilizzate le coordinate <span class="inline">x</span> e <span class="inline">y</span> dell'istanza.</p>
  <p>Si noti che se un argomento non viene passato e non ha un valore predefinito, sarà uguale a <span class="inline">undefined</span>.</p>
  <p>I metodi possono anche fare uso di variabili statiche, che mantengono i loro valori durante ogni chiamata di funzione. Per ulteriori informazioni, <a href="Functions/Static_Variables.htm">leggere questa pagina</a>.</p>
  <p>Di seguito vengono elencate alcune funzioni di aiuto associate alle variabili dei metodi:</p>
  <ul class="colour">
    <li><a href="../GML_Reference/Variable_Functions/is_method.htm"><span class="notranslate">is_method</span></a></li>
    <li><a href="../GML_Reference/Variable_Functions/method.htm"><span class="notranslate">method</span></a></li>
    <li><a href="../GML_Reference/Variable_Functions/method_get_self.htm"><span class="notranslate">method_get_self</span></a></li>
    <li><a href="../GML_Reference/Variable_Functions/method_get_index.htm"><span class="notranslate">method_get_index</span></a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Indietro: <a href="GML_Overview.htm">Panoramica del GML</a></div>
        <div style="float:right">Avanti: <a data-xref="{title}" href="Script_Functions_vs_Methods.htm">Funzioni di script vs. metodi</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tutti i diritti riservati</span></h5>
  </div>
  <!-- KEYWORDS
Script Functions
User Defined Functions
-->
  <!-- TAGS
method_variables
-->
</body>
</html>