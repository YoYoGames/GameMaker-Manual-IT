<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Struttura di base del codice</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the basic code structure when using GML" />
  <meta name="rh-index-keywords" content="Code Structure" />
  <meta name="search-keywords" content="Code Structure,begin,end,statement" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Struttura di base del codice</h1>
  <p>Il codice è scritto in <em>blocchi</em> e un tipico blocco di codice consiste in un insieme di istruzioni, chiamate<span class="glossextra">dichiarazioni</span>, che sono poi interpretate da <span data-keyref="GameMaker Name">GameMaker</span> e utilizzate per far accadere qualcosa all'interno del vostro gioco. Quel &quot;qualcosa&quot; può essere semplice come aggiungere 2 e 2 per ottenere 4, o complesso come far scappare un nemico quando la sua salute scende sotto un certo valore. La struttura effettiva del programma può variare notevolmente, a seconda delle funzioni che usa, ma in pratica è così:</p>
  <p class="code">&lt;statement&gt;;<br />
    &lt;statement&gt;;<br />
    ...</p>
  <p>Gli statement dovrebbero essere separati da un simbolo ';' per prevenire errori con le dichiarazioni delle <a class="glossterm" data-glossterm="variabile" href="#">variabili</a> e per mantenere il vostro codice pulito e ordinato, e possono consistere in dichiarazioni di variabili, <a class="glossterm" data-glossterm="espressione" href="#">espressioni</a>e chiamate a <strong>funzioni</strong> specifiche. Potete anche &quot;raggruppare&quot; le dichiarazioni come un blocco usando le parentesi graffe <span class="inline">{}</span> in modo che corrano insieme, come nel seguente esempio <a class="glossterm" data-glossterm="condizionale" href="#">condizionale</a>:</p>
  <p class="code">if (&lt;conditional&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p class="note"><span class="note">NOTA</span> Il <span class="notranslate">GameMaker Language</span> accetterà anche <span class="inline">begin</span><span> </span> e <span class="inline">end</span><span>  </span> invece delle parentesi graffe <span class="inline">{}</span>, sebbene questo non sia tipicamente il modo più comune di farlo:</p>
  <p class="code">if (&lt;conditional&gt;)<br />
    begin<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    end</p>
  <p>Ecco una rappresentazione più visiva di come può apparire un blocco di codice, questa volta creato come uno <b>script</b> nel <span data-keyref="GameMaker Name">GameMaker</span> <a href="../../The_Asset_Editors/Scripts.htm">Script Editor</a>:</p>
  <p><img alt="Program Example" class="center" src="../../assets/Images/Scripting_Reference/GML/Overview/ProgramExample.png" style="cursor: nwse-resize;" /></p>
  <p>Ci sono diversi tipi di dichiarazioni, espressioni, condizionali e funzioni, tutti discussi a lungo nelle sezioni successive del manuale.</p>
  <p class="note"><span class="note">NOTA</span> Se siete nuovi alla programmazione, potreste voler controllare la <a href="../../Quick_Start_Guide/Quick_Start_Guide.htm">Guida rapida</a> prima di continuare.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Indietro: <a href="GML_Overview.htm">Panoramica GML</a></div>
        <div style="float:right">Avanti: <a href="Runtime_Functions.htm">Funzioni di runtime</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tutti i diritti riservati</span></h5>
  </div>
  <!-- KEYWORDS
Basic Code Structure
code structure
code block
statements
statement separator
begin
end
-->
  <!-- TAGS
structure
-->
</body>
</html>