<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>gml_pragma</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for gml_pragma" />
  <meta name="rh-index-keywords" content="gml_pragma" />
  <meta name="search-keywords" content="gml_pragma" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>gml_pragma</h1>
  <p>La funzione <span class="inline">gml_pragma</span> influisce su come il target dato compila il vostro codice e dovrebbe essere chiamata con i diversi comandi per ottimizzare ulteriormente la compilazione finale del vostro progetto. Questi comandi sono effettivamente <i>pre-elaborati</i> prima che il gioco sia compilato e quindi la funzione può essere posizionata ovunque nel vostro progetto e sarà comunque elaborata prima che il gioco sia completamente compilato. I comandi disponibili sono i seguenti:</p>
  <ul class="colour">
    <li>&quot;<b>forceinline</b>&quot; - Quando la funzione viene chiamata con il pragma &quot;forceinline&quot; in una <b>funzione di script</b>, lo YYC compilerà il progetto con la funzione inline, piuttosto che referenziata. Questo darà un'ulteriore spinta all'elaborazione, ma bisogna fare attenzione quando lo si usa perché gonfierà anche la dimensione finale del file eseguibile, specialmente se il codice inline è grande e/o usato in più posti diversi, oltre ad aumentare notevolmente il tempo di compilazione. Si noti che questo pragma è <b>valido solo quando si costruisce usando YYC</b>.</li>
    <li>&quot;<b>global</b>&quot;, &quot;<b>[codice gml]</b>&quot; - Il pragma &quot;global&quot; permette di chiamare del codice <span class="notranslate">GML</span> formattato come <span class="notranslate">string</span>, in uno scope <b>globale</b>, in fase di compilazione, prima che venga eseguito il primo <span class="notranslate">room</span> del gioco. Per esempio:
     <p class="code">gml_pragma(&quot;global&quot;, &quot;Init()&quot;);</p>
      Questo chiamerà la funzione <span class="notranslate">script</span> &quot;Init&quot; prima che venga eseguito il primo <span class="notranslate">room</span> del gioco. Notate che il <span class="notranslate">GML</span> fornito come secondo argomento <b>deve essere una costante a tempo di compilazione</b>, e notate anche che non potete usare questo pragma per creare istanze o eseguire qualsiasi operazione che richieda un <span class="notranslate">room</span> (o qualsiasi cosa in un <span class="notranslate">room</span>) per funzionare.
    </li>
    <li>&quot;<b>PNGCrush</b>&quot; - Il pragma &quot;PNGCrush&quot; userà il programma <a href="https://pmt.sourceforge.io/pngcrush/" target="_blank">PNGCrush</a> su ogni <span class="notranslate">texture</span> creato. Nota che questo può aggiungere significativamente al tempo che ci vuole per compilare il gioco, quindi non lo vuoi sempre attivo, anche se può fare un risparmio significativo sulla dimensione finale del file. Questa opzione si applica solo a <span class="notranslate">Texture</span> Gruppi che usano il formato PNG (vedi <a data-xref="{text}" href="../../../Settings/Texture_Groups.htm#h">Impostazioni gruppo</a>).</li>
    <li>&quot;<b>Texgroup.Scale</b>&quot;, &quot;<b>[TextureGroupName]</b>&quot;, &quot;<b>[Scale Divisor]</b>&quot; - Il &quot;Texgroup.Scale&quot; scalerà il gruppo dato <span class="notranslate">texture</span> alla compilazione. È necessario fornire due argomenti aggiuntivi qui: il &quot;[TexGroupName]&quot;, che è il nome (un <span class="notranslate">string</span>) del gruppo <span class="notranslate">texture</span> da scalare, e il &quot;[Scale Divisor]&quot; (anche questo un <span class="notranslate">string</span>), che è il divisore che si desidera utilizzare per la scalatura, cioè
     <p class="code">gml_pragma(&quot;Texgroup.Scale&quot;, &quot;level1&quot;, &quot;2&quot;);</p>
      Questo dimezzerà tutti i <span class="notranslate">textures</span> nel gruppo &quot;level1&quot; <span class="notranslate">texture</span>.
    </li>
    <li>&quot;<b>UnityBuild</b>&quot;, &quot;<b>[enable/disable]</b>&quot; - Se chiamate la funzione con questo pragma e impostate l'argomento enable/disable su <span class="inline">true</span> allora in fase di compilazione collasserà tutti i file .cpp del progetto in un unico file che poi userà per costruire tutto, per esempio:
     <p class="code">gml_pragma(&quot;UnityBuild&quot;, &quot;true&quot;);</p>
      Il vantaggio di fare una compilazione unificata è che le compilazioni sono più veloci, ma il lato negativo è che fa una compilazione <i>completa</i> ogni volta, quindi anche se cambiate una singola parte del codice, compilerà di nuovo tutto senza usare alcun file nella cache. Questo è stato aggiunto specificamente per l'esportazione di Xbox One utilizzando l'YYC anche se può essere chiamato per altre build<b>(solo YYC</b>). Per ulteriori informazioni sulle build di unity, vedere <a href="http://buffered.io/posts/the-magic-of-unity-builds/" target="_blank">qui</a>.
    </li>
  </ul>
  <p class="note"><b>NOTA</b>: il primo argomento della funzione <span class="inline">gml_pragma</span> <b>deve essere una costante a tempo di compilazione <span class="notranslate">string</span> </b> e non una variabile.</p>
  <p> </p>
  <h4>Sintassi:</h4>
  <p class="code">gml_pragma(command, [optional...]);</p>
  <table>
    <tbody>
      <tr>
        <th>Argomento</th>
        <th>Tipo</th>
        <th>Descrizione</th>
      </tr>
      <tr>
        <td><span class="notranslate">command</span></td>
        <td><span data-keyref="Type_String"><a data-rhwidget="HyperlinkPopover" href="../../../../GameMaker_Language/GML_Overview/Data_Types.htm">Stringa</a></span></td>
        <td><span class="notranslate">A string with one of the commands listed above.</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">[optional]</span></td>
        <td><span data-keyref="Type_String"><a data-rhwidget="HyperlinkPopover" href="../../../../GameMaker_Language/GML_Overview/Data_Types.htm">Stringa</a></span></td>
        <td><span class="notranslate">Some of the available commands require an optional argument or arguments. These are explained above for each command.</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Ritorna:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Esempio:</h4>
  <p class="code">gml_pragma(&quot;forceinline&quot;);</p>
  <p>Il codice dell'esempio precedente forzerà la funzione <span class="notranslate">script</span> in cui è usata ad essere in-linea durante la compilazione.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Indietro: <a href="OS_And_Compiler.htm">Sistema operativo e compilatore</a></div>
        <div style="float:right">Il prossimo: <a href="parameter_count.htm"><span class="notranslate">parameter_count</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tutti i diritti riservati</span></h5>
  </div>
  <!-- KEYWORDS
gml_pragma
-->
  <!-- TAGS
gml_pragma
-->
</body>
</html>