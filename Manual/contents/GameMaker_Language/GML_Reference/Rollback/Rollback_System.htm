<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>Sistema Rollback</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../../assets/css/default.css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Details for Rollback Multiplayer" />
  <meta name="template" content="../../../assets/masterpages/Manual_Page.htt" />
  <meta name="condition-tags" content="Export:Beta" />
</head>
<body>
  <h1>Sistema Rollback</h1>
  <p>Dopo aver seguito l'esercitazione <a data-xref="{title}" href="Creating_Multiplayer.htm">Creare una partita multigiocatore</a>, potreste avere delle domande sul funzionamento del sistema di rollback. Questa pagina ha lo scopo di approfondire l'argomento.</p>
  <h2>Che cos'è il Rollback?</h2>
  <p>È facile che si verifichi un ritardo quando si gioca online. Se state giocando con qualcuno a distanza, potrebbe essere necessaria una frazione di secondo perché i suoi input vi raggiungano, ma anche questo può essere sufficiente a rovinare la vostra esperienza di gioco.</p>
  <p>Rollback utilizza le previsioni per ridurre l'effetto del ritardo. In base agli input precedenti, prevede cosa farà l'altro utente e mostra il risultato di tale previsione, che è istantaneo.</p>
  <p>Quando la previsione è corretta, non si verificano lag e il gioco risulta molto più reattivo.</p>
  <p>Tuttavia, a volte il sistema si rende conto che la sua previsione era sbagliata. In questo caso, <em>torna indietro</em> all'ultimo stato corretto e continua la partita da quel punto. Per questo si chiama &quot;<strong>Rollback multiplayer</strong>&quot;.</p>
  <h3>Determinismo</h3>
  <p>Il Rollback è deterministico. Condivide gli input solo con altri giocatori e si aspetta che tutti eseguano la stessa logica sull'input dato, dando gli stessi risultati su tutti i client.</p>
  <p>Un approccio diverso al multiplayer è la &quot;replica dello stato&quot;, che sincronizza continuamente lo stato del gioco tra i client, assicurando che stiano facendo sempre la stessa cosa.</p>
  <p>Rollback non fa questo: invia sempre e solo gli input, ma tiene anche d'occhio lo stato in modo da poter tornare indietro in caso di previsione errata.</p>
  <p class="note"><em><strong>Che cos'è un cliente?</strong></em><br>
    <br>
    Un &quot;client&quot; è un giocatore del gioco e si riferisce alla sua copia del gioco, in esecuzione sulla sua macchina.
  </p>
  <h2>Come funziona?</h2>
  <p>Come già detto, il Rollback <strong>comunica solo input</strong> tra giocatori.</p>
  <p>Ci sono due cose principali che Rollback gestisce:</p>
  <ul class="colour">
    <li><strong>Input</strong>: Gli <a href="Rollback_Functions/rollback_define_input.htm">input</a> di ciascun giocatore vengono inviati agli altri giocatori. Se il giocatore 0 preme <strong>&quot;fuoco&quot;</strong> nel proprio client, Rollback farà in modo che anche gli altri client vedano il giocatore 0 premere <strong>&quot;fuoco&quot;.</strong><br>
      <br>
     <strong>Le previsioni vengono eseguite solo su input.</strong>
    </li>
    <li><strong>Stato</strong>: Include tutti i siti <span class="notranslate">objects</span> gestiti e le loro variabili. Queste NON sono sincronizzate tra i giocatori: la modifica di una variabile in un client non la aggiornerà automaticamente in un altro client.<br>
      <br>
     <strong>Lo stato è gestito solo per poter essere ripristinato.</strong>
    </li>
  </ul>
  <h2>Quindi... qual è la differenza?</h2>
  <p>L'<strong>input</strong> cambia <strong>lo stato</strong>, che è il concetto di base del multiplayer Rollback.</p>
  <p>Ecco un esempio:</p>
  <ul class="colour">
    <li><strong>Ingresso</strong>: Il giocatore 0 preme <strong>&quot;fuoco&quot;.</strong></li>
    <li><strong>Stato</strong>: Poiché il Giocatore 0 ha premuto il fuoco, viene creato un proiettile. Questo proiettile alla fine si scontra con una roccia. In questo modo il Giocatore 0 ottiene un punto.<br>
      <br>
      Questo è essenzialmente l'intero gioco, che dipende interamente dagli input.
    </li>
  </ul>
  <p>&quot;<strong>Input</strong>&quot; è ciò che Rollback comunica tra tutti i giocatori, non lo stato.</p>
  <p>Tuttavia, poiché tutti i client di gioco eseguono la stessa logica sull'input ricevuto (il che è un requisito), <strong>tutti risultano nello stesso stato</strong>.</p>
  <p><img class="center" height="521" src="../../../assets/Images/Scripting_Reference/GML/Reference/Rollback/multiplayer_input_sync_explained.png" width="1096" /></p>
  <h2>Che cos'è allora lo Stato?</h2>
  <p>Se solo l'ingresso è sincronizzato, a cosa serve lo <strong>stato</strong>?</p>
  <p>Poiché l'input influisce sullo stato, una previsione errata dell'input può portare a uno <strong>stato errato</strong>.</p>
  <p>Quando il rollback scopre che una previsione era sbagliata, sostituisce lo stato corrente con quello corretto ed esegue nuovamente gli input e le previsioni da quel punto. Questo include tutti i <span class="notranslate">objects</span> gestiti e le loro variabili.</p>
  <p>Questo non significa che Rollback sincronizzi <span class="notranslate">objects</span> e le variabili tra i client. Solo perché la <span class="inline2">variabile_a</span> è impostata su <span class="inline2">&quot;Gurpreet&quot;</span> in un client, non significa che anche gli altri client vedranno lo stesso valore.</p>
  <p>Vedrebbero lo stesso valore per una variabile solo se derivasse da un input del giocatore o da qualche altro sistema gestito, come gli allarmi e le funzioni casuali.</p>
  <h2 id="h2">Oggetti gestiti</h2>
  <p>Gli oggetti hanno una casella di controllo &quot;<strong>Gestito</strong>&quot;, che è abilitata per impostazione predefinita per i nuovi <span class="notranslate">objects</span>:</p>
  <p><img>Gli oggetti contrassegnati come gestiti hanno la possibilità di essere annullati e di far eseguire le previsioni su di essi, comprese tutte le loro variabili, la creazione e la distruzione.</p>
  <p>Tutti i <span class="notranslate">objects</span> che fanno parte del gioco, come il giocatore, il manager/controller <span class="notranslate">objects</span>, i pickup degli oggetti, i proiettili, ecc. devono essere contrassegnati come gestiti.</p>
  <p>Si può disattivare per <span class="notranslate">objects</span> che non deve essere sincronizzato tra i giocatori, come il mondo statico <span class="notranslate">objects</span>, le immagini, gli effetti, ecc. che non influiscono in alcun modo sul gioco.</p>
  <p>Si noti che la proprietà managed di un genitore non viene applicata automaticamente ai suoi figli, pertanto ogni figlio <span class="notranslate">object</span> deve avere la sua casella di controllo managed impostata manualmente.</p>
  <h2 id="h">Test di sincronizzazione</h2>
  <p><span class="inline"><a href="Rollback_Functions/rollback_create_game.htm">rollback_create_game()</a></span> accetta un argomento per il test di sincronizzazione, che è abilitato per impostazione predefinita (quando l'argomento non è specificato).</p>
  <p>Sync Test è utilizzato per testare il gioco offline. Se si verificano problemi di sincronizzazione, l'utente viene informato stampando l'errore nel Registro di uscita. È possibile utilizzare Sync Test su <span class="notranslate">Windows</span>, macOS e Opera GX.</p>
  <p>Sync Test esegue tutto il codice del gioco due volte in un frame, in modo da verificare eventuali problemi di sincronizzazione. Ciò significa che durante i test offline potrebbero verificarsi due volte alcuni eventi che non si verificheranno quando il gioco è in esecuzione online.</p>
  <h3>Ingresso casuale e simulato</h3>
  <p>Durante il test di sincronizzazione, le istanze di giocatori &quot;remoti&quot; ricevono valori di input casuali per i loro <a href="Defining_Inputs.htm">ingressi definiti</a>, come semplice forma di test. È possibile disabilitare questa funzione utilizzando <span class="inline"><a href="Rollback_Functions/rollback_use_random_input.htm">rollback_use_random_input()</a></span>.</p>
  <p><video class="center" src="../../../assets/Images/Scripting_Reference/GML/Reference/Rollback/rollback_two_players_synctest.mp4" width="856" height="420" controls="" align="center"></video></p>
  <p class="video_subtitle">Il secondo giocatore riceve un input casuale durante il test di sincronizzazione.</p>
  <p>È anche possibile assegnare un ingresso di simulazione temporaneo ai lettori remoti quando si è in Sync Test. Per maggiori dettagli, vedere <a data-xref="{text}" href="Defining_Inputs.htm#h1">Ingresso finto</a>.</p>
  <h2>Sviluppare il multiplayer in modo efficace</h2>
  <p>È necessario assicurarsi che tutti i client di gioco eseguano la <strong>stessa logica</strong> quando ricevono lo <strong>stesso input</strong>. Se una particolare istanza è stata creata o spostata solo per un client, non si rifletterà sugli altri client.</p>
  <p>Questo problema di solito non si verifica se si programma il gioco come mostrato in <a data-xref="{title}" href="Creating_Multiplayer.htm">Creare un gioco multigiocatore</a>, con tutta la logica del giocatore che viene eseguita allo stesso modo per tutte le istanze del giocatore, indipendentemente dal fatto che un'istanza sia <a href="Rollback_Variables/player_local.htm">locale o meno</a>. Tuttavia, se si implementa una condizione per fare qualcosa solo per un particolare giocatore e non per gli altri, questo causerà un'interruzione dello stato di gioco.</p>
  <h2 id="h1">Definire un oggetto giocatore</h2>
  <h3>Creazione automatica di istanze giocatore</h3>
  <p>Come mostrato in <a data-xref="{title}" href="Creating_Multiplayer.htm">Creare una partita multigiocatore</a>, è possibile definire un giocatore <span class="notranslate">object</span> con <span class="inline"><a href="Rollback_Functions/rollback_define_player.htm">rollback_define_player()</a></span> / <a data-xref="{title}" href="../../../Drag_And_Drop/Drag_And_Drop_Reference/Rollback/Define_Player.htm">Definisci giocatore (Rollback)</a> e il sistema creerà automaticamente istanze di questo giocatore per ogni giocatore connesso. Distruggerà anche le istanze dei giocatori che si disconnettono.</p>
  <p>Le istanze di giocatore create in questo modo hanno il loro ID assegnato automaticamente, nella variabile <span class="inline"><a data-xref="{title}" href="Rollback_Variables/player_id.htm">player_id</a></span>. All'interno di ogni istanza di giocatore, si può semplicemente chiamare <a href="Rollback_Functions/rollback_get_input.htm"><span class="inline">rollback_get_input()</span></a> senza alcun argomento e si otterranno gli input per quel particolare giocatore.</p>
  <p>Questo è il modo standard di utilizzare il sistema di Rollback, ma è anche possibile gestire manualmente le istanze dei giocatori e i loro input.</p>
  <h3>Creazione manuale di istanze giocatore</h3>
  <p>Per gestire manualmente le istanze dei giocatori, non chiamare <span class="inline"><a href="Rollback_Functions/rollback_define_player.htm">rollback_define_player()</a></span>. Questo causerà l'avvio del gioco senza la creazione di alcuna istanza giocatore.</p>
  <p>Quindi creare manualmente le istanze dei giocatori, idealmente nell'evento <a data-xref="{text}" href="Rollback_Events.htm#h">Rollback Start</a>, e assegnare loro gli ID dei giocatori in una variabile personalizzata. Per ottenere l'input di un giocatore, chiamare <a href="Rollback_Functions/rollback_get_input.htm"><span class="inline">rollback_get_input()</span></a> e specificare l'ID del giocatore come argomento. Chiamare <a href="Rollback_Functions/rollback_get_info.htm"><span class="inline">rollback_get_info()</span></a> per ottenere quelle <a href="Rollback_Variables/Rollback_Variables.htm">variabili</a> in <span class="notranslate">struct</span> che altrimenti verrebbero assegnate automaticamente ai giocatori.</p>
  <p>In questo modo è possibile gestire manualmente quando e come vengono create le istanze dei giocatori, gli ID assegnati e il recupero degli input per un giocatore specifico.</p>
  <h3>Mantenere in vita le istanze dei giocatori</h3>
  <p>Se si utilizza <span class="inline"><a href="Rollback_Functions/rollback_define_player.htm">rollback_define_player()</a></span> / <a data-xref="{title}" href="../../../Drag_And_Drop/Drag_And_Drop_Reference/Rollback/Define_Player.htm">Define Player (Rollback)</a>, non distruggere le istanze di giocatore create. Se è necessario mostrare un giocatore come sconfitto, cambiare il suo <span class="notranslate">sprite</span>, o nasconderlo usando qualche altro metodo, ma mantenere l'istanza in vita, poiché è gestita da <span class="notranslate">GameMaker</span>.</p>
  <h2>Giocatore singolo</h2>
  <p>Il sistema Rollback può essere utilizzato per creare una partita a giocatore singolo. Basta specificare <strong>1</strong> come numero di giocatori quando si chiama <span class="inline"><a href="Rollback_Functions/rollback_create_game.htm">rollback_create_game()</a></span>.</p>
  <p>In questo modo il sistema non si connetterà mai a <span class="notranslate">servers</span> e il gioco sarà essenzialmente offline, con la possibilità di essere ampliato in un gioco multiplayer online ogni volta che lo si desidera.</p>
  <p>Seguite questo approccio quando state realizzando un nuovo progetto che potrebbe utilizzare il multiplayer in futuro, poiché sarà più difficile implementare il multiplayer nel gioco una volta completato senza utilizzare il sistema di rollback.</p>
  <h2 id="h4">Avvio manuale o automatico</h2>
  <p>Per impostazione predefinita, una partita multigiocatore inizia non appena tutti i giocatori si sono uniti. Tuttavia, è possibile avviarla prima di quel momento, chiamando il comando <a href="Rollback_Functions/rollback_start_game.htm"><span class="inline">rollback_start_game()</span></a>.</p>
  <p>È possibile disabilitare completamente il comportamento di avvio automatico chiamando <a href="Rollback_Functions/rollback_use_manual_start.htm"><span class="inline">rollback_use_manual_start()</span></a>. Ciò significa che il gioco aspetterà che l'utente lo avvii manualmente.</p>
  <p>L'avvio automatico viene disattivato automaticamente quando si <a href="Rollback_Functions/rollback_use_player_prefs.htm">attivano</a> le preferenze del giocatore.</p>
  <p><span></span></p>
  <h2>Ulteriori letture</h2>
  <p>Per ulteriori informazioni sul sistema Rollback, leggere le pagine seguenti:</p>
  <ul class="colour">
    <li><a data-xref="{title}" href="Defining_Inputs.htm">Definizione degli ingressi</a></li>
    <li><a data-xref="{title}" href="Rollback_Constraints.htm">Vincoli di rollback</a></li>
    <li><a data-xref="{title}" href="Rollback_Events.htm">Eventi di rollback</a></li>
    <li><a data-xref="{title}" href="Rollback_Preferences.htm">Preferenze del giocatore</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Indietro: <a data-xref="{title}" href="Rollback_Multiplayer.htm">Rollback Multiplayer</a></div>
        <div>Avanti: <a data-xref="{title}" href="Defining_Inputs.htm">Definizione degli ingressi</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tutti i diritti riservati</span></h5>
  </div>
</body>
</html>