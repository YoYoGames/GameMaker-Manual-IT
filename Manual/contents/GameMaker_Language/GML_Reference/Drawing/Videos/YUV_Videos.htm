<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>Video YUV</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../../../assets/css/default.css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Information on drawing YUV videos" />
  <meta name="template" content="../../../../assets/masterpages/Manual_Page.htt" />
  <meta name="rh-index-keywords" content="yuv videos" />
  <meta name="search-keywords" content="yuv videos" />
  <meta name="condition-tags" content="" />
</head>
<body>
  <h1>Video YUV</h1>
  <p>Le piattaforme che utilizzano il formato di colore YUV per i video richiedono passaggi aggiuntivi per disegnarli. Ciò comporta l'uso di <span class="notranslate">shader</span> per disegnare due superfici su un quad primitivo.</p>
  <p>Leggete prima la pagina di riferimento <span class="inline"><a href="video_draw.htm">video_draw()</a></span> per informazioni sui dati restituiti dalla funzione per i video YUV, quindi continuate a leggere di seguito per le istruzioni sull'uso di tali dati per disegnare il video.</p>
  <h2>Shader YUV</h2>
  <p>Creare un <span class="notranslate">shader</span> <span class="notranslate">asset</span> nel progetto e sostituire il codice del frammento <span class="notranslate">Shader</span> (<span class="inline2">.fsh</span>) con questo:</p>
  <pre>//
// frammento PERSONALIZZATO <span class="notranslate">shader</span> per la gestione dei contenuti YUV
//
vec2 variabile v_vTexcoord;
variabile vec4 v_vColour;
sampler2D uniforme v_chroma;
const float x = 1,164383;
const float y = 1,138393;
const float z = 1,138393;
const vec3 src_bias = vec3(16.0 / 255.0, 128.0 / 255.0, 128.0 / 255.0);
const mat3 src_xform = mat3(1.00000000 * x, 0.00000000 * y, 1.57480000 * z,
                            1,00000000 * x, -0,18732427 * y, -0,46812427 * z,
			    1,00000000 * x, 1,85560000 * y, 0,00000000 * z);
void main()
{
    float yy = texture2D(gm_BaseTexture, vec2(v_vTexcoord.x, v_vTexcoord.y)).r;
    vec2 cbcr = texture2D(v_chroma, vec2(v_vTexcoord.x, v_vTexcoord.y)).rg;
    vec3 yuv = vec3(yy, cbcr);
    yuv -= src_bias;
    yuv *= src_xform;
    gl_FragColor = vec4(yuv, 1.0);
}
  
</pre>
  <h2>Prendi il campionario</h2>
  <p>Nell'evento Create di <span class="notranslate">object</span>, ottenere l'ID del campionatore dell'uniforme <span class="inline2">v_chroma</span> <span class="notranslate">shader</span>, solo se il video è YUV:</p>
  <pre>var _format = video_get_format();
if (_format == video_format_yuv)
{
    videochromasampler = shader_get_sampler_index(shader_YUV, &quot;v_chroma&quot;);
}
</pre>
  <h2 id="h">Disegnare video</h2>
  <p>Nell'evento Draw del vostro <span class="notranslate">object</span>, chiamate <span class="inline"><a href="video_draw.htm">video_draw()</a></span> e se la prima posizione dell'array è <strong>0</strong> (cioè il video è in riproduzione), disegnate il video.</p>
  <p>Nel codice qui sotto, utilizziamo una dichiarazione <span class="notranslate">switch</span> sulla funzione <span class="inline"><a href="video_get_format.htm">video_get_format()</a></span>. Se il video utilizza il formato RGBA, disegna semplicemente la superficie nella posizione <span class="inline2">[1]</span> dell'array.</p>
  <p>Se il video utilizza il formato YUV, utilizza <span class="notranslate">shader</span> per disegnare le due superfici (nelle posizioni <span class="inline2">[1]</span> e <span class="inline2">[2]</span>) su una primitiva quad.</p>
  <pre>var _data = video_draw();
if(_data[0] == 0)
{
	switch(video_get_format())
	{
		caso video_formato_rgba:
			var _surf = _data[1];
			draw_surface(_surf,0,0);
		break;
	
		// #### PARTE YUV QUI ####
		caso video_formato_yuv:
			var _surf = _data[1];
			var _chromasurf = _data[2];
			if(surface_exists(_surf) e surface_exists(_chromasurf))
			{
				shader_set(shader_YUV);
			
				var _tex_id = surface_get_texture(_surf);
				var _chroma_tex_id = surface_get_texture(_chromasurf);
				texture_set_stage(videochromasampler, _chroma_tex_id);
				gpu_set_texfilter(false);
			
				draw_primitive_begin_texture(pr_trianglestrip, _tex_id);
			        draw_vertex_texture(0, 0, 0, 0);
				draw_vertex_texture(surface_get_width(_chromasurf), 0, 1, 0);
				draw_vertex_texture(0, surface_get_height(_chromasurf), 0, 1);
				draw_vertex_texture(surface_get_width(_chromasurf), surface_get_height(_chromasurf), 1, 1);
				draw_primitive_end();
			
				gpu_set_texfilter(true);
				shader_reset();
			}
		break;
	}
}
  </pre>
  <p>Il codice sotto il <span class="inline2">caso video_format_yuv:</span> fa quanto segue:</p>
  <ul class="colour">
    <li>Ottiene la superficie video<span class="inline2">(_surf</span>) e la superficie chroma<span class="inline2">(_chromasurf</span>)</li>
    <li>Si assicura che esistano, usando <span class="inline"><a href="../Surfaces/surface_exists.htm">surface_exist()</a></span>
      <ul>
        <li>Imposta <span class="notranslate">shader</span> su <span class="inline2">shader_YUV</span> (che è il nostro YUV <span class="notranslate">shader</span> appena creato).</li>
        <li>Ottiene il <span class="notranslate">textures</span> di entrambe le superfici</li>
        <li>Assegna il <span class="notranslate">texture</span> della superficie chroma al campionatore che abbiamo recuperato nell'evento Create</li>
        <li>Disabilita il filtraggio di <span class="notranslate">texture</span> </li>
        <li>Inizia a disegnare una primitiva a striscia triangolare, a cui viene assegnato il <span class="notranslate">texture</span> della superficie video</li>
        <li>Disegna un rettangolo per coprire la superficie video e utilizza la larghezza e l'altezza della superficie chroma per il rettangolo</li>
        <li>Termina la primitiva</li>
        <li>Riabilita il filtro <span class="notranslate">texture</span> e resetta lo shader</li>
      </ul>
    </li>
  </ul>
  <p>In questo caso, la superficie video principale viene disegnata dalla primitiva e la superficie chroma vi viene miscelata da <span class="notranslate">shader</span>. Questo è il motivo per cui <span class="notranslate">texture</span> della superficie chroma è stato passato a <span class="notranslate">shader</span> tramite un campionatore.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Indietro: <a data-xref="{text}" href="Videos.htm#h1">Riproduzione video</a></div>
        <div>Avanti: <a data-xref="{title}" href="video_set_volume.htm">video_set_volume</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tutti i diritti riservati</span></h5>
  </div>
  <!-- KEYWORDS
YUV	Videos
-->
  <!-- TAGS
-->
</body>
</html>