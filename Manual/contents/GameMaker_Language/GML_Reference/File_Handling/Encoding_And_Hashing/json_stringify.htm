<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>json_stringify</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for json_stringify" />
  <meta name="rh-index-keywords" content="json_stringify" />
  <meta name="search-keywords" content="json_stringify" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>json_stringify</h1>
  <p>Con questa funzione potete convertire singoli o annidati <span class="notranslate">structs</span> e array in un valido JSON <span class="notranslate">string</span>. Voi fornite il valore iniziale da usare (un indice di array o un riferimento a <span class="notranslate">struct</span> ) e poi la funzione lo &quot;stringerà&quot;, convertendolo in una stringa JSON (convertendo gli array <span class="notranslate">GameMaker</span> in array JSON, e <span class="notranslate">GameMaker</span> <span class="notranslate">structs</span> in JSON <span class="notranslate">objects</span>).</p>
  <p>Quando si usa questa funzione ci sono alcune cose importanti da notare:</p>
  <ul class="colour">
    <li>La funzione <em>non </em> convertirà le mappe DS, le liste o qualsiasi altra struttura di dati in JSON, e memorizzerà semplicemente il valore dell'indice interno per la struttura (che è di scarsa utilità in quanto l'indice cambierà tra le esecuzioni del gioco), e come tale non si dovrebbe cercare di stringere qualsiasi valore che possa contenere riferimenti a strutture di dati (per quello si ha <a href="json_encode.htm"><span class="inline">json_encode()</span></a>).</li>
    <li>La funzione convertirà praticamente qualsiasi valore in un &quot;valido&quot; JSON <span class="notranslate">string</span>, tuttavia i valori effettivi contenuti in <span class="notranslate">string</span> potrebbero non essere esattamente quelli che vi aspettate a causa del modo in cui opera lo standard JSON:<br>
      <br>
      &quot;JSON è agnostico riguardo ai numeri. In qualsiasi linguaggio di programmazione, ci può essere una varietà di tipi di numeri di varie capacità e complementi, fissi o fluttuanti, binari o decimali. Questo può rendere difficile l'interscambio tra diversi linguaggi di programmazione. JSON invece offre solo la rappresentazione dei numeri che gli umani usano: un <span class="notranslate">sequence</span> di cifre. Tutti i linguaggi di programmazione sanno come dare un senso alle cifre <span class="notranslate">sequences</span> anche se non sono d'accordo sulle rappresentazioni interne&quot;.<br>
      <br>
      Per maggiori informazioni vedere lo <a href="http://www.ecma-international.org/publications/standards/Ecma-404.htm">standard ECMA JSON</a>.
    </li>
    <li>Se includete un int64 nei valori da convertire in JSON lo scriverà come un <i>int</i> se è nell'intervallo valido per un int32, come un <i>doppio</i> se può farlo senza perdere precisione o (se nessuno di questi casi è applicabile) come una <i>stringa</i> con un identificatore &quot;<span class="inline">@i64@</span>&quot; prima e &quot;<span class="inline">$i64$</span>&quot; dopo. Quando verrai ad analizzare nuovamente il JSON, <span data-keyref="GameMaker Name">GameMaker</span> raccoglierà questi identificatori e riconvertirà il valore in un int64. Questo significa che se il JSON è destinato a <span class="notranslate">server</span> o a qualche altro target non-GameMaker, questi valori non saranno appropriati e quindi dovrebbero essere evitati.</li>
    <li>Se includi <span class="inline">infinity</span>, <span class="inline">-infinity</span> o <span class="inline">NaN</span> nei valori da convertire in JSON, saranno codificati come <span class="notranslate">strings</span> poiché questi valori non fanno parte dello standard JSON, e nel parsing del JSON risultante <strong>non </strong>saranno riconvertiti nei loro valori <span class="notranslate">runtime</span> e rimarranno come <span class="notranslate">strings</span>. Si noti che <span class="inline">NaN</span> sarà convertito in &quot;nan&quot; (minuscolo) durante la stringificazione.</li>
    <li>Bisogna fare attenzione quando si scrive qualsiasi stringa JSON restituita in un file <span class="inline">ini</span>, poiché le specifiche di <span class="inline">ini</span> possono causare problemi quando si usano le virgolette e i caratteri di escape. Vedere la funzione <a href="../Ini_Files/ini_write_string.htm"><span class="inline">ini_write_string()</span></a> per maggiori informazioni.</li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <h4>Sintassi:</h4>
  <p class="code">json_stringify(val)</p>
  <table>
    <tbody>
      <tr>
        <th>Argomento</th>
        <th>Tipo</th>
        <th>Descrizione</th>
      </tr>
      <tr>
        <td><span class="notranslate">val</span></td>
        <td><span data-keyref="Type_Struct">Struttura</span> o <span data-keyref="Type_Array">matrice</span></td>
        <td><span class="notranslate">The reference value for a struct or array to convert into a JSON string</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Ritorna:</h4>
  <p class="code"><span data-keyref="Type_String">String</span></p>
  <p> </p>
  <h4>Esempio:</h4>
  <p class="code">var _contents =<br />
    {<br />
        version : &quot;1.0.0&quot;,<br />
        data:<br />
        {<br />
            coins : 4,<br />
            mana : 15,<br />
            playername : &quot;Gurpreet&quot;,<br />
            items :<br />
            [<br />
                ITEM.SWORD,<br />
                ITEM.BOW,<br />
                ITEM.GUITAR<br />
            ]<br />
        }<br />
    };<br />
    <br />
    var _json_string = json_stringify(_contents);
  </p>
  <p>Il codice di cui sopra convertirà il <span class="inline2">_contents</span> <span class="notranslate">struct</span> in un JSON <span class="notranslate">string</span> e memorizzerà il <span class="notranslate">string</span> in una variabile. Il <span class="notranslate">string</span> restituito assomiglierebbe a questo:</p>
  <p class="code">{ &quot;data&quot;: { &quot;items&quot;: [ 0.0, 1.0, 2.0 ], &quot;coins&quot;: 4.0, &quot;mana&quot;: 15.0, &quot;playername&quot;: &quot;Gurpreet&quot; }, &quot;version&quot;: &quot;1.0.0&quot; }</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Indietro: <a href="Encoding_And_Hashing.htm">Codifica dei file</a></div>
        <div style="float:right">Il prossimo: <a href="json_parse.htm"><span class="notranslate">json_parse</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tutti i diritti riservati</span></h5>
  </div>
  <!-- KEYWORDS
json_stringify
-->
  <!-- TAGS
json_stringify
-->
</body>
</html>