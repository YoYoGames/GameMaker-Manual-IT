<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>json_parse</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for json_parse" />
  <meta name="rh-index-keywords" content="json_parse" />
  <meta name="search-keywords" content="json_parse" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>json_parse</h1>
  <p>Questa funzione può essere usata per analizzare un JSON <span class="notranslate">string</span> (sia precedentemente creato usando <a href="json_stringify.htm"><span class="notranslate">json_stringify</span></a> o da qualsiasi fonte valida), e convertirlo in una collezione di array o <span class="notranslate">structs</span>, dove un array è l'equivalente di un array JSON e un <span class="notranslate">struct</span> è l'equivalente di un JSON <span class="notranslate">object</span>. Voi fornite il <span class="notranslate">string</span> da analizzare, e la funzione restituirà l'array di primo livello o <span class="notranslate">struct</span> che può essere usato nel vostro codice. Se non siete sicuri del contenuto del JSON, potete usare le diverse <a href="../../Variable_Functions/Variable_Functions.htm">funzioni variabili</a> (come <a href="../../Variable_Functions/typeof.htm"><span class="inline">typeof()</span></a> e <a href="../../Variable_Functions/variable_struct_get_names.htm"><span class="inline">variable_struct_get_names()</span></a> nel caso di un <span class="notranslate">struct</span>) per controllare il contenuto restituito. Si noti che il tentativo di analizzare un valore non valido (cioè: non un <span class="notranslate">string</span>) genererà un errore di eccezione.</p>
  <p>Quando si usa questa funzione ci sono alcune cose importanti da notare:</p>
  <ul class="colour">
    <li>Se il JSON fornito <span class="notranslate">string</span> include <span class="inline">undefined</span> come valore per qualsiasi proprietà, sarà convertito in <span class="inline">pointer_null</span> al momento dell'analisi.</li>
    <li>Questa funzione permette solo di caricare file JSON con un limite massimo di nidificazione di 128.</li>
  </ul>
  <p> </p>
  <h4>Sintassi:</h4>
  <p class="code">json_parse(json)</p>
  <table>
    <tbody>
      <tr>
        <th>Argomento</th><th>Tipo</th>
        <th>Descrizione</th>
     </tr>
      <tr>
        <td><span class="notranslate">json</span></td><td><span data-keyref="Type_String"></span></td>
        <td><span class="notranslate">The JSON string to parse</span></td>
     </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Ritorna:</h4>
  <p class="code"><span data-keyref="Type_Struct">Struct</span> or <span data-keyref="Type_Array">Array</span></p>
  <p> </p>
  <h4>Esempio:</h4>
  <p class="code">json = &quot;{\&quot;myObj\&quot;: { \&quot;apples\&quot;:10, \&quot;oranges\&quot;:12, \&quot;potatoes\&quot;:100000, \&quot;avocados\&quot;:0 }, \&quot;myArray\&quot;:[0, 1, 2, 2, 4, 0, 1, 5, 1]}&quot;;<br />
    <br />
    var data = json_parse(json);<br />
    show_debug_message(data);
  </p>
  <p>Il codice qui sopra crea un nuovo <span class="notranslate">string</span> contenente un valido JSON <span class="notranslate">object</span>, e poi chiama <span class="inline">json_parse()</span> per convertire quel <span class="notranslate">string</span> in un <span class="notranslate">GML</span> <span class="notranslate">struct</span>. Poi stampa il risultato nel log di debug.</p>
  <p class="note"><span class="note">NOTA</span> Noterete che il JSON <span class="notranslate">string</span> contiene un backslash<span class="inline2">(\</span>) prima di ogni doppio apice (<span class="inline2">&quot;</span>) al suo interno:<br>
    <br>
   <span class="inline2">json = &quot;{ \ <strong>&quot; </strong></span>myObj<br>
    <br>
    Questo per assicurarsi che le doppie virgolette siano lette come un vero carattere all'interno di <span class="notranslate">string</span>, invece di essere lette come parte del codice e chiudere prematuramente <span class="notranslate">string</span>. In questo modo stiamo usando un backslash per &quot;sfuggire&quot; alle doppie virgolette.<br>
    <br>
    Se stai caricando JSON da un file esterno, tuttavia, non c'è bisogno di sfuggire ai caratteri in quel file e farlo potrebbe causare errori durante l'analisi.
  </p>
  <hr />
  <p>Dopo aver analizzato il JSON <span class="notranslate">string</span> sopra, se conoscete la sua struttura, potete usare varie <a href="../../Variable_Functions/Variable_Functions.htm">Variable Functions</a> per controllare e leggere il suo contenuto:</p>
  <p class="code">data = json_parse(json);<br />
    <br />
    // Check if the struct has myObj variable<br />
    if (variable_struct_exists(data, &quot;myObj&quot;)) <br />
    {<br />
        // Check if it&#39;s a struct<br />
        if (is_struct(data.myObj)) <br />
        {<br />
            // Print all struct members to the log<br />
            var _names = variable_struct_get_names(data.myObj);<br />
            var _str = &quot;&quot;;<br />
            for (var i = 0; i &lt; array_length(_names); i++;)<br />
            {<br />
                _str = _names[i] + &quot;: &quot; + string(variable_struct_get(data.myObj, _names[i]));<br />
                show_debug_message(_str);<br />
            }<br />
        }<br />
    }<br />
    <br />
    // Check if the struct has myArray variable<br />
    if (variable_struct_exists(data, &quot;myArray&quot;)) <br />
    {<br />
        // Check if it&#39;s an array<br />
        if (is_array(data.myArray)) <br />
        {<br />
            show_debug_message(data.myArray);<br />
        }<br />
    }
  </p>
  <p>Il codice di cui sopra analizzerà il dato JSON <span class="notranslate">string</span>, generando il seguente output della console:</p>
  <p class="code">oranges: 12<br />
    potatoes: 100000<br />
    avocados: 0<br />
    apples: 10<br />
    [ 0,1,2,2,4,0,1,5,1 ]</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Indietro: <a href="Encoding_And_Hashing.htm">Codifica dei file</a></div>
        <div style="float:right">Il prossimo: <a href="base64_encode.htm"><span class="notranslate">base64_encode</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tutti i diritti riservati</span></h5>
  </div>
  <!-- KEYWORDS
json_parse
-->
  <!-- TAGS
json_parse
-->
</body>
</html>