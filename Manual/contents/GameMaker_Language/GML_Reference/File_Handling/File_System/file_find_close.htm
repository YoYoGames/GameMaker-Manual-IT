<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>file_find_close</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for file_find_close" />
  <meta name="rh-index-keywords" content="file_find_close" />
  <meta name="search-keywords" content="file_find_close" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>file_find_close</h1>
  <p>Questa funzione deve essere chiamata dopo aver gestito i file aperti con <a href="file_find_first.htm"><span class="inline">file_find_first()</span></a> e <a href="file_find_next.htm"><span class="inline">file_find_next()</span></a> per liberare la memoria. Le funzioni di ricerca dei file aprono degli handle nella directory dei file e questi occupano una quantità minima di memoria, che (nel tempo) si somma. Pertanto dovreste sempre chiamare questa funzione dopo aver trovato i file di cui avete bisogno per &quot;chiudere&quot; questi handle.</p>
  <p> </p>
  <h4>Sintassi:</h4>
  <p class="code">file_find_close();</p>
  <p> </p>
  <h4>Restituisce</h4>
  <p class="code"><span data-keyref="Type_Void"></span></p>
  <p> </p>
  <h4>Esempio:</h4>
  <p class="code">if directory_exists(&quot;\User Content&quot;)<br />
    {<br />
        fileA = file_find_first(&quot;/User Content/*.doc&quot;, fa_readonly);<br />
        fileB = file_find_next();<br />
        fileC = file_find_next();<br />
        file_find_close();<br />
    }</p>
  <p>Questo codice controlla se la directory specificata esiste e, se esiste, ci va e restituisce il primo file &quot;read only&quot; <span class="inline">.doc</span> trovato. Poi cerca altri due file e chiude il cercatore di file.</p>
  <p>Potete cercare qualsiasi numero di file usando un <a href="../../../GML_Overview/Language_Features/while.htm"><span class="notranslate">while</span></a> ciclo:</p>
  <p class="code">var files = [];<br />
    var file_name = file_find_first(&quot;/User Content/*.doc&quot;, fa_readonly);<br />
    <br />
    while (_file_name != &quot;&quot;)<br />
    {<br />
        array_push(_files, _file_name);<br />
    <br />
        _file_name = file_find_next();<br />
    }<br />
    <br />
    file_find_close();
  </p>
  <p>Il codice precedente crea un array vuoto per memorizzare tutti i nomi dei file che sono stati trovati, e inizia a cercare i file di sola lettura <span class="inline">.doc</span>. Se quel nome di file non è un <span class="notranslate">string</span> vuoto, lo spinge nell'array <span class="inline">files</span>, e poi cerca di trovare il file successivo. Il <span class="notranslate">loop</span> continuerà a ripetere fino a quando non viene trovato un <span class="notranslate">string</span> vuoto (il che significa che non ci sono più file corrispondenti), che è quando termina il <span class="notranslate">loop</span> e chiude il cercatore di file alla fine.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Indietro: <a href="File_System.htm">File System</a></div>
        <div style="float:right">Il prossimo: <a href="file_attributes.htm"><span class="notranslate">file_attributes</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tutti i diritti riservati</span></h5>
  </div>
  <!-- KEYWORDS
file_find_close
-->
  <!-- TAGS
file_find_close
-->
</body>
</html>