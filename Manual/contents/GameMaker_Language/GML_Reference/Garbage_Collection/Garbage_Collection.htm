<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Raccolta dei rifiuti</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference section for the Garbage Collection functions" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="Garbage Collection" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Raccolta dei rifiuti</h1>
  <p>Il <strong>Garbage Collector</strong> di <span data-keyref="GameMaker Name">GameMaker</span> esiste perché i metodi possono essere passati sullo stack e lasciati non referenziati, così come <span class="notranslate">structs</span> e alcune altre cose, che a loro volta causerebbero una perdita di memoria se non fossero &quot;puliti&quot; in qualche modo. È qui che entra in gioco il garbage collector, che funzionerà in background del gioco, raccogliendo tutto ciò che è stato de-referenziato e mantenendo un uso ottimale della memoria. Quando parliamo di qualcosa che è stato de-referenziato, generalmente ci riferiamo a qualsiasi <span class="notranslate">struct</span> o funzione che non è collegata (non deve essere direttamente, ma attraverso una catena di altre variabili) ad una variabile <strong>globale </strong>o ad una <strong>variabile di istanza dell'oggetto</strong>. Notate anche che le funzioni definite in <span class="notranslate">scripts</span> in <span class="notranslate">IDE</span> non vengono raccolte, poiché sono implicitamente rese globali.</p>
  <p class="note"><b>NOTA</b>: Si prega di notare che cose come superfici, strutture dati, <span class="notranslate">buffers</span> e altre risorse dinamiche <b>non</b> sono garbage collect e hanno le loro proprie funzioni <span class="inline">destroy</span> per pulire la memoria associata a loro. Come regola generale, se qualcosa che create a tempo di esecuzione ha una funzione <span class="inline">destroy</span> allora non sarà garbage collect e dovrete occuparvene voi stessi nel codice. Le eccezioni a questo sono <span class="notranslate">sequences</span>, <span class="notranslate">animation curves</span> e le istanze, che richiedono anche il garbage collector, <b>ma hanno comunque bisogno che la loro funzione di distruzione venga chiamata</b>.</p>
  <p>La garbage collection che <span data-keyref="GameMaker Name">GameMaker</span> utilizza è &quot;generazionale&quot;. Questo significa che, al fine di ridurre il lavoro che deve essere fatto ogni frame, <span class="notranslate">objects</span> è diviso in &quot;generazioni&quot;. I nuovi <span class="notranslate">objects</span> sono creati nella generazione 0 e vengono spostati nelle generazioni più vecchie man mano che invecchiano. L'idea generale è che <span class="notranslate">objects</span> che rimangono in giro per un po' non hanno bisogno di essere continuamente controllati per vedere se devono essere cancellati, ma possono essere controllati meno frequentemente (si noti che &quot;oggetti&quot; qui si riferisce a qualsiasi cosa che può essere garbage collect e <i>non</i> alle istanze generali di <span class="notranslate">object</span> come definite nel Browser di <span class="notranslate">Asset</span> ). Si noti che mentre il sistema di controllo è generazionale, i controlli effettivi sono fatti in modo &quot;incrementale&quot;, in modo tale che invece di ripulire potenzialmente migliaia di <span class="notranslate">objects</span> da una generazione in un singolo frame - causando un grande picco nell'uso della CPU e potenzialmente influenzando il gameplay - ogni generazione sarà controllata e se necessario la pulizia sarà distribuita su più frame così che il garbage collector gira più frequentemente ma fa meno lavoro ogni frame che sta raccogliendo (è possibile impostare il tempo target per il garbage collector da spendere su ogni frame usando la funzione <span class="inline"><a href="gc_target_frame_time.htm">gc_target_frame_time()</a></span>).</p>
  <p>In generale non dovreste mai aver bisogno di interagire con il sistema di garbage collection di <span data-keyref="GameMaker Name">GameMaker</span> e normalmente i risultati del suo funzionamento non sono visibili, ma alcuni comandi <span class="notranslate">GML</span> sono disponibili per ottenere informazioni su ciò che il collettore sta facendo e per influenzare il suo comportamento in misura limitata.</p>
  <p class="note"><b>IMPORTANTE!</b> Si noti che sulla piattaforma di destinazione HTML5 la garbage collection è gestita dal motore JavaScript e quindi nessuna delle funzioni elencate di seguito influenzerà il suo funzionamento e la funzione <span class="inline">gc_get_stats()</span> restituirà 0 per tutti i campi.</p>
  <ul class="colour">
    <li><a href="gc_enable.htm"><span class="notranslate">gc_enable</span></a></li>
    <li><a href="gc_is_enabled.htm"><span class="notranslate">gc_is_enabled</span></a></li>
    <li><a href="gc_collect.htm"><span class="notranslate">gc_collect</span></a></li>
    <li><a href="gc_target_frame_time.htm">gc_target_frame_time</a></li>
    <li><a href="gc_get_target_frame_time.htm">gc_get_target_frame_time</a></li>
    <li><a href="gc_get_stats.htm"><span class="notranslate">gc_get_stats</span></a></li>
  </ul>
  <p> </p>
  <p>Per aiutare a decidere cosa deve essere raccolto e quando, ci sono anche alcune funzioni che possono essere usate per creare e controllare <strong>riferimenti deboli</strong> a <span class="notranslate">structs</span>. Un riferimento debole è un riferimento che non protegge il referenziato <span class="notranslate">object</span> dalla raccolta da parte di un garbage collector, e quindi può essere usato per controllare se un <span class="notranslate">struct</span> è ancora &quot;vivo&quot; (referenziato) o meno da qualche parte nel gioco. Le funzioni disponibili per i riferimenti deboli sono:</p>
  <ul class="colour">
    <li><a href="weak_ref_create.htm"><span class="notranslate">weak_ref_create</span></a></li>
    <li><a href="weak_ref_alive.htm"><span class="notranslate">weak_ref_alive</span></a></li>
    <li><a href="weak_ref_any_alive.htm"><span class="notranslate">weak_ref_any_alive</span></a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Indietro: <a href="../GML_Reference.htm">Riferimento GML</a></div>
        <div style="float:right">Prossimo: <a href="../Variable_Functions/Variable_Functions.htm">Funzioni variabili</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tutti i diritti riservati</span></h5>
  </div>
  <!-- KEYWORDS
GML Reference
-->
  <!-- TAGS
gml_reference
-->
</body>
</html>