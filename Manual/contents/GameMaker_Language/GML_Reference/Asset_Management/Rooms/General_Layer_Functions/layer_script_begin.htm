<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>inizio del copione</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the function layer_script_begin" />
  <meta name="rh-index-keywords" content="layer_script_begin" />
  <meta name="search-keywords" content="layer_script_begin" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>inizio del copione</h1>
  <p>Con questa funzione puoi assegnare una <a href="../../../../GML_Overview/Script_Functions.htm">funzione di script</a> ad un livello e sarà chiamata prima che il livello sia reso. Quando si aggiunge una funzione ad un livello, in questo modo verrà eseguita all'inizio di <i>ciascuno dei diversi eventi di disegno</i>, quindi si potrebbe voler controllare nella funzione assegnata quale evento è in corso di rendering e adattare il codice per adattarlo. Questo può essere fatto controllando l'attributo <a href="../../Objects/Object_Events/event_type.htm"><span class="inline">event_type</span></a> e/o la funzione <a href="../../Objects/Object_Events/event_number.htm"><span class="inline">event_number</span></a> (vedi l'esempio esteso qui sotto). Si noti che la funzione <i>non</i> è pensata per essere chiamata in qualsiasi evento di disegno o evento di passo, ma piuttosto deve essere chiamata solo all'inizio del <span class="notranslate">room</span> nel <strong>codice di creazione della stanza</strong> o nell'<strong>evento Create / </strong> <strong>Room Start Event</strong> di un'istanza.</p>
  <p> </p>
  <h4>Sintassi:</h4>
  <p class="code">layer_script_begin(layer_id, script);</p>
  <table>
    <tbody>
      <tr>
        <th>Argomento</th>
        <th>Tipo</th>
        <th>Descrizione</th>
      </tr>
      <tr>
        <td><span class="notranslate">layer_id</span></td>
        <td><span data-keyref="Type_String">Stringa</span> o <span data-keyref="Type_ID_Layer">ID del livello</span></td>
        <td><span class="notranslate">The unique ID value of the layer to target (or the layer name as a string)</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">script</span></td>
        <td><span data-keyref="Type_Function_Script">Funzione Script</span></td>
        <td><span class="notranslate">The script function index to assign to the layer</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Ritorna:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Esempio esteso:</h4>
  <p>In questo esempio esteso, vi mostreremo prima come una semplice funzione <span class="notranslate">script</span> è strutturata per impostare alcuni dati uniformi <span class="notranslate">shader</span> in modo che quando il dato livello è disegnato, questa funzione sarà eseguita e il <span class="notranslate">shader</span> funzionerà correttamente. Nell'esempio, vale la pena notare come controlliamo quale evento viene chiamato in modo che il resto della funzione venga eseguito solo sull'evento specifico su cui vogliamo che funzioni - in questo caso, solo sull'evento di disegno principale:</p>
  <p class="code">/// @function layer_shader_start();<br />
    function layer_shader_start()<br />
    {<br />
        if (event_type == ev_draw) <br />
        {<br />
            if event_number == 0<br />
            {<br />
                colour_to_find = shader_get_uniform(sShaderDemo5, &quot;f_Colour1&quot;);<br />
                colour_to_set = shader_get_uniform(sShaderDemo5, &quot;f_Colour2&quot;);<br />
                shader_set(s_ColourChanger);<br />
                shader_set_uniform_f(colour_to_find, 1,1,1 );<br />
                shader_set_uniform_f(colour_to_set, 1,0,0 );<br />
            }<br />
        }<br />
    }</p>
  <p>Avremmo poi una funzione di accompagnamento per resettare il <span class="notranslate">shader</span> dopo che tutto il disegno è stato fatto:</p>
  <p class="code">/// @function layer_shader_end();<br />
    function layer_shader_end()<br />
    {<br />
        if (event_type == ev_draw) <br />
        {<br />
            if event_number == 0<br />
            {<br />
                shader_reset();<br />
            }<br />
        }<br />
    }</p>
  <p>Ora che abbiamo definito le nostre funzioni <span class="notranslate">script</span> per impostare le <span class="notranslate">shader</span>, dobbiamo poi assegnarle ad un livello specifico in modo che il livello sappia chiamarle. Questo potrebbe essere fatto nel codice di creazione di <span class="notranslate">room</span>, o nell'evento di creazione o nell'evento di inizio di <span class="notranslate">room</span> di qualche controllore <span class="notranslate">object</span> (non hanno bisogno di essere impostate ad ogni passo, ma piuttosto una volta all'inizio di <span class="notranslate">room</span>, o quando il livello viene creato inizialmente):</p>
  <p class="code">var lay_id = layer_get_id(&quot;Instances&quot;);<br />
    layer_script_begin(lay_id, layer_shader_start);<br />
    layer_script_end(lay_id, layer_shader_end);</p>
  <p>Questo blocco di codice finale assegna il <span class="notranslate">scripts</span> al livello.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Indietro: <a href="General_Layer_Functions.htm">Funzioni generali del livello</a></div>
        <div style="float:right">Il prossimo: <a href="layer_script_end.htm"><span class="notranslate">layer_script_end</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tutti i diritti riservati</span></h5>
  </div>
  <!-- KEYWORDS
layer_script_begin
-->
  <!-- TAGS
layer_script_begin
-->
</body>
</html>