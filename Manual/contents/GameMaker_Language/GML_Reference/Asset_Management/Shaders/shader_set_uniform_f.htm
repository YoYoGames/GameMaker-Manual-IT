<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>shader_set_uniform_f</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the function shader_set_uniform_f" />
  <meta name="rh-index-keywords" content="shader_set_uniform_f" />
  <meta name="search-keywords" content="shader_set_uniform_f" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>shader_set_uniform_f</h1>
  <p>With this function you can set the value (or values) of a shader constant. You must previously have gotten the &quot;handle&quot; of the constant using the function <a href="shader_get_uniform.htm"><span class="inline">shader_get_uniform()</span></a>, and you will have to know what type of constant it is to pass the correct number of floating point values through to it, ie: if you have a <span class="inline">vec2</span> you will need to pass two values to the function.</p>
  <p>An exception to the above rule is when dealing with 32bit colour values. You can pass into the shader up to eight 32bit colour values and they will automatically be converted for you into vec4 values of 0 - 1. However for this you <i>must</i> use the shader constant name <span class="inline">in_Colour</span>, for a single colour, or <span class="inline">in_Colour0</span>, <span class="inline">in_Colour1</span>, etc... up to <span class="inline">in_Colour7</span> for multiple input values. The following to examples show how this would look in the shader itself:</p>
  <p class="code">    //Single colour<br />
        attribute vec2 in_Position;<br />
        attribute vec4 in_Colour;<br />
        attribute vec2 in_TextureCoord;<br />
    <br />
        //Multiple colours<br />
        attribute vec2 in_Position;<br />
        attribute vec4 in_Colour0;<br />
        attribute vec4 in_Colour1;<br />
        attribute vec2 in_TextureCoord;
  </p>
  <p>Note too that if you want to do compressed normals, etc. using a 4 byte colour format, then you will also have to use the same &quot;in_Colour&quot; format as shown above too.<b></b></p>
  <div data-conref="../../../../assets/snippets/Note_Set_Uniforms_After_Shader_Set.hts"> </div>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code">shader_set_uniform_f(handle, value1 [, value2, value3, value4]);</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>handle</td>
        <td><span data-keyref="Type_Handle_Shader_Uniform"><a href="GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_get_uniform.htm" target="_blank">Shader Uniform Handle</a></span></td>
        <td>The handle of the shader constant to set.</td>
      </tr>
      <tr>
        <td>value1 ... value4</td>
        <td><span data-keyref="Type_Real"><a href="GameMaker_Language/GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The floating point value (or values) to set the shader constant to.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Example:</h4>
  <p class="code">shader_set(shader_Glass);<br />
    shader_params = shader_get_uniform(shader_Glass, &quot;u_vParams&quot;);<br />
    shader_set_uniform_f(shader_params, 0.1, 0.8, 0.25);<br />
    draw_self();<br />
    shader_reset();</p>
  <p>The above code will get the handle of the shader constant &quot;u_vParams&quot; ( a <span class="inline">vec3</span>), then set that constant to the given values.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Shaders.htm">Shaders</a></div>
        <div style="float:right">Next: <a href="shader_set_uniform_f_array.htm">shader_set_uniform_f_array</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
shader_set_uniform_f
-->
  <!-- TAGS
shader_set_uniform_f
-->
</body>
</html>