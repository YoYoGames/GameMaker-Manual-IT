<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Vettori</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how vectors work" />
  <meta name="rh-index-keywords" content="Vectors" />
  <meta name="search-keywords" content="Vectors,vector maths" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Vettori</h1>
  <p>Ad un certo punto, quando si crea un gioco di qualsiasi complessità, si avrà probabilmente a che fare con i <strong>vettori</strong>. Sono usati in fisica, in IA, in trigonometria e in molte altre situazioni, ma cos'è un vettore? Beh, per dirla semplicemente, un vettore è una <em>quantità diretta</em>. Cominciamo a guardare un vettore a 1 dimensione - che equivale a un singolo numero - disegnando una linea numerata con una freccia che parte da zero e finisce a 5. Questo è il vettore &quot;a&quot; che è uguale a 5 e se disegniamo un'altra freccia che parte da 5 e finisce a 8 abbiamo il vettore &quot;b&quot; che è uguale a 3:</p>
  <p><img>Dovresti renderti conto che non importa dove inizia un vettore, tutto ciò che conta è quanto è lungo e in che direzione va. Quindi il vettore &quot;b&quot; inizia a 5, è lungo 3 unità e punta a &quot;destra&quot;, il che lo rende identico a un vettore che inizia a 0 e va a 3. Ora, puoi anche sommare questi vettori, mettendo i due vettori &quot;a&quot; e &quot;b&quot; uno di fronte all'altro per ottenere il vettore &quot;c&quot; che è uguale a 8. E i numeri negativi? Bene, se, nell'immagine qui sopra, un vettore che punta a &quot;destra&quot; corrisponde ad un numero positivo, potete vedere che un vettore che punta a &quot;sinistra&quot; corrisponderebbe ad un numero negativo, rendendo un vettore unidimensionale nient'altro che un numero firmato (+/-). Questo spiega il concetto essenziale di un vettore: contano solo la <em>lunghezza</em> e la <em>direzione</em> (&quot;sinistra&quot; o &quot;destra&quot; in questo caso), non la posizione.</p>
  <p>Allora, che dire dei vettori bidimensionali? Beh, possiamo pensare a loro come composti non solo da &quot;sinistra&quot; e &quot;destra, ma anche da &quot;su&quot; e &quot;giù&quot;:</p>
  <p><img>Ora, questi non sono ancora vettori effettivi perché dobbiamo ancora ridurli usando le loro coordinate iniziali e finali. Guardando il vettore &quot;a&quot; possiamo vedere che ha una coordinata iniziale di [2,2] e una coordinata finale di [4,3] e quindi per ottenere il vettore da questo dobbiamo ridurlo sottraendo le coordinate finali dalle coordinate iniziali in questo modo:</p>
  <p class="code">a = [(x2-x1), (y2-y1)] = [(4-2), (3-2)] = [2,1]</p>
  <p>Facciamo ora lo stesso per il vettore b:</p>
  <p class="code">b = [(-1.2 -(-3.2)) ,(2.1 - 1.1)] = [2 ,1]</p>
  <p>Notate qualcosa? Quei due vettori sono uguali! Questa è un'altra dimostrazione che un vettore non ha posizione, solo direzione e lunghezza, e possiamo disegnare questi vettori uno rispetto all'altro intorno a un asse locale [0,0]:</p>
  <p><img>Ciò significa che un vettore 2D è definito da due valori, una posizione &quot;x&quot; e una &quot;y&quot; rispetto all'asse locale [0,0]. E i vettori 3D? Beh, hanno la dimensione aggiunta della &quot;profondità&quot; con cui fare i conti e verrebbero calcolati come posizioni &quot;x&quot;, &quot;y&quot; e &quot;z&quot; intorno a un asse locale come questo:</p>
  <p><img>Un buon esempio di un vettore usato in <span data-keyref="GameMaker Name">GameMaker</span> è la proprietà fisica di <strong>gravità</strong> nell'editor <span class="notranslate">room</span>. La gravità è calcolata come un vettore intorno ad una posizione [0,0]. Quindi, se si definisce la gravità come [x0, y10], la gravità sarebbe <em>giù</em> con una forza di 10.</p>
  <p>Ordinariamente, i vettori possono essere usati in molte situazioni, ma a volte si vuole vincolare il loro valore (come quando si tratta di angoli) ed è per questo che li <strong>normalizziamo </strong>. Questo è essenzialmente un trucco matematico che viene utilizzato per convertire un vettore di lunghezza <em>n</em> in un vettore di lunghezza 1, il che significa che le componenti del vettore vengono <em>normalizzate </em>per essere tra 0 e 1. Questi vettori sono anche chiamati <strong>vettori unitari</strong>:</p>
  <p><img>Per calcolare un vettore normalizzato, dobbiamo prima avere le componenti originali del vettore, poi usarle per ottenere la lunghezza del vettore. Poi dividiamo ogni componente del vettore per questa lunghezza per ottenere le componenti vettoriali normalizzate che formano il vettore normalizzato in cui la <strong>somma dei quadrati di tutte le coordinate è uguale a 1</strong>. Ecco come:</p>
  <p><img>Prima prendiamo le coordinate del vettore e otteniamo le componenti:</p>
  <p class="code">vx = (x2 - x1) = (7 - 1) = 6<br />
    vy = (y2 - y1) = (4 - 1) = 3</p>
  <p>Usiamo poi questi valori per calcolare la lunghezza del vettore:</p>
  <p class="code">len = sqr(vx2 + vy2); // = sqr(36 + 9) = sqr(45) = 6.708203932499369</p>
  <p>Ora, questo ci dà la lunghezza esatta del vettore &quot;a&quot;, quindi usiamola per normalizzare le due componenti vettoriali <span class="inline">vx</span> e <span class="inline">vy</span>:</p>
  <p class="code">vx = (vx/len); // = (6 / 6.708203932499369) = 0.8944271909999159<br />
    vy = (vy/len); // = (3 / 6.708203932499369) = 0.4472135954999579</p>
  <p>Grande! Ora abbiamo normalizzato le componenti del vettore! Ma che utilità pratica ha nel contesto di <span data-keyref="GameMaker Name">GameMaker</span>? Ok, facciamo un esempio pratico...</p>
  <p>Diciamo che avete un gioco in cui il giocatore deve sparare a un nemico e avete bisogno di sapere quanto il proiettile <span class="notranslate">object</span> deve muoversi lungo l'asse x e y ogni passo per colpirlo:</p>
  <p><img>Per questo usereste le coordinate del giocatore e del nemico per ottenere le componenti vettoriali e la lunghezza, poi le normalizzereste per ottenere un valore tra 0 e 1 che infine moltiplichereste per la velocità che desiderate che il proiettile viaggi ad ogni passo. Questi due valori finali verrebbero poi memorizzati e aggiunti alle coordinate x e y di partenza ad ogni passo. Sembra complicato? Non lo è, guarda (i valori sono stati arrotondati ad un decimale per semplicità):</p>
  <p class="code">px = 100;<br />
    py = 425;<br />
    ex = 356;<br />
    ey = 83;<br />
    bullet_speed = 5;<br />
    <br />
    vx = (ex - px); // = 256<br />
    vy = (ey - py); // = -342<br />
    <br />
    len = sqrt(vx2 + vy2); // = sqrt(65536 + 116964) = 427.2<br />
    <br />
    vx = vx / len; // = 0.6<br />
    vy = vy / len; // = 0.8<br />
    <br />
    speed_x = vx * bullet_speed; // = 3<br />
    speed_y = vy * bullet_speed; // = 4
  </p>
  <p>Quindi, per colpire il bersaglio dobbiamo aggiungere 3 alla coordinata x del proiettile e 4 alla sua coordinata y ad ogni passo.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Indietro: <a href="Additional_Information.htm">Informazioni aggiuntive</a></div>
        <div style="float:right">Prossimo: <a href="Guide_To_Using_Buffers.htm">Guida all'uso dei buffer</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tutti i diritti riservati</span></h5>
  </div>
  <!-- KEYWORDS
Vectors
Vector Maths
-->
  <!-- TAGS
vector_maths
-->
</body>
</html>