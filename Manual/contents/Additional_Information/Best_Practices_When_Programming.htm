<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Le migliori pratiche di programmazione</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains some best practices when programming using GameMaker" />
  <meta name="rh-index-keywords" content="Best Practices When Programming" />
  <meta name="search-keywords" content="best practices" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Le migliori pratiche di programmazione</h1>
  <p>In questa pagina tratteremo alcune &quot;buone pratiche&quot; per la programmazione del gioco e allo stesso tempo spiegheremo un po' il funzionamento interno di <span data-keyref="GameMaker Name">GameMaker</span>. Prima di continuare, tuttavia, è bene sottolineare due punti molto importanti:</p>
  <ul class="colour">
    <li>Questa è una <em>guida</em> e non è il metodo definitivo e definitivo al 100% per scrivere il vostro gioco! Le cose menzionate qui sono generalmente più sulla scala dell'organizzazione e della micro-ottimizzazione e dovrebbero essere incorporate nelle vostre abitudini di programmazione quando vi sentite a vostro agio con <span class="notranslate">GML</span> e ritenete che siano appropriate.</li>
    <li>Se il vostro gioco funziona bene e siete soddisfatti delle cose così come sono, allora <em>non correte a cambiare tutto solo per spremere qualche FPS in più</em>. Bisogna trovare un equilibrio tra un codice leggibile, flessibile e modulare e il tempo e l'energia necessari per cambiare le cose, nonché il guadagno complessivo alla fine. In sostanza, se non è rotto, non aggiustatelo e conservate ciò che avete imparato qui per il vostro prossimo progetto.</li>
  </ul>
  <p>Detto questo, passiamo a vedere alcuni consigli generali per scrivere un buon codice <span class="notranslate">GML</span>, che si possono applicare in qualsiasi momento...</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Stile di programmazione</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">Quando si tratta di scrivere codice, ognuno ha uno <em>stile</em>. Lo stile con cui si programma è il modo in cui si posizionano le parentesi, il modo in cui si indentano le righe, il modo in cui si dichiarano e si nominano le variabili, ecc. ed è essenziale per rendere il codice chiaro e leggibile per gli altri (e per il proprio futuro, quando si dovrà tornare a questo progetto dopo aver lavorato su qualcos'altro).</p>
    <p class="dropspot">Esistono moltissimi <a href="http://en.wikipedia.org/wiki/Programming_style">stili di programmazione</a> e alcuni sostengono che il loro sia il migliore da usare, ma la verità è che quasi tutti gli stili vanno bene, purché si sia <strong>coerenti </strong>nell'usarli e sia <em>chiaro </em>e <em>ovvio </em>cosa sia e faccia ogni cosa.</p>
    <p class="dropspot"><img>L'immagine qui sopra è un esempio di dichiarazione di funzione in <span class="notranslate">script</span> per illustrare i punti precedenti. Si può notare che utilizza i commenti in stile JSDoc per spiegare chiaramente cosa fa, e lo stile di codifica è coerente, con rientri di 4 spazi, underscore usati per le vars locali, output registrato, ecc.</p>
    <p class="dropspot">Si noti anche che, mentre l'editor <span class="notranslate">script</span> consente di piegare il codice in corrispondenza di ciascuna delle parentesi aperte/chiuse, si possono usare i tag <span class="inline">#region</span> e <span class="inline">#endregion</span> per sezionare parti del codice e migliorare notevolmente la leggibilità, soprattutto quando si ha a che fare con <span class="notranslate">scripts</span> più grandi che contengono più funzioni. Le regioni possono anche essere commentate - si veda la sezione Modifica di questa pagina del manuale):</p>
    <p class="dropspot"><img>Quando scrivete il codice, dovete sapere che durante la compilazione del gioco finale, <span data-keyref="GameMaker Name">GameMaker</span> elimina i commenti, rimuove le interruzioni di riga e gli spazi bianchi non necessari, sostituisce i valori costanti/macro/enum e in generale comprime il codice come parte del processo. Questo significa che potete aggiungere tutti gli spazi bianchi intorno al codice che volete e non dovete preoccuparvi di mantenere i commenti corti o di usarli solo con parsimonia.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Utilizzare le variabili locali</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Continuando a parlare dello stile di programmazione, una cosa che molti principianti fanno è quella di stipare il più possibile in una riga di codice. Per esempio:</p>
    <p class="code">draw_sprite(sprite_index, image_index, x + lengthdir_x(100, point_direction(x, y, mouse_x, mouse_y)), y + lengthdir_y(100, point_direction(x, y, mouse_x, mouse_y)));</p>
    <p class="dropspot">Sebbene non sia completamente illeggibile, è inefficiente (la funzione <span class="inline">point_direction()</span> viene richiamata due volte, per esempio) ed è disordinata e scomoda da vedere. Sarebbe molto meglio se fosse espresso come:</p>
    <p class="code">var p_dir = point_direction(x, y, mouse_x, mouse_y);<br />
      var local_x = x + lengthdir_x(100, p_dir);<br />
      var local_y = y + lengthdir_y(100, p_dir);<br />
      draw_sprite(sprite_index, image_index, local_x, local_y);</p>
    <p class="dropspot">La memoria e le risorse necessarie per creare queste variabili locali sono trascurabili e sono di gran lunga superate dal beneficio immediato che l'utente (o chiunque altro legga il codice in seguito) ottiene dalla sua chiarezza. La stessa idea dovrebbe essere applicata anche alle funzioni, dove si dovrebbero assegnare nomi sensati alle variabili di input e utilizzare una formattazione chiara e variabili locali dove necessario per rendere il codice il più leggibile possibile.</p>
    <p class="dropspot">Le variabili locali sono veloci da elaborare nel gioco, quindi sfruttatele al massimo e se un'espressione compare in un blocco di codice o in <span class="notranslate">script</span> due o più volte, pensate di creare una variabile locale per essa. Quando si utilizzano gli obiettivi di <a class="glossterm" data-glossterm="Compilatore YoYo (YYC)" href="#">YoYo Compiler (YYC)</a>, se si fa riferimento a <span class="inline">global</span> o a variabili di istanza varie volte in una funzione o in un blocco di codice, è particolarmente vantaggioso assegnarle a una variabile locale all'inizio del codice e poi fare riferimento a tale variabile locale, per ottenere prestazioni migliori.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">Array</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot">Gli <a href="../GameMaker_Language/GML_Overview/Arrays.htm">array</a> sono veloci da usare e richiedono meno memoria delle strutture di dati, ma possono essere ottimizzati ulteriormente. Quando si crea un array, la memoria viene allocata in base alla sua dimensione, quindi si dovrebbe cercare di inizializzare un array con la sua dimensione massima, anche se si prevede di riempirlo solo in seguito. Ad esempio, se si sa che un array deve contenere un massimo di 100 valori, lo si inizializzerà subito a 100 slot, utilizzando la funzione <a href="../GameMaker_Language/GML_Reference/Variable_Functions/array_create.htm"><span class="inline">array_create()</span></a> funzione:</p>
    <p class="code">array = array_create(100, 0);</p>
    <p class="dropspot">Questo alloca la memoria in un unico &quot;pezzo&quot;, con tutti i valori dell'array impostati sul valore predefinito di 0, e aiuta a mantenere le cose veloci, perché altrimenti ogni volta che si aggiunge un nuovo valore all'array l'intera memoria deve essere riallocata.</p>
    <p class="note"><span class="note">NOTA</span> Sul target HTML5 l'assegnazione di array come questo non si applica e gli array devono essere inizializzati da 0 per questo target! Si può facilmente gestire questo problema controllando la variabile os_browser, ad esempio:</p>
    <p class="code"><span style="padding-left:1px;">if (os_browser == browser_not_a_browser)<br />
        {<br />
            array_create(100, 0);<br />
        }<br />
        else<br />
        {<br />
            for (var i = 0; i &lt; 100; ++i;)<br />
            {<br />
                array[i] = 0;<br />
            }<br />
        }</span></p>
    <p class="dropspot">È inoltre possibile liberare la memoria associata a un array impostando la variabile utilizzata come uguale a 0. Quindi, per cancellare l'array nell'esempio di codice precedente, è sufficiente utilizzare:</p>
    <p class="code">array = 0;</p>
    <p class="dropspot">Si noti anche che gli array sono <strong>passati per riferimento</strong>, ma copieranno l'intero elemento quando viene apportata una modifica (questo comportamento è chiamato <strong>copia in scrittura</strong>). Quindi, se si passa un array a una funzione, si passa un <em>riferimento </em>all'array originale e qualsiasi valore letto da esso proverrà dalla fonte originale. Questo è bello e veloce, ma se si devono modificare i valori dell'array, l'array stesso viene duplicato al momento della scrittura e le modifiche apportate <strong>devono essere restituite dalla funzione, altrimenti andranno perse</strong>. Questa operazione è molto più lenta e consuma più memoria, quindi bisogna fare attenzione a come si usano gli array nelle funzioni.</p>
    <p class="dropspot">Tuttavia, è possibile evitare questo comportamento di copia in scrittura utilizzando l'<a href="../GameMaker_Language/GML_Overview/Accessors.htm">accesore</a> speciale <a href="../GameMaker_Language/GML_Overview/Accessors.htm">per</a> gli array <span class="inline">@</span>, che consente di accedere direttamente all'array sottostante. Ad esempio:</p>
    <p class="code">// Call a function, passing our array<br />
      my_function(my_array);</p>
    <p class="code">// The function looks like this:<br />
      <br />
      function my_function(_a)<br />
      {<br />
          // The array will be copied and the copy modified,<br />
          // requiring you to use &quot;return _a&quot;, later<br />
          _a[0] = 100;<br />
      <br />
          // This will modify the ORIGINAL array directly and<br />
          // does not require it to be returned<br />
          _a[@ 0] = 100;<br />
      }
    </p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">Strutture dati</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot">In <span data-keyref="GameMaker Name">GameMaker</span> le <a href="../GameMaker_Language/GML_Reference/Data_Structures/Data_Structures.htm">strutture di dati</a> sono state ottimizzate in modo da essere molto più veloci rispetto alle precedenti versioni di <span class="notranslate">GameMaker</span>. Devono ancora essere ripulite (distrutte) quando non vengono utilizzate per liberare memoria e possono ancora essere più lente rispetto, ad esempio, agli array, ma la facilità d'uso e le funzioni aggiuntive per gestire i dati che contengono possono spesso superare la minima differenza di velocità, quindi non abbiate paura di usarle nei vostri giochi.</p>
    <p class="dropspot">Va notato che tra tutte le strutture di dati, le mappe DS sono particolarmente veloci, sia in lettura che in scrittura, il che le rende un'opzione eccellente per tutti i tipi di attività.</p>
    <p class="dropspot">In precedenza abbiamo parlato degli <a href="../GameMaker_Language/GML_Overview/Accessors.htm">accessori</a> per gli array, ma sono disponibili anche per le strutture di dati, il che può aiutare a ripulire il codice e a renderlo molto più leggibile.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">Collisioni</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot">Esistono <a href="../GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/Collisions.htm">diversi modi per gestire le collisioni</a> in <span data-keyref="GameMaker Name">GameMaker</span> e la maggior parte di essi comporta un sovraccarico della CPU. Le funzioni <span class="inline">collision_</span> e <span class="inline">point_</span>, le funzioni <span class="inline">place_</span> e le funzioni <span class="inline">instance_</span> si basano tutte su controlli di <a class="glossterm" data-glossterm="riquadro di delimitazione" href="#">bounding box</a> con tutte le istanze di un dato tipo all'interno di <span class="notranslate">room</span>, e sebbene ci sia un'ottimizzazione incorporata nel motore per limitare questi controlli, le collisioni non sono mai la cosa più efficiente da gestire. Se si iniziano a usare collisioni precise, anche le prestazioni peggiorano sensibilmente, perché non solo si effettuano i controlli dei riquadri di delimitazione, ma anche quelli per pixel, il che è davvero molto lento.</p>
    <ul class="dropspotlist">
    </ul>
    <p class="dropspot">Ciò non significa che non si debbano usare queste funzioni, perché possono essere molto utili. Tuttavia, è necessario sapere quali usare e quando, perché funzionano tutte in modo leggermente diverso e hanno velocità diverse. Una regola approssimativa è che le funzioni <span class="inline">place_</span> sono più veloci delle funzioni <span class="inline">instance_</span>, che sono più veloci delle funzioni <span class="inline">collision_</span> e <span class="inline">point_</span>, quindi leggete le pagine del manuale relative a ciascuno di questi tipi di funzioni e assicuratevi di scegliere la più appropriata per ogni situazione.</p>
    <p class="dropspot">In alternativa, è possibile creare un<strong> sistema di collisioni basato sulle piastrelle</strong>, che può essere creato utilizzando le <a href="../GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/Tile_Map_Layers.htm">funzioni tilemap</a> o anche un array 2D personalizzato o una griglia DS. Questi sistemi sono molto veloci e contribuiscono ad aumentare la velocità del gioco. Tuttavia, se si utilizza un terreno irregolare o muri e <span class="notranslate">objects</span> che non sono allineati a una griglia, questi sistemi potrebbero non essere adatti. È possibile trovare un tutorial molto semplice sulle collisioni delle mattonelle al seguente link video</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="https://youtu.be/UyKdQQ3UR_0">Collisioni di piastrelle in <span data-keyref="GameMaker Name">GameMaker</span></a></li>
    </ul>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#">Scambi di texture e batch di vertici</a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p class="dropspot">Se si <span class="notranslate">switch</span> sul pulsante <a href="../GameMaker_Language/GML_Reference/Debugging/show_debug_overlay.htm"><strong>debug in sovrimpressione</strong></a>si noterà che nella parte superiore dello schermo, durante i test, sono presenti due cifre tra parentesi. Il primo è il numero di <strong>scambi di texture </strong>effettuati e il secondo è il numero di <strong>batch di vertici</strong>. Questi valori sono influenzati da una serie di fattori e non scenderanno mai a (0) (0), poiché il motore richiede uno o due di questi passaggi, ma si dovrebbe puntare a ridurli il più possibile.</p>
    <p class="dropspot"><img>Per gli scambi di <span class="notranslate">texture</span>, il modo migliore e più efficiente per farlo è ottimizzare il modo in cui <span class="notranslate">sprites</span> e gli sfondi sono memorizzati nella pagina <span class="notranslate">texture</span>. Questo si fa dalle <a href="../The_Asset_Editors/Sprites.htm">proprietà</a> degli <a href="../The_Asset_Editors/Sprites.htm">sprite</a> e si possono creare pagine <span class="notranslate">texture</span> nell'<a href="../Settings/Texture_Groups.htm">Editor dei gruppi di texture</a>. Se avete un certo numero di immagini che vengono usate solo nel menu principale (per esempio), mettetele insieme in una <a href="../Settings/Texture_Information/Texture_Pages.htm">pagina di texture</a> separata. Lo stesso vale se si hanno immagini specifiche per i livelli, o per il giocatore e i nemici, ecc. In pratica, si desidera raggruppare le immagini in base all'uso, in modo da ridurre il più possibile gli scambi. Inoltre, per mantenere la <a class="glossterm" data-glossterm="VRAM" href="#">VRAM</a> ottimizzata, si possono usare le diverse funzioni di <a href="../GameMaker_Language/GML_Reference/Drawing/Textures/Textures.htm">prefetch e flush</a> per caricare e rimuovere <span class="notranslate">textures</span> dalla memoria come richiesto.</p>
    <p class="note"><span class="note">NOTA</span> Come accennato all'inizio di questa pagina, se il gioco funziona bene con un FPS decente, non preoccupatevi troppo degli scambi di <span class="notranslate">texture</span>... soprattutto quando si creano progetti su obiettivi desktop. Queste ottimizzazioni sono più adatte a giochi di grandi dimensioni o a dispositivi mobili di fascia bassa e, se usate in modo errato, possono avere un impatto negativo sulle prestazioni.</p>
    <p class="dropspot">Le informazioni sui vertici vengono inviate in &quot;batch&quot; alla GPU per il disegno e, in generale, più grandi sono i batch meglio è. Per questo motivo è necessario evitare di &quot;rompere&quot; il batch durante il disegno, in quanto ciò aumenterà il numero di batch di vertici inviati alla GPU. Ci sono diverse cose che interrompono il batch, tra cui le principali sono le <strong>modalità di fusione</strong>, la modifica dello <strong>shader</strong>, la modifica di un'uniforme per un <span class="notranslate">shader</span> prima di disegnare qualcosa e l'uso delle forme e delle primitive incorporate.</p>
    <p class="dropspot">Quindi, se avete un certo numero di istanze di proiettili che disegnano utilizzando la modalità di fusione <span class="inline">bm_add</span>, ad esempio, creerete un nuovo batch di vertici per ciascuno di essi, il che è decisamente negativo! Al contrario, nel gioco è presente un controller <span class="notranslate">object</span> che disegna tutti i proiettili, in questo modo:</p>
    <p class="code">gpu_set_blendmode(bm_add);<br />
      <br />
      with (obj_BULLET)<br />
      {<br />
          draw_self();<br />
      }<br />
      <br />
      gpu_set_blendmode(bm_normal);
    </p>
    <p class="note"><span class="note">NOTA</span> Questo non vale solo per l'uso di <span class="inline" style="font-size: 14px">bm_add</span>: qualsiasi modifica alla miscelazione interromperà il batch e comporterà un calo delle prestazioni.</p>
    <p class="dropspot">In questo modo, tutti i proiettili verranno disegnati nello stesso lotto. L'uso oculato delle funzioni <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendenable.htm"><span class="inline">gpu_set_blendenable()</span></a>, <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_alphatestref.htm"><span class="inline">gpu_set_alphatestref()</span></a>, e <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_alphatestenable.htm"><span class="inline">gpu_set_alphatestenable()</span></a> può migliorare notevolmente le prestazioni e può essere attivata/disattivata a seconda delle necessità nel codice del progetto, anche se potrebbe non essere adatta a tutti i tipi di grafica o di progetti.</p>
    <p class="note"><span class="note">NOTA</span> Se non si desidera che l'istanza si disegni da sola quando si usa un controllore in questo modo, si può semplicemente aggiungere un commento all'evento Draw per sopprimere il disegno predefinito o rendere l'istanza invisibile (anche se questo impedirà l'esecuzione di tutto il codice per l'istanza in tutti gli eventi draw).</p>
    <p class="dropspot">Un altro modo per ridurre questi numeri è quello di disabilitare l'opzione <strong>Pagina separata <span class="notranslate">Texture</span> </strong> per <span class="notranslate">sprites</span> a meno che non sia assolutamente necessario. Ciascuna immagine memorizzata in questo modo viene inviata alla propria pagina <span class="notranslate">texture</span> e gestita in modo diverso, per cui è meglio avere queste immagini in una pagina <span class="notranslate">texture</span> normale. È possibile ottenere le coordinate UVS con la funzione <a href="../GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_uvs.htm"><span class="inline">sprite_get_uvs()</span></a> e memorizzarle in variabili da usare in seguito. Si tratta di una piccola quantità di codice in più, ma ne vale la pena per la spinta che si otterrà. Si noti che questo metodo non consente le ripetizioni di <span class="notranslate">texture</span>!</p>
    <p class="dropspot">Come per tutti questi consigli, se la modifica vi rende la vita più difficile e il gioco funziona bene, non preoccupatevi troppo...</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#">Particelle</a></p>
  <div class="droptext" data-targetname="drop-down6">
    <p class="dropspot">Le<a href="../GameMaker_Language/GML_Reference/Drawing/Particles/Particles.htm">particelle</a> offrono un modo molto rapido ed efficiente per creare effetti dinamici nel gioco e in generale offrono buone prestazioni. Tuttavia, vale la pena notare che l'uso della miscelazione additiva, della miscelazione alfa e della miscelazione del colore sulle particelle può ridurre le prestazioni, soprattutto sugli obiettivi mobili, quindi se non ne avete bisogno non usatele! La fusione additiva, in particolare, può aumentare notevolmente i batch di vertici e deve essere usata con attenzione.</p>
    <p class="dropspot">Si noti che sul target HTML5 non WebGL, avere particelle multicolori e sfumate richiederà una grande quantità di cache di immagini e sarà molto lento. Tuttavia, poiché le particelle <span class="notranslate">sprites</span> possono essere animate, è possibile creare un'immagine animata <span class="notranslate">sprite</span> con sotto-immagini che cambiano colore e utilizzarla al posto della particella. L'aspetto sarà comunque quello di un cambiamento graduale di colore, ma non richiederà la creazione costante di immagini <span class="notranslate">cache</span>.</p>
    <p class="dropspot">Per ulteriori informazioni sulle particelle, consultare la pagina <a href="Guide_To_Using_Particles.htm">Guida all'uso delle particelle</a>.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#">Superfici</a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p class="dropspot">Infine, ci soffermeremo brevemente sull'uso delle <a href="../GameMaker_Language/GML_Reference/Drawing/Surfaces/Surfaces.htm">superfici</a>, poiché <span data-keyref="GameMaker Name">GameMaker</span> offre un'ottimizzazione piuttosto significativa per il loro utilizzo nei giochi: la possibilità di <span class="notranslate">switch</span> di attivare e disattivare il <strong>buffer di profondità</strong>.</p>
    <p class="dropspot">Quando si usano le superfici come di consueto, <span data-keyref="GameMaker Name">GameMaker</span> crea una superficie e una profondità <span class="notranslate">buffer</span> che la accompagna, per garantire un corretto ordinamento della profondità quando si disegna qualcosa in 3D. Tuttavia, per la maggior parte dei giochi 2D, questa profondità extra <span class="notranslate">buffer</span> non è necessaria e occupa spazio di memoria e tempo di elaborazione che potrebbero essere utilizzati per altri scopi. È qui che entra in gioco la funzione <a href="../GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_depth_disable.htm"><span class="inline">surface_depth_disable()</span></a> entra in gioco...</p>
    <p class="dropspot">Questa funzione può essere chiamata prima di creare una superficie per disabilitare la generazione della profondità <span class="notranslate">buffer</span> e tutte le superfici create successivamente non avranno una profondità <span class="notranslate">buffer</span> creata per loro. È possibile attivare/disattivare questa funzione a seconda delle esigenze e anche chiamarla una volta all'inizio del gioco per disabilitare la profondità <span class="notranslate">buffers</span> per tutte le successive chiamate di superficie (e nella maggior parte dei giochi 2D questo va bene). Non darà un grande aumento delle prestazioni, ma è certamente qualcosa da tenere presente se il vostro gioco si basa molto sulle superfici e potrebbe evitare che il gioco esaurisca la memoria sui dispositivi con specifiche inferiori.</p>
  </div>
  <p> </p>
  <p>Oltre alle cose principali menzionate sopra, ci sono altri aspetti più generali che possono aiutare le prestazioni e che sono considerati &quot;buone pratiche&quot;:</p>
  <ul class="colour">
    <li>non abbiate paura di usare le funzioni trigonometriche perché (contrariamente a quanto si crede) sono piuttosto veloci, soprattutto se paragonate a particelle, collisioni, <span class="notranslate">strings</span>, ecc...</li>
    <li>non inserire negli eventi Draw codice che non serve a disegnare le cose</li>
    <li>utilizzare un allarme per richiamare qualsiasi codice che non debba essere richiamato a ogni passo (piuttosto che aggiungere questo nell'evento Step)</li>
  </ul>
  <p>Ma, come abbiamo detto all'inizio della pagina, tutte queste ottimizzazioni sono opzionali e se il vostro gioco funziona bene con 60 batch di vertici, 80 scambi di <span class="notranslate">texture</span>, fusione additiva, ecc. Tenete solo a mente queste cose quando programmate il vostro prossimo gioco...</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Indietro: <a href="Additional_Information.htm">Informazioni aggiuntive</a></div>
        <div style="float:right">Avanti: <a href="The_File_System.htm">Il file system</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tutti i diritti riservati</span></h5>
  </div>
  <!-- KEYWORDS
Nest Practices
-->
  <!-- TAGS
best_practices
-->
</body>
</html>