<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Guida all'uso delle particelle</title>
    <meta name="generator" content="Adobe RoboHelp 2020" />
    <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
    <script src="../assets/scripts/main_script.js"></script>
    <meta name="rh-authors" content="Mark Alexander" />
    <meta name="topic-comment" content="Page that explains how to set up and use particles" />
    <meta name="rh-index-keywords" content="Guide To Using Particles" />
    <meta name="search-keywords" content="particles,particle guide,particle setup" />
  </head>
  <body><!--<div class="body-scroll" style="top: 150px;">-->
    <h1>Guida all'uso delle particelle</h1>
    <p>Questa guida è per quelli di voi che vogliono capire come usare e creare <strong>particelle</strong>. Questa pagina coprirà sia le <a href="../GameMaker_Language/GML_Reference/Drawing/Particles/Particles.htm">funzioni</a> del <a href="../GameMaker_Language/GML_Reference/Drawing/Particles/Particles.htm">GameMaker Language</a> che le <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Particles/Particle_Actions.htm">azioni GML Visual</a> per le particelle, quindi se non avete mai usato le particelle prima, speriamo che questa guida possa farvi iniziare perché sono molto utili e abbastanza divertenti da creare.</p>
    <p>Prima di andare avanti, dovremmo probabilmente spiegare cos'è effettivamente una particella... Fondamentalmente, una particella è una risorsa grafica che ha certe proprietà che sono definite da un <strong>sistema di particelle</strong>. Queste proprietà non possono essere manipolate direttamente per le <em>singole </em>particelle, ma vengono modificate collettivamente attraverso il codice o le azioni che vengono utilizzate per definire il sistema a cui appartiene. Sono molto utili per creare effetti belli e appariscenti - o sottili e discreti - in un gioco senza l'overhead della CPU che ha l'uso delle istanze.</p>
    <p>Abbiamo menzionato i sistemi di particelle, quindi spieghiamo cos'è prima di continuare. Pensate a un sistema di particelle come a un contenitore che userete per tenere le vostre particelle pronte all'uso. Puoi usare il codice o le azioni per definire l'aspetto visivo delle particelle, e poi queste vengono messe nel &quot;contenitore&quot; (il sistema di particelle) in modo che tu possa tirarlo fuori e usarlo quando e dove ti serve in seguito.</p>
    <p>Prima di impostare un sistema e creare particelle, è importante sapere alcune cose... La prima è che la maggior parte del codice di un sistema di particelle viene <strong>chiamato solo una volta nel gioco</strong>, di solito in qualche tipo di controller <span class="notranslate">object</span> nel primo <span class="notranslate">room</span> o livello - questo non è sempre il caso, ma per il bene della semplicità, useremo questo scenario per la seguente breve guida poiché è il modo più comune di utilizzare le particelle. Lo fai perché un sistema di particelle, una volta creato, rimane in memoria ed è pronto per essere utilizzato in qualsiasi momento, quindi se lo crei più di una volta può aumentare rapidamente l'utilizzo della memoria e causare gravi lag, e ha anche il potenziale di mandare in crash il gioco. Per il bene della semplicità in questa guida, creerete un sistema <strong>globale </strong>di particelle che può essere usato da qualsiasi istanza del gioco in qualsiasi momento.</p>
    <p> </p>
    <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Creare un sistema di particelle</a></p>
    <div class="droptext" data-targetname="drop-down">
      <p class="dropspot">Per iniziare è necessario definire il sistema di particelle e dargli un nome in modo da poterlo utilizzare. Poiché questo sarà un sistema globale che ogni <span class="notranslate">object</span> può usare, dovrai farlo in un controller <span class="notranslate">object</span> o in una funzione di inizializzazione eseguita all'inizio del gioco. Il <span class="notranslate">GML</span> dovrebbe assomigliare a questo:</p>
      <p class="code">global.P_System = part_system_create_layer(&quot;Instance_Layer&quot;, false);</p>
      <p class="dropspot">E usando <span class="notranslate">GML</span> Visual:</p>
      <p class="dropspot"><img>Si noti che il nome del livello fornito deve essere un livello valido nel <span class="notranslate">room</span> dove il sistema sarà utilizzato, altrimenti nessuna particella sarà visibile. Nota anche che abbiamo impostato il flag &quot;persistente&quot; (sia nel codice che in <span class="notranslate">GML</span> Visual) a false. Un sistema di particelle persistente è un sistema che &quot;persiste&quot; attraverso <span class="notranslate">rooms</span> senza la necessità di distruggerlo e ricrearlo per ogni <span class="notranslate">room</span>. Tuttavia, per mantenere le cose semplici per questa guida, non useremo la persistenza.</p>
      <p class="dropspot">Questo è il sistema creato, ma le particelle? Dobbiamo definire anche loro o il sistema è inutile e non fa nulla.</p>
      <p class="dropspot"> </p>
    </div>
    <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Definire un tipo di particella</a></p>
    <div class="droptext" data-targetname="drop-down1">
      <p class="dropspot">Per usare una particella in un sistema devi prima definire le sue proprietà generali. Queste sono come <span class="notranslate">object</span> proprietà, ma si applicano solo in modo <em>generale </em>alle singole particelle. Ciò significa che se dai alle particelle una velocità di movimento minima di 1 e una velocità di movimento massima di 2, ogni particella creata dal sistema avrà una velocità casuale tra 1 e 2 pixel per passo, e che nel complesso avranno una velocità media di 1,5. Dovresti nominare e aggiungere la tua prima particella al sistema usando il seguente <span class="notranslate">GML</span> nello stesso <span class="notranslate">object</span> che hai usato per creare il sistema:</p>
      <p class="code">global.Particle1 = part_type_create();</p>
      <p class="dropspot">E per quelli di voi che usano <span class="notranslate">GML</span> Visual:</p>
      <p class="dropspot"><img>Nota che usando <span class="notranslate">GML</span> Visual spuntiamo anche l'opzione di <strong>fusione </strong>. Questo abilita il <strong>blending additivo</strong> per la particella, di cui parleremo un po' più avanti.</p>
      <p class="dropspot">Ora hai un sistema e una particella da inserire, ma non sei ancora pronto per creare i tuoi effetti eccezionali! Devi ancora definire le proprietà della particella, cioè: come appare - la sua velocità, la sua rotazione, il suo alpha ecc. Ci sono un sacco di dettagli che possono essere utilizzati per definire un effetto particella, quindi qui sotto c'è una panoramica delle impostazioni più importanti e poi uno snippet di codice e <span class="notranslate">GML</span> Visual che li utilizza tutti:</p>
      <ul class="dropspotlist">
        <li class="dropspot"><strong>shape</strong>: La forma della particella è il costruito in <span class="notranslate">sprite</span> che userà, con il default che è la costante <span class="inline">pt_shape_pixel</span>. C'è anche una funzione per aggiungere una particella personalizzata se necessario - <a href="../GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_sprite.htm"><span class="inline">part_type_sprite()</span></a> - o l'azione <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Particles/Set_Particle_Sprite.htm">Set Particle Sprite</a>.</li>
        <li class="dropspot"><strong>dimensione</strong>: Imposta i parametri di dimensione per il tipo di particella. Si specifica la dimensione minima di partenza, la dimensione massima di partenza e l'aumento della dimensione in ogni passo (usa un numero negativo per una diminuzione della dimensione). Questo è un valore scalare che modificherà equamente la scala x/y dell'immagine di base.</li>
        <li class="dropspot"><strong>colore</strong>: Imposta il colore della particella se viene usato un solo colore. Se vengono forniti due o tre colori, questo sarà la miscela di colori, che si mescolerà da uno all'altro nel corso della sua vita.</li>
        <li class="dropspot"><strong>alfa</strong>: Imposta il valore alfa della particella tra 0 e 1. Se viene passato un solo valore, questo sarà l'alfa della particella, se vengono passati due o tre valori, allora l'alfa si mescolerà tra questi durante la vita della particella.</li>
        <li class="dropspot"><strong>speed</strong>: Imposta le proprietà di velocità per il tipo di particella. Tu specifichi una velocità minima e massima e un valore casuale tra i limiti dati viene scelto quando la particella viene creata. Puoi indicare un aumento di velocità ad ogni passo, e anche usare un numero negativo per rallentare la particella (la velocità non diventerà mai inferiore a 0).</li>
        <li class="dropspot"><strong>direzione</strong>: Imposta le proprietà di direzione per il tipo di particella. Anche in questo caso specifichi un intervallo di direzioni (in gradi antiorari - 0 indica un movimento verso destra, 90 indica un movimento verso l'alto, ecc...). Per esempio, per far muovere la particella in una direzione casuale sceglierai come valori un minimo di 0 e un massimo di 360. Puoi anche specificare un aumento di direzione per ogni passo (può anche essere negativo).</li>
        <li class="dropspot"><strong>orientamento</strong>: Imposta le proprietà dell'angolo di orientamento per il tipo di particella. Si specifica l'angolo minimo, l'angolo massimo e l'aumento di ogni passo. Puoi anche indicare se l'angolo dato deve essere relativo alla direzione corrente del movimento o assoluto, ad esempio: impostando tutti i valori a 0 ma relativo a true, l'orientamento della particella seguirà esattamente il <span class="notranslate">path</span> della particella.</li>
        <li class="dropspot"><strong>miscelazione</strong>: Imposta se utilizzare il blending <strong>additivo </strong>o il blending <strong>normale </strong>per il tipo di particella. Questo è impostato in una funzione quando si usa <span class="notranslate">GML</span> e come parte dell'inizializzazione delle particelle quando si usa <span class="notranslate">GML</span> Visual. Il blending additivo significa che le particelle useranno la modalità di fusione <span class="inline">bm_add</span>, dando loro un aspetto &quot;incandescente&quot; dove si sovrappongono, e anche fondendole con qualsiasi cosa disegnata sotto (<span class="notranslate">sprites</span>, sfondi, <span class="notranslate">tiles</span>, ecc...) - molto utile per il fuoco e gli effetti magici (per esempio), ma meglio lasciar perdere per qualcosa come il fumo. Sperimenta per vedere le differenze! Si noti che l'abilitazione di questo interromperà il batching di <span class="notranslate">texture</span> quando le particelle vengono create, e quindi saranno necessari più batch per passo per disegnarle - qualcosa da considerare in quanto può influenzare le prestazioni, specialmente su mobile.</li>
        <li class="dropspot"><strong>vita</strong>: Imposta i limiti di vita, in passi (frame di gioco) per il tipo di particella. Come le impostazioni precedenti, questo ha un valore minimo e massimo e le particelle dureranno un numero casuale di passi entro questi valori. Così, una durata di 30 min e 30 max avrà la particella esistente per esattamente 30 passi, ma una durata di 20 min e 60 max avrà ogni particella esistente per un numero casuale di passi tra 20 e 60.</li>
      </ul>
      <p class="dropspot">Ora, prima di presentarvi il codice per definire la particella, parliamo un attimo di &quot;<strong>wiggle</strong>&quot;... Che ci crediate o no, &quot;wiggle&quot; è una proprietà della particella e può essere impostata individualmente per molte delle impostazioni di cui sopra. Quando vedi &quot;wiggle&quot; come argomento per una funzione o azione della particella, significa che se metti un numero tra 1 e 20 la particella &quot;ondeggerà&quot; o fluttuerà tra i valori minimi e massimi per la proprietà, con 1 che è un ondeggiamento lento e 20 che è molto veloce. Quindi una velocità della particella minima di 2 e massima di 5 con un wiggle di 20 oscillerà molto rapidamente tra le velocità minime e massime per la durata della vita di ogni particella creata.</p>
      <p class="note"><strong>NOTA</strong>: Ci sono anche altre proprietà minori delle particelle che non copriamo qui, solo per mantenere le cose il più semplice possibile per iniziare. Vedi le pagine appropriate per i dettagli completi delle proprietà delle particelle.</p>
      <p class="dropspot">Guardiamo ora un po' di codice che definisce una particella:</p>
      <p class="code">// This defines the particle&#39;s shape
        <br/>
        part_type_shape(global.Particle1,pt_shape_pixel);
        <br/>
        <br/>
        // This is for the size
        <br/>
        part_type_size(global.Particle1,1,1,0,2);
        <br/>
        <br/>
        // This sets its colour. There are three different codes for this
        <br/>
        part_type_color1(global.Particle1,c_white);
        <br/>
        <br/>
        // This is its alpha. There are three different codes for this
        <br/>
        part_type_alpha1(global.Particle1,1);
        <br/>
        <br/>
        // The particles speed
        <br/>
        part_type_speed(global.Particle1,0.50,2,-0.10,0);
        <br/>
        <br/>
        // The direction
        <br/>
        part_type_direction(global.Particle1,0,359,0,20);
        <br/>
        <br/>
        // This changes the rotation of the particle
        <br/>
        part_type_orientation(global.Particle1,0,0,0,0,true);
        <br/>
        <br/>
        // This is the blend mode, either additive or normal
        <br/>
        part_type_blend(global.Particle1,1);
        <br/>
        <br/>
        // This is its lifespan in steps
        <br/>
        part_type_life(global.Particle1,5,30); </p>
      <p class="dropspot">Per creare questa stessa definizione di particelle in <span class="notranslate">GML</span> Visual avremmo bisogno di queste azioni:</p>
      <p class="dropspot"><img>Quindi questo è tutto! Ora abbiamo definito le nostre particelle e sono pronte per essere utilizzate.</p>
      <p class="dropspot"> </p>
    </div>
    <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">Creare particelle direttamente nel gioco</a></p>
    <div class="droptext" data-targetname="drop-down2">
      <p class="dropspot">Ci sono un paio di modi per creare particelle, e ognuno ha i suoi pro e contro. Puoi usare <strong>gli emettitori</strong> per <strong>far scoppiare </strong>o <strong>far scorrere le </strong>particelle, oppure puoi creare particelle <strong>direttamente </strong>in un punto. Quale dei due usi dipende davvero da cosa stai cercando di ottenere e dall'effetto che vuoi creare, ma inizieremo con il più semplice dei due, ovvero creare le particelle direttamente. In <span class="notranslate">GML</span> useremo la seguente funzione:</p>
      <p class="code">part_particles_create(global.P_System, x, y, global.Particle1, 10);</p>
      <p class="dropspot">e in <span class="notranslate">GML</span> Visual sarebbe:</p>
      <p class="dropspot"><img>Quel singolo codice/azione qui sopra creerà 10 particelle alle coordinate x/y date del tipo &quot;Particle1&quot; dal nostro sistema globale. Semplice! La cosa bella di questa linea di codice/azione è che può essere usata ovunque senza alcun problema. Per esempio, se la mettete nell'evento <strong>Global Left Pressed</strong> per il mouse in un <span class="notranslate">object</span> e cambiate i valori x/y per la posizione mouse_x/y, creerà particelle nella posizione del mouse ogni volta che premete il pulsante. O se hai un razzo, allora potresti mettere questo nell'evento di passo e avere particelle di fumo che arrivano ad ogni passo (anche se 1 o 2 sarebbero probabilmente meglio di 10!). Puoi anche fargli creare particelle su un'area cambiando le coordinate x/y in modo casuale, per esempio:</p>
      <p class="code">repeat(50)
        <br/>
        {
        <br/>
        var xx = x + 20 - random(40);
        <br/>
        var yy = y + 20 - random(40);
        <br/>
        part_particles_create(global.P_System, xx, yy, global.Particle1, 1);
        <br/>
        }</p>
      <p class="dropspot"><img>Il codice qui sopra creerà 50 particelle in una posizione casuale all'interno di un'area quadrata di 40px.</p>
      <p class="dropspot"> </p>
    </div>
    <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">Creare particelle con gli emettitori</a></p>
    <div class="droptext" data-targetname="drop-down3">
      <p class="dropspot">Dato che abbiamo spiegato il modo semplice di creare le particelle, passiamo ora al modo leggermente più complesso, che è quello di utilizzare gli <strong>emettitori</strong>. Gli emettitori sono un'altra parte del sistema di particelle che deve essere definita prima di essere utilizzata, quindi faremo un emettitore globale come abbiamo fatto per il sistema e le particelle. Dobbiamo anche decidere se avere un emettitore statico (non in movimento) o meno e se vogliamo <strong>far scoppiare </strong>o <strong>far scorrere </strong>le particelle, così come decidere su quale area e che tipo di distribuzione vogliamo che l'emettitore usi.</p>
      <p class="dropspot">Cosa significa tutto ciò? Bene, un emettitore <strong>statico </strong>è uno che puoi definire una volta e dimenticartene, poiché non si muoverà da nessuna parte per tutta la durata del gioco, cioè: pensa a un fuoco di legna - non si muove, emette solo fiamme e quindi è statico, ma una palla di fuoco richiederebbe un emettitore <strong>dinamico</strong> e si muoverà attraverso lo schermo. Per quanto riguarda lo scoppio o lo streaming, uno scoppio è un'esplosione una tantum di particelle, mentre uno stream è proprio questo - un flusso costante di particelle ad ogni passo. Per l'area e la distribuzione, con gli emettitori puoi definire un'area per l'emissione di particelle (che può essere un rettangolo, un'ellisse, un diamante o una linea) così come la curva di distribuzione (gaussiana, gaussiana inversa o lineare).</p>
      <p class="dropspot">Le seguenti immagini illustrano i diversi tipi di forma dell'area disponibili per gli emettitori:</p>
      <p class="dropspot"> </p>
      <center><img alt="Create Particle System" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_CreateSystem.png"/> <img alt="Create Particle Type" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Create_Type.png"/></center>
      <center><img alt="Define Particle Type" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Define_Particle.png"/> <img alt="Create Particles At A Position" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Burst.png"/></center>
      <p class="dropspot">
        <br>
        E le curve di distribuzione (lineare, gaussiana e gaussiana inversa) sono illustrate qui:</p>
      <p><img alt="Create Particles Over A Random Area" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Create_Particles.png"/></p>
      <p class="dropspot">Di seguito è riportato un esempio del codice/azioni necessarie per definire due emettitori, che normalmente andrebbero nell'<strong>evento Create</strong> di un controller <span class="notranslate">object</span>, subito dopo aver definito il sistema di particelle. Uno sarà statico e farà scorrere le particelle sull'area dell'intero <span class="notranslate">room</span>, mentre l'altro sarà dinamico e seguirà il mouse e scoppierà ogni 30 passi da una piccola ellisse:</p>
      <p> </p>
      <p class="code">global.Particle1_Emitter1 = part_emitter_create(global.P_System);
        <br/>
        global.Particle1_Emitter2 = part_emitter_create(global.P_System);
        <br/>
        <br/>
        // Set up the area that will emit particles
        <br/>
        part_emitter_region(global.P_System, global.Particle1_Emitter1, 0, room_width, 0, room_height, ps_shape_rectangle, ps_distr_linear);
        <br/>
        part_emitter_region(global.P_System, global.Particle1_Emitter2, mouse_x-10, mouse_x+10, mouse_y-10, mouse_y+10, ps_shape_ellipse, ps_distr_gaussian);
        <br/>
        <br/>
        // Set the first to stream 10 particles every step
        <br/>
        part_emitter_stream(global.P_System, global.Particle1_Emitter1, global.Particle1, 10);
        <br/>
        <br/>
        // This can now be forgotten as it will function until told to stop...
        <br/>
        // Set the alarm[0] event to burst the emitter2 particles...
        <br/>
        alarm[0] = 30; </p>
      <p class="dropspot"><img>Quindi, qui stiamo creando due emettitori di particelle che sono assegnati al sistema di particelle che abbiamo creato all'inizio. Le funzioni/azioni per creare questi emettitori ci permettono di definire un'area in <span class="notranslate">room</span> sulla quale emetteranno particelle, così come dare il tipo di particella da emettere e la forma e la distribuzione da usare all'interno dell'area definita. Le funzioni/azioni restituiranno un valore numerico, che è il valore ID dell'emettitore, e lo memorizziamo in una variabile in modo da poter utilizzare ulteriori funzioni di emettitore per indirizzare quegli emettitori.</p>
      <p class="dropspot">Ora abbiamo codice/GML Visual per lo streaming delle particelle (queste particelle saranno emesse ad ogni passo di gioco senza che noi dobbiamo fare altro), ma vogliamo anche aggiungere un <strong>evento</strong><strong>Alarm[0]</strong> per far scoppiare le particelle ad intervalli specifici:</p>
      <p class="code">part_emitter_region(global.P_System, global.Particle1_Emitter2, mouse_x - 10, mouse_x + 10, mouse_y - 10, mouse_y + 10, ps_shape_ellipse, ps_distr_gaussian);
        <br/>
        part_emitter_burst(global.P_System, global.Particle1_Emitter2, global.Particle1, 30);
        <br/>
        alarm[0] = 30;</p>
      <p class="dropspot"><img>Un particle burst è semplicemente un'esplosione una tantum di particelle dall'emettitore, piuttosto che un flusso costante di esse ad ogni passo di gioco.</p>
      <p class="dropspot">Ma cosa succede se volete che diversi <span class="notranslate">objects</span> emettano particelle? Un emettitore globale può essere solo in un posto alla volta, quindi dovresti creare emettitori <em>locali </em>in ogni <span class="notranslate">object</span>. Questi emettitori useranno ancora il sistema globale di particelle e tutte le particelle che si trovano al suo interno, ma possono avere forme e dimensioni diverse e muoversi con il <span class="notranslate">object</span>, rendendoli ideali per razzi o proiettili o cose del genere. Il codice che usereste è esattamente lo stesso di sopra, ma senza il prefisso &quot;global&quot; prima dei nomi degli emettitori.</p>
      <p class="dropspot">Questa è la creazione di particelle trattata, ma c'è un'altra cosa molto importante... La pulizia quando hai finito con loro.</p>
      <p class="dropspot"> </p>
    </div>
    <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">Pulizia</a></p>
    <div class="droptext" data-targetname="drop-down4">
      <p class="dropspot">Come accennato all'inizio, una volta creato, un sistema di particelle (e le sue particelle, emettitori ecc...) vengono memorizzati per un uso immediato. Ottimo, ma cosa succede quando si riavvia il gioco? O se il tuo giocatore muore e ricomincia il <span class="notranslate">room</span>? Beh, se non si gestisce bene il gioco si ottiene una <strong>perdita di memoria</strong>. Questo è quando qualcosa è stato creato e usa la memoria, ma è stato &quot;de-referenziato&quot;, il che significa che <span class="notranslate">GameMaker</span> non ha più accesso ad esso. Questo tipo di cosa consumerà lentamente la memoria e causerà lag nel vostro gioco o addirittura bloccherà il computer causando il crash del gioco, ed è un problema abbastanza comune con chi usa per la prima volta i sistemi di particelle.</p>
      <p class="dropspot">Come si evita questo? Bene, <span data-keyref="GameMaker Name">GameMaker</span> ha <span class="notranslate">GML</span> Code functions e <span class="notranslate">GML</span> Visual actions per cancellare i sistemi di particelle e i loro emettitori e particelle dalla memoria quando non sono in uso, e con un po' di pianificazione quando si usa il seguente codice/azioni, si può facilmente prevenire questo potenziale problema.</p>
      <p class="dropspot">La prima cosa che dovete fare è decidere dove creerete il sistema e come lo userete. Potreste creare un sistema globale nell'<strong>evento di inizio gioco</strong> di un <span class="notranslate">object</span> che si trova nel vostro primo <span class="notranslate">room</span> (come un menu o una schermata del titolo), ma questo significa che se riavviate il gioco usando la funzione <a href="../GameMaker_Language/GML_Reference/General_Game_Control/game_restart.htm"><span class="inline">game_restart()</span></a> sarà ricreato e causerà una perdita di memoria. Oppure si potrebbe creare un sistema locale in un'istanza in qualsiasi <span class="notranslate">room</span>, ma di nuovo, se si lascia il <span class="notranslate">room</span> allora il sistema sarà inaccessibile e causerà una perdita di memoria. Per evitare questo dovreste avere qualcosa del genere nel file <a href="../The_Asset_Editors/Object_Properties/Other_Events.htm"><strong>Evento di fine gioco</strong></a> o nel file <a href="../The_Asset_Editors/Object_Properties/Object_Events.htm"><strong>Evento di pulizia</strong></a> del vostro oggetto:</p>
      <p class="code">part_type_destroy(global.Particle1);
        <br/>
        part_emitter_destroy(global.P_System, global.Particle1_Emitter);
        <br/>
        part_emitter_destroy(global.P_System, global.Particle2_Emitter);
        <br/>
        part_system_destroy(global.P_System);</p>
      <p class="dropspot"><img>Questo rimuoverà le particelle definite, gli emettitori e quindi il sistema dalla memoria, pronto per voi per riavviare il gioco o cambiare <span class="notranslate">room</span>. Ricorda solo che dopo aver pensato a dove sarebbe il posto più adatto per creare il sistema, pensa anche a dove sarebbe il posto più adatto per distruggere il sistema!</p>
      <p class="dropspot"> </p>
    </div>
    <p> </p>
    <p>Ora conoscete le basi delle particelle, dei sistemi di particelle e degli emettitori, quindi ora potete aggiungerli nel vostro gioco! Ma prima di precipitarsi ad aggiungere effetti particellari a tutto, si prega di notare che mentre le particelle sono meno affamate di CPU rispetto alle istanze, non sono la soluzione a tutto in quanto causeranno lag se ne avete migliaia alla volta. La cosa migliore da fare è sperimentare e usarli con attenzione per &quot;rimpolpare&quot; visivamente un gioco e dargli un po' più di visuale senza esagerare.</p>
    <p> </p>
    <p> </p>
    <div class="footer">
      <div class="buttons">
        <div class="clear">
          <div style="float:left">Indietro: <a href="Additional_Information.htm">Informazioni aggiuntive</a></div>
          <div style="float:right">Prossimo: <a href="Guide_To_Using_Shaders.htm">Guida all'uso degli shader</a></div>
        </div>
      </div>
      <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tutti i diritti riservati</span></h5>
    </div>
    <!-- KEYWORDS
Vectors
Vector Maths
--><!-- TAGS
vector_maths
--></body>
</html>