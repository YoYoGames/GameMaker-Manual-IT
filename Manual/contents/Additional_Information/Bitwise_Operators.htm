<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Operatori bitwise</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how bitwise operators work" />
  <meta name="rh-index-keywords" content="Bitwise Operators" />
  <meta name="search-keywords" content="bitwise,bitwise operators" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Operatori bitwise e binari</h1>
  <p>All'inizio dell'era dei computer, il <strong>binario</strong> e l'<strong>esadecimale</strong> erano uno stile di vita, probabilmente perché i linguaggi di alto livello (come il BASIC) erano semplicemente troppo lenti da eseguire. Per esempio, moltiplicare 32 x 32 avrebbe potuto richiedere vari cicli di CPU per ottenere usando il BASIC, ma con il binario è fatto come una singola operazione in un solo ciclo di CPU.</p>
  <p>Al giorno d'oggi, tuttavia, con la potenza di un PC anche di base, non dovete più preoccuparvi di questo e potete fare le cose nel &quot;modo lungo&quot;, poiché la velocità della macchina e la sua costruzione più complessa della CPU compenseranno qualsiasi difetto di questo approccio. Questa è una grande notizia, naturalmente, poiché significa che non dovrete più ottimizzare ogni linea di codice che scrivete, ma se questo è il caso - dovreste davvero preoccuparvi del binario?</p>
  <p>La risposta è decisamente &quot;sì, dovresti&quot;. Mentre è vero che si possono ancora ottenere alcuni aumenti di velocità - e a volte questi possono essere significativi - l'uso del binario e dell'esadecimale porta ad una migliore comprensione di come opera la CPU e può anche portare a scrivere codice migliore, essere in grado di confezionare meglio i dati, e rendere alcuni compiti molto più semplici. Questa pagina spiegherà un po' cos'è il binario e come può essere usato quando si fanno i giochi.</p>
  <p>Quindi guardiamo prima la teoria binaria più elementare - come vengono creati i numeri. Date un'occhiata a questa tabella:</p>
  <p class="code">000 = 0<br />
    001 = 1<br />
    010 = 2<br />
    100 = 4</p>
  <p>Ogni 1 o 0 rappresenta un singolo <a class="glossterm" data-glossterm="bit" href="#">bit</a> di dati, e come puoi vedere questo significa che in binario, 10 è uguale a 2! Ogni bit è 2 volte il valore precedente con il primo bit che è uguale a 1. Quindi bit 2 = 2, bit 3 = 4, bit 4 = 8 e così via (come mostrato sotto in questa tabella di <a class="glossterm" data-glossterm="byte" href="#">byte</a> ):</p>
  <p class="code">00000001 = 1<br />
    00000010 = 2<br />
    00000100 = 4<br />
    00001000 = 8<br />
    00010000 = 16<br />
    00100000 = 32<br />
    01000000 = 64<br />
    10000000 = 128</p>
  <p>Questo va bene se vuoi numeri che sono una potenza di 2, ma come facciamo a creare numeri più complessi? Beh, un singolo numero binario può memorizzare solo uno 0 o un 1, e questo è tutto, quindi per i numeri più complessi abbiamo bisogno di aggiungere bit insieme. Se per esempio volessimo fare 6, aggiungeremmo 4 e 2 insieme in questo modo.</p>
  <p class="code">00000010 = 2<br />
    00000100 = 4<br />
    00000110 = 6</p>
  <p>Questo è vero per <strong>tutti i </strong>numeri <strong>binari </strong>e per come il computer compone internamente qualsiasi numero. Prendiamo un numero leggermente più complicato come ulteriore esempio: 23. Il numero 23 è in realtà composto da <span class="inline">1+2+4+16</span> o <span class="inline">00010111</span>. Che ne dite di un esempio molto più complesso: 196? Bene, questo è fatto da <span class="inline">128+64+4</span> o <span class="inline">11000100</span>. Quindi in realtà non è così complesso!</p>
  <p>Se iniziamo a fare valori al di fuori della gamma di un byte (che può memorizzare numeri da 0 a 255), comincia a diventare un po' più difficile da tracciare, comunque. Per esempio, 217.361 è <span class="inline">110101000100010001</span> in binario. Oppure, <span class="inline">1+16+256+etc...</span> Le regole sono le stesse indipendentemente dal valore espresso - ogni numero è creato sommando più bit.</p>
  <p>Ora, come possiamo eseguire operazioni matematiche su questi valori? Diciamo che vuoi memorizzare <span class="inline">true</span> o <span class="inline">false</span> come valore. Di solito i compilatori useranno un <span class="inline">INT</span> (un <span class="inline">INT</span> è di solito definito come un numero firmato a 32 bit - firmato significa solo che può essere un valore positivo o negativo, mentre non firmato significa che può essere solo positivo) e poi semplicemente assegnarlo a <span class="inline">0</span> o <span class="inline">1</span>. Avendo solo 2 stati, un valore <span class="inline">true</span> / <span class="inline">false</span> è ideale da memorizzare in un bit, e se lo facessimo potremmo memorizzare 32 bit <span class="inline">true</span> / <span class="inline">false</span> per ogni <span class="inline">INT</span> piuttosto che uno solo, poiché un <span class="inline">INT</span> è composto da 32 bit.</p>
  <p>Come potremmo farlo? Beh, abbastanza facilmente, a quanto pare:</p>
  <p class="code">flags = flags | 1;</p>
  <p>L'operatore &quot;<span class="inline">|</span>&quot; è un bitwise <span class="inline">OR</span>, e questo significa che l'istruzione precedente <span class="inline">ORs</span> 1 nel valore tenuto nella variabile <span class="inline">flags</span>. Se vi ricordate da prima, usando un 1 si imposta il primo bit. Se volessimo impostare il secondo bit, faremmo così:</p>
  <p class="code">flags = flags | 2;</p>
  <p>Noi <span class="inline">OR</span> in 2, perché il modello di bit <span class="inline">00000010</span> è uguale a 2. Quindi cosa fa esattamente l'operatore binario <span class="inline">OR</span>? Beh, fonde tutti i bit insieme in un unico valore, come questo:</p>
  <p class="code">010110100 // Value 1<br />
    110011001 // value 2<br />
    110111101 // Value 1 OR Value 2</p>
  <p>Ecco la cosiddetta <a class="glossterm" data-glossterm="tabella della verità" href="#">tabella di verità</a> per l'operatore OR:</p>
  <p class="code">00 | 00 = 00<br />
    00 | 01 = 01<br />
    01 | 01 = 01<br />
    01 | 00 = 01</p>
  <p>Quindi dove c'è un valore con 2 zeri, rimarrà zero. Il vantaggio di usare bit come questo come <span class="inline">true</span>/<span class="inline">false</span> stato, è che puoi impostare diversi bit come &quot;bandiere&quot; in una sola operazione, qualcosa che semplicemente non potresti fare con un normale valore booleano. Per esempio, diciamo che il bit 1 è un flag &quot;attivo&quot;, e il bit 3 è un flag &quot;visibile&quot;. Potremmo impostarli entrambi facendo così:</p>
  <p class="code">flags = flags | 5<span class="inline"></span>;</p>
  <p>Questo perché 5 è <span class="inline">00000101</span> in binario, e seguendo la regola sopra, la variabile &quot;flags&quot; otterrà entrambi questi 2 bit fusi con i suoi. Quindi, anche se il bit 1 era già impostato, l'operazione funziona ancora e anche il bit 3 sarà ora impostato.</p>
  <p>E la cancellazione dei flag? Beh, è qui che entra in gioco l'operazione bitwise &quot;<span class="inline">&amp;</span>&quot; <span class="inline">AND</span>. Quando <span class="inline">AND</span> qualcosa, i bit che sono impostati nella maschera vengono mantenuti, mentre i bit che sono cancellati nella maschera, vengono rimossi - in questo modo:</p>
  <p class="code">01110010101 // Value 1<br />
    00110000100 // Value 2<br />
    00110000100 // Value 1 AND value 2</p>
  <p>Come potete vedere, dove c'è un 1 in ogni valore, l'1 viene mantenuto, e dove c'è un mix di 0 e 1 questi vengono resettati a 0. Ecco la tabella della verità per <span class="inline">AND</span>ing:</p>
  <p class="code">00 &amp; 00 = 00<br />
    01 &amp; 00 = 00<br />
    00 &amp; 01 = 00<br />
    01 &amp; 01 = 01</p>
  <p>Quindi, solo quando c'è un bit in ogni posto sarà mantenuto. Ciò significa che, così come siete in grado di impostare più flag contemporaneamente, potete anche cancellare più flag contemporaneamente. Per esempio, prendiamo il caso precedente, ma questa volta cancelliamoli. Vogliamo cancellare i bit 1 e 3 (dandoci il valore 5), ma ricordando la tabella di verità sopra, quello che vogliamo fare è mantenere tutti gli altri bit e cancellare i bit 1 e 3. Questo sarebbe una &quot;maschera&quot; binaria di 1111111111111111111111111111111010 (32bits). Questa maschera mantiene tutti i bit attualmente impostati, ma cancella i due bit che vogliamo effettivamente cancellare. Quindi se avessi un valore di 1000111011 e volessi cancellare i bit 1 e 3 usando la maschera di cui sopra, finirebbe così...</p>
  <p class="code">00000000000000000000001000111011 // Value<br />
    11111111111111111111111111111010 // Mask<br />
    00000000000000000000001000111010 // Value AND Mask</p>
  <p>Questo è fantastico, ma se dovessimo risolverlo ogni volta che abbiamo bisogno di cancellare le bandiere, diventerebbe noioso. Ciò di cui abbiamo bisogno è un modo per cambiare facilmente i bit (e preferibilmente senza costi per la CPU). Fortunatamente c'è un modo semplice per farlo usando l'operatore &quot; <span class="inline">~</span>&quot; <span class="inline">NOT</span>.</p>
  <p>L'operatore <span class="inline">NOT</span> è proprio quello che dice - <em>non</em> quei bit. Ecco una tabella di verità per <span class="inline">NOT</span>.</p>
  <p class="code">~00 = 11<br />
    ~01 = 10<br />
    ~10 = 01<br />
    ~11 = 00</p>
  <p>Questo operatore rende la rimozione dei flag molto semplice, e meglio ancora, di solito è un'ottimizzazione a tempo di compilazione che significa che se state usando un numero costante (cioè non una variabile) allora il compilatore invertirà i bit automaticamente per voi. Prendete questa dichiarazione dove vogliamo cancellare di nuovo i bit 1 e 3:</p>
  <p class="code">a = a &amp; ~5;</p>
  <p>Questo in realtà si riduce a solo &quot;<span class="inline">a &amp; 11111111111111111111111111111010</span>&quot;. Questo rende la vita abbastanza semplice in termini di cancellazione delle bandiere.</p>
  <p>L'ultimo operatore che vogliamo guardare è &quot;<span class="inline">^</span>&quot; <span class="inline">EOR</span> (<span class="inline">Exclusive OR</span>, a volte chiamato <span class="inline">XOR</span>), questo operatore inverte i bit impostati in entrambi i valori. Ecco la tabella di verità di <span class="inline">EOR</span>:</p>
  <p class="code">0 ^ 0 = 0<br />
    0 ^ 1 = 1<br />
    1 ^ 0 = 1<br />
    1 ^ 1 = 0</p>
  <p>Questo è curioso, ma incredibilmente utile. Per esempio, diciamo che vogliamo un contatore che conti semplicemente da 0 a 1 e di nuovo a 0 (alternando tra 0 e 1), potremmo aggiungere uno e fare un <span class="inline">IF</span> per vedere se è arrivato a 2, e poi resettarlo di nuovo a 1. Oppure...potremmo aggiungere 1 e poi <span class="inline">AND</span> con 1 (dato che <span class="inline">01+01 = 10</span>, e <span class="inline">10 &amp; 01 = 0</span>) o possiamo fare così:</p>
  <p class="code">a = a ^ 1;</p>
  <p>Ciò che questo fa la prima volta che viene eseguito è <span class="inline">0 ^ 1 = 1</span>, poi la seconda volta <span class="inline">1 ^ 1 = 0</span>, quindi alterna le cose avanti e indietro da 0 a 1.</p>
  <p>Quindi - <span class="inline">OR</span> (<span class="inline">|</span>), <span class="inline">AND</span>(<span class="inline">&amp;</span>), <span class="inline">NOT</span>(<span class="inline">~</span>) e <span class="inline">EOR</span>(<span class="inline">^</span>) ci permettono di manipolare i bit con relativa facilità, consentendoci, al livello più semplice, di controllare più bit contemporaneamente. Possiamo ovviamente usare queste operazioni per altre cose quando sviluppiamo i nostri giochi, come mascherare <span class="notranslate">sprites</span>, fare operazioni intere <span class="inline">MOD</span> (usando <span class="inline">AND</span>) o fare bei contatori in loop.</p>
  <p>Quindi, possiamo fare semplicemente operazioni bitwise, ma guardiamo le cose più complesse, a partire dalla domanda: come fa un computer ad aggiungere? Guardiamo un esempio molto semplice: <span class="inline">1+1</span>.</p>
  <p class="code">00000001<br />
    00000001<br />
    00000010</p>
  <p>Proprio come le addizioni normali, aggiungiamo i numeri insieme e poi debordiamo nella colonna successiva, ma a differenza di una normale addizione decimale, possiamo solo andare da 0 a 1, non da 0 a 9. Quindi aggiungendo un <span class="inline">1+1</span> significa che tracimiamo in <span class="inline">10</span>. Vediamo quindi un esempio più complesso.</p>
  <p class="code">01011011 = 91<br />
    00101101 = 45<br />
    10001000 = 136</p>
  <p>È ovviamente più difficile da vedere qui, ma gli overflow si increspano finché non ci sono più numeri uno in una colonna. Vale la pena notare che i computer possono solo aggiungere (o sottrarre, moltiplicare o dividere) 2 numeri alla volta. Prendete <span class="inline">19 + 19 + 19</span>. Essendo umani, possiamo aggiungere tutti i 9 insieme, portare il 2 e poi continuare! Ma i computer non possono farlo - quello che possono fare è questo:<span class="inline"> (19 + 19) + 19</span>. Quindi faranno ogni calcolo in blocchi di 2.</p>
  <p>I calcoli binari che sono di maggior interesse per noi programmatori sono la moltiplicazione e la divisione. I computer moltiplicano solo in 2, e per fare di più dividono un numero, e poi sommano tutti i risultati. Facciamo prima alcuni esempi molto semplici. <span class="inline">4 * 2 = 8</span>. Ora per moltiplicare per 2 in binario, <em>spostiamo </em>tutti i bit a SINISTRA di uno. In questo modo:</p>
  <p class="code">00000100 * 2 = 00001000 = 8</p>
  <p>Tutti i bit in questo caso si sono spostati a sinistra di uno, facendolo passare dal 3° bit al 4°, e cambiando il valore da 4 a 8. Che ne dite di un numero più grande?</p>
  <p class="code">101 = 01100101 * 2 = 11001010 = 202</p>
  <p>Di nuovo, tutti i bit si spostano di uno, e questo moltiplica per 2. Allora, che ne dite di un multiplo di 4? Facile, spostiamo tutto a sinistra di 2, invece che di uno. Quindi che ne dite di 16, o 128? Questo richiederebbe uno spostamento a sinistra di 4 bit, o 7 bit rispettivamente. Questo è incredibilmente utile; significa che possiamo fare semplici moltiplicazioni semplicemente spostando i bit. Per fare questo, usiamo l'operatore di <strong>spostamento a sinistra</strong> <span class="inline">&lt;&lt;</span>. Ecco alcuni esempi:</p>
  <p class="code">00000001 &lt;&lt; 1 = 000000010 = 2<br />
    00000001 &lt;&lt; 2 = 000000100 = 4<br />
    00000001 &lt;&lt; 3 = 000001000 = 8<br />
    00000001 &lt;&lt; 4 = 000010000 = 16<br />
    00000001 &lt;&lt; 5 = 000100000 = 32<br />
    00000001 &lt;&lt; 6 = 001000000 = 64<br />
    00000001 &lt;&lt; 7 = 010000000 = 128<br />
    00000001 &lt;&lt; 8 = 100000000 = 256</p>
  <p>Ora, oltre ad essere molto utile per moltiplicazioni veloci/semplici, è anche molto utile per impostare bit specifici, senza dover capire il valore del bit. Diciamo che vogliamo impostare il bit 27, che numero è? (67108864 a proposito!), bene, possiamo usare la sintassi di cui sopra per impostare facilmente dei flag come questo:</p>
  <p class="code">a = a | (1 &lt;&lt; 27)</p>
  <p>Ok... quindi in realtà questo sarebbe il bit 26 nel modo in cui abbiamo descritto le cose finora (dato che i bit iniziano da uno), ma in realtà... i bit iniziano dal bit 0, e vanno verso l'alto, non dal bit 1. Quindi, mentre ci sono 32 bit in un INTEGER, i bit vanno da 0 a 31, non da 1 a 32. Questo è in realtà piuttosto utile, dato che ora possiamo impostare delle costanti per i numeri di bit.</p>
  <p>Quindi diciamo che il bit 27 è un flag attivo e il bit 0 è un flag di esplosione. Come possiamo impostarli entrambi?</p>
  <p class="code">ACTIVE = 27;<br />
    BOOM = 0;<br />
    A = A | (1 &lt;&lt; ACTIVE) | (1 &lt;&lt; BOOM);</p>
  <p>Questo può sembrare un sacco di codice, ma se questi numeri sono costanti, il compilatore precompilerà queste operazioni in un unico valore in modo che ci ritroviamo con questo come codice effettivo.</p>
  <p class="code">A = A | 13421772;</p>
  <p>Cancellare questi bit (come abbiamo visto sopra) è semplicemente una questione di usare il modificatore NOT, come questo:</p>
  <p class="code">A = A &amp; ~((1 &lt;&lt; ACTIVE) | (1 &lt;&lt; BOOM));</p>
  <p>Quindi questo ci permette felicemente di impostare e cancellare qualsiasi bit che vogliamo, e ci permette anche di comprimere le strutture dati in modo massiccio. Comprimere le strutture dati è una buona cosa, perché se usate meno memoria, avrete meno <span class="notranslate">cache</span> miss e il vostro codice sarà più veloce. Mettiamola così, cos'è più veloce, copiare 32Mb di dati o 4Mb? Beh, abbastanza chiaramente 4 lo è. Quindi se potete impacchettare tutti i vostri flag in un singolo accesso alla memoria, questo è un bene!</p>
  <p>Ora, diamo una rapida occhiata a come si fa la divisione, e perché sarà così utile. La divisione viene fatta spostando i bit <em>a destra</em> usando l'operatore di <strong>spostamento a destra</strong> <span class="inline">&gt;&gt;</span>. Prendiamo un semplice numero - 64 - e dividiamolo per 32:</p>
  <p class="code">64 / 32 = 01000000 &gt;&gt; 5 = 00000010</p>
  <p>Quindi lì si sposta il singolo bit verso il basso di 5 (che è il numero di spostamenti necessari per 32 - guarda sopra), che ci dà 2. Ma cosa succede se ci sono altri bit? Beh, diamo un'occhiata:</p>
  <p class="code">68 / 32 = 01000100 &gt;&gt; 5 = 00000010</p>
  <p>Ecco qua.... È esattamente la stessa cosa. I bit che spostiamo verso il basso sono semplicemente persi. Questo è davvero utile, perché quando si divide per difetto, se abbiamo bisogno del resto, c'è un modo ancora più semplice per ottenerlo, al quale arriveremo tra un momento. Ma prima, facciamo un esempio pratico. Ho una posizione X e Y, e voglio ottenere la cella della griglia in cui questa cade, dove la griglia ha dimensioni 32x32. Questo metodo permette di memorizzare <span class="notranslate">objects</span>, collisioni, bandiere - ogni sorta di cose, e accedervi molto rapidamente. Quindi eccoci qui:</p>
  <p class="code">var X_index = x &gt;&gt; 5;<br />
    var Y_index = y &gt;&gt; 5;<br />
    cell_data = mygrid[# X_index,Y_index];</p>
  <p>E se volessimo il resto? Forse questo resto è usato come una specie di flag di ordine o qualcosa del genere. Qualunque sia la ragione, ottenere un resto è semplice come fare un <span class="inline">AND</span>:</p>
  <p class="code">var remainder = x &amp; 31<br />
    var X_Index = x &gt;&gt; 5;</p>
  <p>Ora, avrete notato che abbiamo usato più linee di codice qui (come spesso accade), ma si tratta comunque solo di un paio di istruzioni molto veloci. Ma perché il 31? Beh, dato che il bit 5 è 32, allora tutti i bit sottostanti sarebbero 31, e questo è il massimo resto, quindi è quello con cui abbiamo <span class="inline">AND</span> (potremmo anche usare <span class="inline">(1 &lt;&lt; 5) - 1</span> che farebbe <span class="inline">32 - 1 = 31</span>). Ora, se dovessi fare questo senza capire il binario, sarebbe come questo:</p>
  <p class="code">var r = x mod 32;<br />
    var X_Index = floor(x / 32);</p>
  <p>Allora perché questo è molto peggio? Beh, per dividere per 32, dobbiamo eseguire una divisione in virgola mobile - che ovviamente richiede tempo, ma per fare il <span class="inline">mod 32</span>, bisogna effettivamente farne un altro! Se lo stessimo facendo in assembler, in realtà otterremmo ENTRAMBI i valori in una sola divisione, ma questo non si ottiene nei linguaggi di alto livello (beh... non molto spesso), e quindi si deve fare tutto il lavoro due volte. Questo si aggiunge, specialmente se stai facendo un <span class="notranslate">loop</span> stretto con molti calcoli come questo. Le divisioni di interi che utilizzano lo spostamento di bit come mostrato sopra aiutano davvero ad ottimizzare il vostro gioco.</p>
  <p>Poiché questo può essere un concetto abbastanza complesso da afferrare e poi applicare a situazioni di programmazione del mondo reale, potete trovare qui sotto una serie di brevi esempi che potrebbero essere applicati a qualsiasi gioco fatto con <span data-keyref="GameMaker Name">GameMaker</span>.</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Allineamento delle piastrelle</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">Gli sviluppatori di<span data-keyref="GameMaker Name">GameMaker</span> spesso usano la funzione <span class="inline">place_free()</span>, e poi, quando viene trovata una collisione, cercano di spostare lentamente il <span class="notranslate">object</span> verso l'esterno o facendo un loop intorno ad una posizione <span class="inline">x</span> o <span class="inline">y</span> continuando ad eseguire quella funzione, o usando la funzione <span class="inline">move_outside_all()</span>.</p>
    <p class="dropspot">Quindi, qual è il modo più veloce per farlo? Bene, se usiamo una corretta potenza di 2 <span class="notranslate">tiles</span>, allora abbiamo un metodo molto semplice che è anche molto veloce. Se ci stiamo muovendo verso destra, e ci siamo spostati in un blocco di collisione, allora come sappiamo tutto è allineato a 32, quindi abbiamo bisogno di allineare anche il <span class="notranslate">sprite</span> ad un confine di 32 pixel - preferibilmente quello a sinistra - così il <span class="notranslate">sprite</span> è spostato FUORI dalla collisione. Questo è davvero facile, conoscendo le regole che abbiamo usato sopra per ottenere il resto, e sapendo come ottenere l'inverso dei bit, possiamo semplicemente fare questo:</p>
    <p class="code">x = x &amp; ~31;</p>
    <p class="dropspot">Esatto, questo è TUTTO ciò che serve per allinearsi a un limite di 32 pixel. Cambiando il 31 possiamo allinearci a qualsiasi cosa ci piaccia - purché sia una potenza di 2. (Questo è l'equivalente di dividere per 32, poi moltiplicare per 32, rimuovendo così i bit inferiori).</p>
    <p class="dropspot">Se volessimo allineare a destra, allora faremmo quanto sopra, ma poi aggiungeremmo 32 per spostarlo nel prossimo <span class="notranslate">tile</span>. Semplice. Tutto questo rende l'intero codice di collisione monumentalmente più veloce, e vi permette di spendere il tempo della CPU dove ne avete veramente bisogno.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Chiavi e porte</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Diciamo che avete un livello con alcune porte e una chiave per ciascuna. Come si può facilmente contrassegnare una chiave per una porta specifica? Beh, normalmente assegnereste semplicemente un ID alla chiave e alla porta. E se si volesse una chiave per aprire 2 o 3 porte? Facile. Si usa una MASCHERA. La porta avrebbe un singolo bit assegnato in questo modo:<br>
       </p>
    <p class="code">door_id = 1; // 0001</p>
    <p class="dropspot">Gli altri sarebbero qualcosa come:<br>
       </p>
    <p class="code">door_id=2; // 0010<br />
      door_id=4; // 0100<br />
      door_id=8; // 1000<br />
      etc...</p>
    <p class="dropspot">Se volessimo che la chiave aprisse le porte 1 e 3, allora la chiave avrebbe il valore MASK di 5 (che è 101 in binario). Se eseguiamo un <span class="inline">AND</span> di questo, ed esce &quot;non zero&quot;, allora sappiamo che la chiave può aprire la porta. Si potrebbero anche avere chiavi che non aprono nulla avendo una MASK di 0. Vedere il codice qui sotto per il controllo effettivo:</p>
    <p class="code">if ((key_id &amp; door_id) ! = 0)<br />
      {<br />
          opendoor();<br />
      }</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">Contatori in loop</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot">Diciamo che vogliamo un semplice contatore di animazione, che vada da 0 a 15 (dato che abbiamo 16 fotogrammi di animazione). Normalmente si farebbe un incremento, e poi un controllo <span class="inline">if</span> per avvolgere il numero, ma per questo esempio usiamo l'operatore <span class="inline">AND(&amp;)</span>:</p>
    <p class="code">counter = (counter + 1) &amp; 15;</p>
    <p class="dropspot">Poiché 16 è una potenza di 2, possiamo ridurre quel numero di 1 e usarlo come maschera, che possiamo poi usare per avvolgere il valore del nostro contatore. Se il contatore passa da 15 a 16, finiamo con lo schema di bit <span class="inline">10000</span>, e se <span class="inline">AND</span> che con 15 (schema di bit <span class="inline">01111</span>) finiamo con <span class="inline">00000</span> (semplicemente zero). Questo significa che il codice di cui sopra è utile per avvolgere valori entro l'intervallo di una potenza di 2.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">Controllo del potere di 2</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot">E se volessi controllare se qualcosa è una potenza di 2? Bene, ecco un piccolo trucco pulito. Questo restituirà <span class="inline">true</span> se il valore dato è una potenza di 2:</p>
    <p class="code">function is_pow2(_val)<br />
      {<br />
          return _val &amp; (_val - 1)) == 0;<br />
      }</p>
    <p class="dropspot">Quindi se avessimo il numero 51 (<span class="inline">110011</span>) cosa fa questo? Bene, otteniamo questo... <span class="inline">110011 &amp; 110010</span>, che ovviamente ci lascia con <span class="inline">false</span>, dato che ci sono molti bit rimasti dopo <span class="inline">AND</span>. Se avessimo 64 (<span class="inline">1000000</span>), allora diventa questo... <span class="inline">1000000 &amp; 0111111</span> che <em>ci</em> lascia 0, quindi è <span class="inline">true</span>.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">Allineamento dell'indice</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot">Ecco un po' di codice veloce per allineare a potenza di 2 numeri. (1,2,4,8,16 e così via). Questo può essere molto utile per l'allocazione della memoria, o per assicurarsi di scrivere i dati ai confini corretti. In questo esempio, <span class="inline">_val1</span> deve essere allineato a <span class="inline">_val2</span> byte, dove <span class="inline">_val2</span> è una potenza di 2 numeri. Questa piccola funzione arrotonda per eccesso al prossimo limite del numero desiderato.</p>
    <p class="code">function align_pow2(_val1, _val2)<br />
      {<br />
          return _val1 + (_val2 - 1)) &amp; ~(_val2 - 1);<br />
      }</p>
    <p class="dropspot"> </p>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Indietro: <a href="Additional_Information.htm">Informazioni aggiuntive</a></div>
        <div style="float:right">Prossimo: <a href="Type_Tables.htm">Tabelle dei tipi</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tutti i diritti riservati</span></h5>
  </div>
  <!-- KEYWORDS
Bitwise Operators
-->
  <!-- TAGS
bitwise_operators
-->
</body>
</html>