<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Guida all'uso dei buffer</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how buffers work" />
  <meta name="rh-index-keywords" content="Guide To Using Buffers" />
  <meta name="search-keywords" content="Using Buffers,buffers" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Guida all'uso dei buffer</h1>
  <p>Un <span class="notranslate">buffer</span> (in programmazione) è fondamentalmente uno spazio all'interno della memoria di sistema che viene utilizzato per memorizzare piccoli pacchetti di dati per qualsiasi cosa (per esempio: trasferimento dati, collisioni, dati di colore ecc...). Dato che si trova nella memoria di sistema, l'accesso è molto veloce, e un <span class="notranslate">buffer</span> viene generalmente utilizzato per la memorizzazione a brevissimo termine, come la ricezione di informazioni di rete prima di elaborarle, o per memorizzare un checkpoint nel vostro gioco (questo è spiegato nell'esempio riportato più in basso nella pagina).</p>
  <p><img>I buffer vengono creati allocando uno spazio nella memoria di sistema, calcolato in <a class="glossterm" data-glossterm="byte" href="#">byte</a> <span class="glossextra">s</span>, che è poi riservato al vostro gioco finché il gioco è in esecuzione o finché non cancellate il <span class="notranslate">buffer</span> usando l'apposita funzione (potete trovare tutte le funzioni di <span class="notranslate">GML</span> <span class="notranslate">buffer</span> elencate <a href="../GameMaker_Language/GML_Reference/Buffers/Buffers.htm">qui</a>). Questo significa che anche quando il vostro gioco non è a fuoco (per esempio, su un dispositivo mobile quando prendete una chiamata il gioco sarà messo in background) il <span class="notranslate">buffer</span> esisterà ancora, tuttavia se il gioco viene chiuso o riavviato il <span class="notranslate">buffer</span> sarà perso.</p>
  <p class="note"><strong>NOTA</strong>: Riavviare il gioco non cancellerà o eliminerà il sito <span class="notranslate">buffer</span>! Ma impedirà qualsiasi ulteriore accesso al <span class="notranslate">buffer</span> creato in precedenza, poiché l'handle dell'ID sarà stato perso, causando una perdita di memoria che alla fine farà crashare il gioco. Quindi, quando riavviate il gioco, ricordatevi di cancellare prima qualsiasi <span class="notranslate">buffers</span>.</p>
  <p><span data-keyref="GameMaker Name">GameMaker</span> permette la creazione di quattro diversi tipi di <span class="notranslate">buffer</span>. La ragione di questo è che <span class="notranslate">buffers</span> è progettato per essere un mezzo di memorizzazione temporanea altamente ottimizzato, e come tale si dovrebbe creare un <span class="notranslate">buffer</span> che sia appropriato al tipo di dati che si desidera memorizzare, altrimenti si potrebbero avere errori o causare un collo di bottiglia nel vostro codice. Prima di spiegare ulteriormente questo, diamo un'occhiata ai quattro tipi di <span class="notranslate">buffer</span> disponibili (definiti come <strong>costanti </strong>in <span class="notranslate">GML</span>):</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Costante</th>
        <th>descrizione</th>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_fixed</span></td>
        <td><br>
          Un <span class="notranslate">buffer</span> di una dimensione fissa in byte. La dimensione è impostata quando viene creato <span class="notranslate">buffer</span> e non può essere cambiata di nuovo.</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_grow</span></td>
        <td><br>
          Un <span class="notranslate">buffer</span> che <i>crescerà</i> dinamicamente man mano che i dati vengono aggiunti. Lo si crea con una dimensione iniziale (che dovrebbe essere un'approssimazione della dimensione dei dati che ci si aspetta di memorizzare), e poi si espanderà per accettare ulteriori dati che superano questa dimensione iniziale.</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_wrap</span></td>
        <td><br>
          Un <span class="notranslate">buffer</span> dove i dati <i>si avvolgeranno</i>. Quando i dati aggiunti raggiungono il limite della dimensione di <span class="notranslate">buffer</span>, la sovrascrittura sarà rimessa all'inizio di <span class="notranslate">buffer</span>, e la scrittura continuerà da quel punto.</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_fast</span></td>
        <td><br>
          Questo è uno speciale &quot;stripped down&quot; <span class="notranslate">buffer</span> che è estremamente veloce da leggere/scrivere. Tuttavia può essere usato solo con <span class="inline"><span class="inline">buffer_u8</span> <span class="notranslate">data types</span>, e deve essere allineato a 1 byte. (Informazioni sui <b>tipi di dati</b> e sull'<b>allineamento dei byte</b> possono essere trovate più in basso in questa pagina).</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>Questi sono i tipi di <span class="notranslate">buffer</span> disponibili per voi quando usate <span data-keyref="GameMaker Name">GameMaker</span>, e quale scegliete dipenderà molto dall'uso che volete farne. Per esempio, un <span class="notranslate">buffer</span> grow verrebbe usato per memorizzare un'&quot;istantanea&quot; di dati per creare un gioco di salvataggio, dato che non si conosce la quantità effettiva di dati che vi verranno inseriti, o un <span class="notranslate">buffer</span> veloce verrebbe usato quando si sa che i valori con cui si sta lavorando sono tutti compresi tra 0 e 255 o -128 e 127, per esempio quando si elaborano i dati <a class="glossterm" data-glossterm="ARGB" href="#">ARGB</a> da un'immagine.</p>
  <p><img>Quando si crea un <span class="notranslate">buffer</span>, si dovrebbe sempre cercare di crearlo con una dimensione appropriata al tipo, con la regola generale che dovrebbe essere creato per ospitare la dimensione massima dei dati che deve memorizzare, e in caso di dubbio, usare una crescita <span class="notranslate">buffer</span> per evitare errori di sovrascrittura.</p>
  <p>Il codice attuale per creare un <span class="notranslate">buffer</span> sarebbe qualcosa di simile a questo:</p>
  <p class="code">player_buffer = buffer_create(16384, buffer_fixed, 2);</p>
  <p><br>
    Questo creerebbe un <span class="notranslate">buffer</span> fisso di 16384 byte e allineato a 2, con la funzione che restituisce un valore ID unico che viene memorizzato in una variabile per un successivo riferimento a questo <span class="notranslate">buffer</span>.</p>
  <p>Quando leggete e scrivete dati su <span class="notranslate">buffer</span>, lo fate in &quot;pezzi&quot; di dati definiti dal loro &quot;tipo di dati&quot;. Il &quot;tipo di dati&quot; stabilisce il numero di byte allocati all'interno di <span class="notranslate">buffer</span> per il valore che viene scritto, ed è essenziale che lo facciate correttamente altrimenti otterrete dei risultati molto strani (o addirittura errori) per il vostro codice.</p>
  <p>I buffer vengono scritti (e letti da) in <strong>modo sequenziale</strong>, nel senso che un pezzo di dati viene scritto dopo l'altro, e ogni pezzo di dati è di un tipo stabilito. Questo significa che dovreste idealmente essere consapevoli di quali dati state scrivendo su <span class="notranslate">buffer</span> in ogni momento. Questi <span class="notranslate">data types</span> sono definiti in <span class="notranslate">GML</span> dalle seguenti costanti:</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Tipo di dati Costante</th>
        <th>Bytes</th>
        <th>Descrizione</th>
      </tr>
      <tr>
        <td><span class="inline">buffer_u8</span></td>
        <td>1</td>
        <td><br>
          Un intero senza segno a 8 bit. È un valore positivo da 0 a 255.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_s8</span></td>
        <td>1</td>
        <td><br>
          Un intero a 8 bit con segno. Può essere un valore positivo o negativo da -128 a 127 (0 è classificato come positivo).</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_u16</span></td>
        <td>2</td>
        <td><br>
          Un intero a 16 bit senza segno. È un valore positivo da 0 a 65.535.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_s16</span></td>
        <td>2</td>
        <td><br>
          Un intero a 16 bit con segno. Può essere un valore positivo o negativo da -32.768 a 32.767 (0 è classificato come positivo).</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_f16</span></td>
        <td>2</td>
        <td><br>
          Un numero in virgola mobile a 16 bit. Questo può essere un valore positivo o negativo nell'intervallo di +/- 65504. <b>(Attualmente non supportato!)</b></td>
      </tr>
      <tr>
        <td><span class="inline">buffer_u32</span></td>
        <td>4</td>
        <td><br>
          Un intero senza segno a 32 bit. È un valore positivo da 0 a 4.294.967.295.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_s32</span></td>
        <td>4</td>
        <td><br>
          Un intero a 32 bit con segno. Può essere un valore positivo o negativo da -2.147.483.648 a 2.147.483.647 (0 è classificato come positivo).</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_f32</span></td>
        <td>4</td>
        <td><br>
          Un numero in virgola mobile a 32 bit. Può essere un valore positivo o negativo nell'intervallo di +/-16777216.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_u64</span></td>
        <td>8</td>
        <td><br>
          Un valore intero senza segno a 64bit.<b>(Attualmente non supportato da tutte le funzioni di <span class="notranslate">buffer</span>!)</b></td>
      </tr>
      <tr>
        <td><span class="inline">buffer_f64</span></td>
        <td>8</td>
        <td><br>
          Un numero in virgola mobile a 64 bit.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_bool</span></td>
        <td>1</td>
        <td><br>
          Un valore booleano. Può essere solo 1 o 0 (<span class="inline">true</span> o <span class="inline">false</span>)</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_string</span></td>
        <td>N/A</td>
        <td><br>
          Questo è un UTF-8 null terminated (0x00) <span class="notranslate">string</span>. Fondamentalmente un <span class="notranslate">GameMaker</span> <span class="notranslate">string</span> viene scaricato nel <span class="notranslate">buffer</span>, e uno 0 viene messo alla fine.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>Quindi, diciamo che avete creato un <span class="notranslate">buffer</span> e volete scriverci delle informazioni, allora usereste qualcosa come il seguente codice:</p>
  <p class="code">buffer_write(buff, buffer_bool, global.Sound);<br />
    buffer_write(buff, buffer_bool, global.Music);<br />
    buffer_write(buff, buffer_s16, obj_Player.x);<br />
    buffer_write(buff, buffer_s16, obj_Player.y);<br />
    buffer_write(buff, buffer_string, global.Player_Name);</p>
  <p>Guardando l'esempio sopra potete vedere che potete scrivere diversi tipi di dati su un <span class="notranslate">buffer</span> allo stesso tempo (siete solo limitati a uno specifico <span class="notranslate">data type</span> quando usate il tipo di buffer <em>veloce </em>), e questi dati saranno aggiunti nel <span class="notranslate">buffer</span> in modo sequenziale (anche se la loro posizione effettiva nel <span class="notranslate">buffer</span> dipenderà dal suo allineamento dei byte, spiegato sotto). Questo vale anche per la lettura di informazioni da <span class="notranslate">buffer</span>, e nel caso dell'esempio dato sopra, leggereste da <span class="notranslate">buffer</span> nello stesso ordine in cui avete scritto i dati, controllando lo stesso <span class="notranslate">data type</span>, ad es:</p>
  <p class="code">global.Sound = buffer_read(buff, buffer_bool);<br />
    global.Music = buffer_read(buff, buffer_bool);<br />
    obj_Player.x = buffer_read(buff, buffer_s16);<br />
    obj_Player.y = buffer_read(buff, buffer_s16);<br />
    global.Player_Name = buffer_read(buff, buffer_string);</p>
  <p>Come potete vedere, leggete le informazioni nello stesso ordine in cui le leggete in <span class="notranslate">buffer</span>. Per ulteriori informazioni su come aggiungere e rimuovere dati da <span class="notranslate">buffer</span> vedete gli esempi riportati qui sotto.</p>
  <p>Se avete letto questa pagina, avrete visto riferimenti all'<strong>allineamento dei byte </strong>di un <span class="notranslate">buffer</span>. Questo si riferisce fondamentalmente alla posizione in cui i nuovi dati vengono memorizzati all'interno di un dato <span class="notranslate">buffer</span>. Come funziona? Bene, per un <span class="notranslate">buffer</span> allineato a un singolo byte, ogni pezzo di dati viene scritto nel <span class="notranslate">buffer</span> in modo sequenziale, con ogni nuovo pezzo di dati che viene aggiunto direttamente dopo il precedente. Tuttavia un <span class="notranslate">buffer</span> allineato a 2 byte scriverà ogni pezzo di dati a intervalli di 2 byte, così che anche se la vostra scrittura iniziale è di 1 byte di dati, la scrittura successiva sarà spostata per allinearsi a due byte:</p>
  <p><img>Così, se il vostro allineamento dei byte è impostato su, diciamo, 4 byte e scrivete un singolo pezzo di dati che è 1 byte di dimensione poi fate un <span class="notranslate">buffer</span> <strong>tell </strong>(un tell ottiene la posizione corrente per la lettura/scrittura per il <span class="notranslate">buffer</span>), otterrete un <strong>offset </strong>di 1 byte (l'offset in questo caso è il numero di byte dall'inizio del <span class="notranslate">buffer</span> alla posizione corrente di lettura/scrittura).</p>
  <p>Tuttavia, se scrivete un altro pezzo di dati, anch'esso di 1 byte, <em>poi </em>fate un <span class="notranslate">buffer</span> tell, otterrete un offset di 5 byte (anche se avete scritto solo 2 byte di dati) poiché l'allineamento ha imbottito i dati per allinearli con l'allineamento di 4 byte <span class="notranslate">buffer</span>.</p>
  <p>Fondamentalmente, ciò significa che l'allineamento influenzerà solo <em>dove </em>le cose vengono scritte, quindi se fate un <span class="notranslate">buffer</span> tell dopo aver scritto qualcosa, restituirà la posizione corrente di scrittura che segue immediatamente i dati che avete scritto in precedenza. Notate, tuttavia, che se poi scrivete un altro pezzo di dati, internamente <span class="notranslate">buffer</span> sposterà la posizione di scrittura al prossimo multiplo della dimensione dell'allineamento prima di scrivere effettivamente il pezzo di dati.</p>
  <p>Di seguito abbiamo un paio di esempi di come usare <span class="notranslate">buffers</span> in un progetto:</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Punto di controllo del buffer</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">Un semplice esempio di come un <span class="notranslate">buffer</span> può essere utilizzato in qualsiasi gioco <span data-keyref="GameMaker Name">GameMaker</span> per qualsiasi piattaforma, è la funzione <a href="../GameMaker_Language/GML_Reference/General_Game_Control/game_save_buffer.htm"><span class="inline">game_save_buffer()</span></a>. Questa funzione prenderà un'&quot;istantanea&quot; dello stato corrente del gioco e la salverà in un <span class="notranslate">buffer</span> predefinito, che può poi essere letto per caricare nuovamente il gioco in quel punto.</p>
    <p class="note"><strong>NOTA</strong>: Questa funzione è molto limitata ed è progettata per i principianti per ottenere un sistema di checkpoint attivo e funzionante rapidamente, ma gli utenti più avanzati potrebbero preferire codificare il proprio sistema utilizzando le funzioni File, a causa del fatto che il gioco non salverà nessuna delle risorse dinamiche che si possono creare a run-time come strutture dati, superfici, aggiunte <span class="notranslate">sprites</span>, ecc.</p>
    <p class="dropspot">La prima cosa che dobbiamo fare è creare un nuovo <span class="notranslate">object</span> per controllare il salvataggio e il caricamento, quindi dovreste crearne uno e dargli un <strong>evento Create</strong>. In questo evento, potreste inserire il seguente codice:</p>
    <p class="code">SaveBuffer = buffer_create(1024, buffer_grow, 1);<br />
      StateSaved = false;</p>
    <p class="dropspot">La prima linea crea un grow <span class="notranslate">buffer</span> (dato che non conosciamo la dimensione finale dei dati salvati) di 1024 byte e allineato a 1 byte. Viene poi creata una variabile per controllare e vedere se il gioco è stato salvato o no (questa sarà usata per il caricamento).</p>
    <p class="dropspot">Poi aggiungeremmo un <strong>evento Keypress</strong> (per esempio) in cui salveremo lo stato attuale del gioco nel buffer creato:</p>
    <p class="code">StateSaved = true;<br />
      buffer_seek(SaveBuffer, buffer_seek_start, 0);<br />
      game_save_buffer(SaveBuffer);</p>
    <p class="dropspot">Quanto sopra imposterà prima la variabile di controllo su <span class="inline">true </span>(in modo che questa venga salvata quando salviamo il gioco su <span class="notranslate">buffer</span>) e poi cercherà l'inizio di <span class="notranslate">buffer</span> prima di scriverci lo stato di salvataggio attuale. Perché usiamo <a href="../GameMaker_Language/GML_Reference/Buffers/buffer_seek.htm"><span class="inline">buffer_seek()</span></a>? Beh, come già detto in questa pagina, si legge e si scrive su un <span class="notranslate">buffer</span> dall'ultima posizione in cui i dati sono stati aggiunti. Questo significa che se non si imposta il tell <span class="notranslate">buffer</span> all'inizio, quando si salva si aggiungono i dati in <span class="notranslate">buffer</span> nella posizione corrente di lettura/scrittura di <span class="notranslate">buffer</span>. Quindi, usiamo la funzione <span class="inline">buffer_seek()</span> per spostare il tell all'inizio di <span class="notranslate">buffer</span>.</p>
    <p class="dropspot">Ora abbiamo salvato lo stato attuale del gioco in un <span class="notranslate">buffer</span>. Il prossimo passo sarebbe quello di codificare come caricarlo, probabilmente in un altro <strong>evento Keypress</strong>:</p>
    <p class="code">if StateSaved<br />
      {<br />
          buffer_seek(SaveBuffer, buffer_seek_start, 0);<br />
          game_load_buffer(SaveBuffer);<br />
      }</p>
    <p class="dropspot">Il gioco sarà quindi caricato alla fine dell'evento in cui si inserisce il codice di cui sopra.</p>
    <p class="note"><strong>NOTA</strong>: Questo è solo per l'uso nello stesso <span class="notranslate">room</span>, e non per generare giochi salvati completi per dopo che il gioco è stato chiuso o riavviato!</p>
    <p class="dropspot">L'ultima cosa da aggiungere al controller <span class="notranslate">object</span> è un po' di codice di &quot;pulizia&quot;. <span class="notranslate">Buffers</span> sono memorizzati in memoria e come tali se non si puliscono quando si è finito con loro, si possono avere perdite di memoria che alla fine causeranno lag e crash del gioco. Quindi probabilmente dovreste aggiungere un <strong>evento di fine stanza</strong> (dalla categoria <strong>Altri</strong> eventi) con:</p>
    <p class="code">buffer_delete(SaveBuffer);</p>
    <p class="dropspot">Questo <span class="notranslate">object</span> può ora essere inserito in un <span class="notranslate">room</span> e con la pressione di un tasto salvare e caricare lo stato <span class="notranslate">room</span> da un <span class="notranslate">buffer</span>.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Buffer di rete</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Quando si lavora con le <a href="../GameMaker_Language/GML_Reference/Networking/Networking.htm">funzioni di rete</a> di <span data-keyref="GameMaker Name">GameMaker</span>, si deve usare <span class="notranslate">buffers</span> per creare il pacchetto di dati che viene inviato sulla connessione di rete. Questo esempio intende mostrare come questo viene fatto, ma a causa della portata delle possibilità di networking, è stato progettato solo per mostrare come utilizzare <span class="notranslate">buffers</span> stesso, e non il sistema di networking completo.</p>
    <p class="dropspot">La prima cosa che mostreremo è la creazione e l'uso di un <span class="notranslate">buffer</span> per il lato client della connessione di rete. Questo <span class="notranslate">buffer</span> sarà usato per creare piccoli pacchetti di dati che possono poi essere inviati a <span class="notranslate">server</span>, quindi nell'<strong>evento Create</strong> di un'istanza assegneremo un <span class="notranslate">buffer</span> come questo:</p>
    <p class="code">send_buff = buffer_create(256, buffer_grow, 1);</p>
    <p class="dropspot">Rendiamo il <span class="notranslate">buffer</span> piccolo (256 byte) - dato che non è destinato a contenere grandi quantità di dati - poi lo facciamo crescere <span class="notranslate">buffer</span> per assicurare che non ci siano errori nel caso in cui dovessimo aggiungere altri dati da inviare in qualsiasi momento, e l'allineamento è impostato a uno per comodità.</p>
    <p class="dropspot">Ora, diciamo che vogliamo che il nostro client invii dati a <span class="notranslate">server</span>. Per questo abbiamo bisogno di creare un &quot;pacchetto&quot; <span class="notranslate">buffer</span>, e in questo esempio invieremo un <strong>evento di pressione dei tasti</strong>, come quando il giocatore preme la <em>freccia sinistra </em>per muoversi nel gioco. Per fare questo scriviamo prima i dati necessari a <span class="notranslate">buffer</span> e poi li inviamo:</p>
    <p class="code">buffer_seek(buff, buffer_seek_start, 0);<br />
      buffer_write(buff, buffer_u8, 1);<br />
      buffer_write(buff, buffer_s16, vk_left);<br />
      buffer_write(buff, buffer_bool, true);<br />
      network_send_packet(client, buff, buffer_tell(buff));</p>
    <p class="dropspot">Prima di scrivere su <span class="notranslate">buffer</span> abbiamo impostato il &quot;tell&quot; all'inizio di <span class="notranslate">buffer</span> poiché la rete prende sempre i dati dall'inizio di un <span class="notranslate">buffer</span>. Poi scriviamo il valore di controllo (questo sarà usato da <span class="notranslate">server</span> per determinare il tipo di evento da elaborare), poi il tasto usato, e poi lo stato del tasto (in questo caso true per premuto). Questo <span class="notranslate">buffer</span> viene poi inviato come pacchetto di dati dalla funzione di rete. Notate che non inviamo l'intero <span class="notranslate">buffer</span>! Inviamo solo i dati scritti, usando la funzione buffer_tell per restituire l'attuale posizione di lettura/scrittura di <span class="notranslate">buffer</span> (ricordate che la scrittura su <span class="notranslate">buffer</span> sposta il &quot;tell&quot; alla fine di ciò che è stato scritto). Questo è semplicemente per evitare di inviare più byte del necessario.</p>
    <p class="dropspot">E per quanto riguarda la ricezione dei dati su <span class="notranslate">server</span>? Il pacchetto di dati ricevuto deve essere scritto in <span class="notranslate">buffer</span> su <span class="notranslate">server</span> e poi usato per aggiornare il gioco. Per questo useremmo il <a href="../The_Asset_Editors/Object_Properties/Async_Events.htm">Networking Asynchronous Event</a> nel controller di rete <span class="notranslate">object</span> del <span class="notranslate">server</span>, come mostra questo codice semplificato qui sotto:</p>
    <p class="code">var buff = ds_map_find_value(async_load, &quot;buffer&quot;);<br />
      if (cmd == buffer_read(buff, buffer_u8)) <br />
      {<br />
          key = buffer_read(buff, buffer_s16);<br />
          key_state = buffer_read(buff, buffer_bool);<br />
      }</p>
    <p class="dropspot">L'evento asincrono conterrà una speciale mappa DS temporanea <span class="inline">async_load</span> (viene rimossa dalla memoria alla fine dell'evento automaticamente) che contiene informazioni diverse a seconda del tipo di dati in arrivo dalla rete. In questo caso, assumiamo che la mappa sia stata controllata e che sia un pacchetto di dati <span class="notranslate">buffer</span> inviato da un client. Ora controlliamo il primo pezzo di dati che si trova in <span class="notranslate">buffer</span> per vedere che tipo di evento è stato inviato - in questo caso il valore &quot;1&quot; rappresenta un evento chiave, tuttavia quando si codificano queste cose si dovrebbero definire delle costanti per contenere questi valori per semplificare le cose - e poi memorizzare il tasto premuto e il suo stato (<span class="inline">true</span> = premuto, <span class="inline">false</span> = rilasciato). Questa informazione verrebbe poi usata per aggiornare tutti i client con il nuovo stato del giocatore client che invia.</p>
    <p class="note"><strong>NOTA</strong>: Il <span class="notranslate">buffer</span> che viene creato dalla mappa DS viene automaticamente rimosso alla fine dell'evento asincrono di rete, quindi non c'è bisogno di usare <span class="inline" style="font-size: 14px">buffer_delete()</span> qui.</p>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Indietro: <a href="Additional_Information.htm">Informazioni aggiuntive</a></div>
        <div style="float:right">Prossimo: <a href="Bitwise_Operators.htm">Operatori Bitwise</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tutti i diritti riservati</span></h5>
  </div>
  <!-- KEYWORDS
Buffers
Using Buffers
-->
  <!-- TAGS
using_buffers
-->
</body>
</html>