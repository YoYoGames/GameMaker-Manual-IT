<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Guida ai primitivi e alla costruzione dei vertici</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how to set up and use primitives and vertex buffers" />
  <meta name="rh-index-keywords" content="Guide To Primitives And Vertex Building" />
  <meta name="search-keywords" content="primitive building,primitives,vertex,vertex buffers,vertex formats" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Guida ai primitivi e alla costruzione dei vertici</h1>
  <p>Questa guida copre brevemente come costruire e usare le <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm">primitive</a> usando <strong>formati vertex</strong> personalizzati e <strong>buffer vertex</strong>. </p>
  <p>In generale, quando si inizia a lavorare con il 3D, effetti speciali, processi di disegno complessi o <span class="notranslate">shaders</span> non c'è bisogno di preoccuparsi troppo del formato dei vertici utilizzato, poiché <span data-keyref="GameMaker Name">GameMaker</span> imposterà e passerà automaticamente i dati dei <a class="glossterm" data-glossterm="vertice" href="#">vertici</a> per voi. Tuttavia, a volte è necessario creare i propri dati dei vertici e formattarli in modo adeguato, soprattutto quando si ha bisogno di aumentare la velocità, o si desidera passare informazioni extra. Per esempio il formato standard dei vertici include una posizione x, y, z 3D, il colore (con alfa), e le coordinate UV <span class="notranslate">texture</span>, che, se li steste creando voi stessi, avrebbero un aspetto simile a questo:</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_textcoord();<br />
    my_format = vertex_format_end();</p>
  <p>Tuttavia, se state usando solo (per esempio) un <span class="notranslate">shader</span> per manipolare la posizione del vertice, allora non ci sarebbe bisogno di passare i dati del colore o <span class="notranslate">texture</span>. In questo caso creereste il vostro formato come segue:</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    my_format = vertex_format_end();</p>
  <p>In totale ci sono cinque diversi attributi di vertice che puoi usare quando definisci un formato di vertice:</p>
  <ul class="colour">
    <li>Colore</li>
    <li>Normale</li>
    <li>Posizione</li>
    <li>Posizione 3D</li>
    <li>Coordinata della texture</li>
  </ul>
  <p>In generale dovete <em>sempre</em> fornire la posizione o la posizione 3D come parte del formato, ma tutti gli altri sono opzionali.</p>
  <p>Dovreste notare che una volta che avete creato il vostro formato di vertice, l'ordine in cui avete definito gli attributi di vertice <i>deve essere onorato</i> quando costruite le vostre <strong>primitive</strong>. Quindi, se avete definito un formato di vertice come posizione, colore e coordinate <span class="notranslate">texture</span>, allora <b> <i>dovete</i></b> aggiungere questi attributi alla primitiva nello stesso ordine, altrimenti otterrete un errore. Notate anche che, come ogni altra risorsa dinamica, un formato vertex richiede memoria e quindi dovrebbe essere rimosso quando non è necessario usando la funzione<a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_delete.htm"><span class="inline">vertex_format_delete()</span></a>.</p>
  <p>Tutte le primitive che costruisci sono tenute in un <b>vertex buffer</b>. Questo deve essere creato in anticipo e poi referenziato dalle funzioni che vengono utilizzate per costruire la vostra primitiva. Il vertex <span class="notranslate">buffer</span> può essere riutilizzato quante volte necessario per creare diverse primitive, o può essere &quot;congelato&quot; per mantenere un tipo specifico di primitiva per la durata del vostro gioco o livello (che è l'approccio più veloce, quindi se sapete che una primitiva che costruite non cambierà allora dovreste sempre usare questa opzione).</p>
  <p>Un esempio di costruzione di una primitiva a triangolo singolo è mostrato nel codice seguente:</p>
  <p class="code">// CREATE EVENT<br />
    v_buff = vertex_create_buffer();<br />
    vertex_begin(v_buff, global.my_format);<br />
    vertex_position(v_buff, 10, 10);<br />
    vertex_colour(v_buff, c_white, 1);<br />
    vertex_texcoord(v_buff, 0, 0);<br />
    vertex_position(v_buff, 110, 10);<br />
    vertex_colour(v_buff, c_white, 1);<br />
    vertex_texcoord(v_buff, 1, 0);<br />
    vertex_position(v_buff, 110, 110);<br />
    vertex_colour(v_buff, c_white, 1);<br />
    vertex_texcoord(v_buff, 1, 1);<br />
    vertex_end(v_buff);<br />
    <br />
    // DRAW EVENT<br />
    var tex = sprite_get_texture(spr_Background, 0);<br />
    shader_set(shd_shimmer);<br />
    vertex_submit(v_buff, pr_trianglelist, tex);<br />
    shader_reset();
  </p>
  <p>Qui abbiamo prima creato il nostro vertice <span class="notranslate">buffer</span> nell'evento Create dell'istanza, poi iniziamo la definizione dei diversi vertici che compongono la nostra primitiva del triangolo, dando la posizione, il colore e la coordinata UV <span class="notranslate">texture</span> per ognuno dei tre punti che vogliamo usare. Terminiamo poi la definizione dei vertici, e sappiamo che il vertice <span class="notranslate">buffer</span> con questi dati dei vertici è memorizzato nella variabile &quot;v_buff&quot;.  </p>
  <p class="note"><strong>NOTA</strong>: se il contenuto di <span class="notranslate">buffer</span> deve essere aggiornato costantemente, <span class="notranslate">buffer</span> verrebbe creato, gli vertex data, e poi distrutto di nuovo - dopo che è stato disegnato - tutto nello stesso passo.</p>
  <p>Poi disegniamo il contenuto del vertice <span class="notranslate">buffer</span> nel Draw Event usando un <span class="notranslate">shader</span>. Questo è un esempio molto semplice, ed è fondamentalmente come <span data-keyref="GameMaker Name">GameMaker</span> funziona internamente, cioè: quando si disegna un <span class="notranslate">sprite</span>, <span class="notranslate">GameMaker</span> crea un vertice <span class="notranslate">buffer</span> con quattro vertici creando due triangoli (che fanno un quadrato, chiamato anche &quot;quad&quot;), e <span class="notranslate">textures</span> questi due triangoli con l'immagine <span class="notranslate">sprite</span>. Quando disegniamo questo <span class="notranslate">sprite</span>, presentiamo il vertice <span class="notranslate">buffer</span> e il suo contenuto viene disegnato sullo schermo.</p>
  <p>Noterete che quando presentiamo il vertice <span class="notranslate">buffer</span> per il disegno, forniamo un tipo di primitiva. Il tipo di primitiva che usate può essere un punto, una lista o striscia di linee, o una lista o striscia di triangoli, ma <i>non</i> vi è permesso ai fan dei triangoli poiché la maggior parte dell'hardware mobile non accetta quel tipo di primitiva. Non dimenticate di formattare il vostro vertice <span class="notranslate">buffer</span> correttamente per il tipo di primitiva che verrà utilizzata per disegnarlo. Per esempio, disegnare una primitiva a due triangoli come lista di triangoli richiede 6 punti, ma come striscia di triangoli richiede solo 4 punti. Quale tipo usiate dipende da voi e dipenderà da ciò che volete disegnare e dall'effetto che volete ottenere.</p>
  <p>Un ultimo punto importante da notare quando si usa il proprio vertex <span class="notranslate">buffers</span> in questo modo è come questo influisce sui batch di vertici che vengono inviati alla GPU. Quando si crea un vertex <span class="notranslate">buffer</span> si sta creando il livello più basso di dati grafici, quindi quando si disegna tutto ciò che accade è che <span data-keyref="GameMaker Name">GameMaker</span> invia il vostro <span class="notranslate">buffer</span> direttamente alla scheda grafica. A causa di questo, se si vuole un migliore batching, è necessario lavorarci da soli e memorizzare le cose che si vogliono batchare all'interno dello stesso <span class="notranslate">buffer</span>.</p>
  <p>Come abbiamo già detto sopra, i formati dei vertici sono costruiti usando insieme i seguenti 5 tipi di attributi (aggiunti tramite la funzione appropriata <span class="inline">vertex_format_add_*</span> ):</p>
  <ul class="colour">
    <li>Colore</li>
    <li>Normale</li>
    <li>Posizione</li>
    <li>Posizione 3D</li>
    <li>Coordinata della texture</li>
  </ul>
  <p>All'interno di GLSL ES <span class="notranslate">shader</span>, questi tipi sono riconosciuti utilizzando i seguenti 4 attributi:</p>
  <ul class="colour">
    <li>Colore</li>
    <li>Normale</li>
    <li>Posizione</li>
    <li>Coordinata della texture</li>
  </ul>
  <p>Ora, questo potrebbe sembrare strano perché sembra che possiamo specificare più tipi di attributi nel nostro formato di vertice che nel vertice <span class="notranslate">shader</span>. Tuttavia, in <span class="notranslate">shader</span> <i>Posizione</i> e <i>Posizione 3D</i> sono trattati come lo <em>stesso </em>attributo, eccetto che ci si aspetta che <i>Posizione</i> abbia solo coordinate &quot;x&quot; e &quot;y&quot; mentre <i>Posizione 3D</i> ha coordinate &quot;x&quot;, &quot;y&quot; e &quot;z&quot;. Quindi come si fa a mappare ciò che è nel formato dei vertici a come si definiscono gli attributi nel vostro <span class="notranslate">shader</span>? Iniziamo guardando un tipico set di attributi dello shader di default:</p>
  <p> </p>
  <p class="code">attribute vec3 in_Position;        // (x,y,z)<br />
    //attribute vec3 in_Normal;        // (x,y,z) unused in this shader.<br />
    attribute vec4 in_Colour;          // (r,g,b,a)<br />
    attribute vec2 in_TextureCoord;    // (u,v)</p>
  <p>Ed ecco un pezzo di codice che imposta un formato vertex compatibile con questo shader:</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_textcoord();<br />
    my_format = vertex_format_end();</p>
  <p>Ora, come fa l'attributo <span class="notranslate">shader</span> ad essere abbinato al tipo di formato del vertice? È solo basato sulla convenzione di denominazione:</p>
  <ul class="colour">
    <li><span class="inline">&quot;in_Position&quot;</span> mappe a <span class="inline"><a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_position.htm">vertex_format_add_position</a>/<a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_position_3d.htm">_3d()</a></span></li>
    <li><span class="inline">&quot;in_Colour&quot;</span> mappe a <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_colour.htm"><span class="inline">vertex_format_add_colour()</span></a></li>
    <li><span class="inline">&quot;in_TextureCoord&quot;</span> mappe a <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_texcoord.htm"><span class="inline">vertex_format_add_texcoord()</span></a></li>
  </ul>
  <p><span class="inline"><span class="inline"><span class="inline"></span> Ora, le cose diventano più complicate quando si hanno più attributi dello stesso tipo, ma le cose sono ancora basate sulla stessa convenzione di denominazione. Guarderemo ora la fornitura di <b>coordinate</b> aggiuntive di <b>colore</b> e <b>texture</b>, poiché ci può essere solo <b>un</b> attributo Position e <b>uno</b> Normal nel formato <span class="notranslate">shader</span> o vertex, ma ci <em>possono</em> essere più attributi di colore o <span class="notranslate">texture</span>.</p>
  <p>Quando si aggiungono ulteriori attributi di colore al proprio <span class="notranslate">shader</span>, è necessario aggiungere un numero alla fine dell'attributo <span class="notranslate">shader</span> per indicare a quale particolare voce del formato dei vertici l'attributo corrisponde. Ecco un esempio - prima il formato dei vertici:</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_textcoord();<br />
    my_format = vertex_format_end();</p>
  <p>E ora gli attributi associati <span class="notranslate">shader</span>:</p>
  <p class="code">attribute vec3 in_Position;      // (x,y,z)<br />
    attribute vec4 in_Colour0;       // (r,g,b,a)<br />
    attribute vec4 in_Colour1;       // (r,g,b,a)<br />
    attribute vec2 in_TextureCoord;  // (u,v)</p>
  <p>In questo caso <span class="inline">in_Colour0</span> mappa al primo <span class="inline">vertex_format_add_colour()</span> e <span class="inline">in_Colour1</span> mappa al secondo.</p>
  <p>Le coordinate della texture sono gestite in modo leggermente diverso dal colore. Fondamentalmente, tutto ciò che non è chiamato <span class="inline">in_Position</span>, <span class="inline">in_Normal</span> o uno degli attributi <span class="inline">in_Colour[0 ... ]</span> è trattato come una coordinata <span class="notranslate">texture</span>. L'ordine in cui sono definite, nella lista degli attributi in <span class="notranslate">shader</span>, è ciò che denota a quale attributo nel formato del vertice corrispondono. Vedi il seguente esempio <span class="notranslate">GML</span>:</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_textcoord();<br />
    vertex_format_add_textcoord();<br />
    vertex_format_add_textcoord();<br />
    my_format = vertex_format_end();</p>
  <p>E il codice <span class="notranslate">shader</span> sarebbe qualcosa del genere:</p>
  <p class="code">attribute vec3 in_Position;      // (x,y,z)<br />
    attribute vec4 in_Colour;        // (r,g,b,a)<br />
    attribute vec2 in_myTexcoord;    // (u,v)<br />
    attribute vec2 in_TextureCoord;  // (u,v)<br />
    attribute vec2 in_Something;     // (u,v)</p>
  <p>In questo esempio, <span class="inline">in_myTexcoord</span>, <span class="inline">in_TextureCoord</span> e <span class="inline">in_Something</span> mappano i tre attributi successivi di coordinate <span class="notranslate">texture</span> definiti nel formato del vertice.</p>
  <p>Potete trovare una lista completa di tutte le funzioni necessarie per creare formati di vertici, vertici <span class="notranslate">buffers</span> e primitive nella pagina seguente:</p>
  <ul class="colour">
    <li><a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm">Primitive e formati di vertici</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Indietro: <a href="Additional_Information.htm">Informazioni aggiuntive</a></div>
        <div style="float:right">Prossimo: <a href="Guide_To_Using_Blendmodes.htm">Guida all'uso di Blendmodes</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tutti i diritti riservati</span></h5>
  </div>
  <!-- KEYWORDS
Primitive Building
Vertex Formats
Vertex Buffers
-->
  <!-- TAGS
using_primitives_vertex_buffers
-->
</body>
</html>