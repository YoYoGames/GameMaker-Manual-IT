<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Esempi di fonti</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page containing extended examples for extensions" />
  <meta name="rh-index-keywords" content="Source Extension Examples" />
  <meta name="search-keywords" content="source android ios extensions native" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Esempi di fonti</h1>
  <p>Questa pagina contiene esempi e informazioni sul codice sorgente di <span class="notranslate">extension</span> per <span class="notranslate">Android</span> e <span class="notranslate">iOS</span>, per aiutarvi a creare il vostro <span class="notranslate">extensions</span> nativo per queste piattaforme.</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Android (esempio base)</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p>Il nostro esempio <span class="notranslate">extension</span> per <span class="notranslate">Android</span> conterrà funzioni che fanno quanto segue:</p>
    <ul class="dropspotlist">
      <li>Restituisce due numeri sommati</li>
      <li>Restituisce un <span class="notranslate">string</span> composto da un input <span class="notranslate">string</span> e un valore</li>
      <li>Restituisce un <span class="notranslate">string</span> composto da due stringhe di input</li>
      <li>Innescare l'evento <a href="../Object_Properties/Async_Events/Social.htm">Async - Social</a> e riempire i valori nella sua mappa <span class="inline">async_load</span> </li>
    </ul>
    <p>Questo <span class="notranslate">extension</span> farà uso di un file <span class="inline">.java</span>, il cui contenuto è riportato qui sotto (clicca per aprire):</p>
    <p class="note"><a data-height="800" data-rhwidget="HyperlinkPopover" data-width="1000" href="Source_Files/GenericTest.htm">GenericTest.java</a></p>
    <p>Per aggiungere un tale file al tuo <span class="notranslate">extension</span>, devi andare sotto le sue <a href="Android_Extensions.htm">proprietà Android</a> e prima inserire un nome di classe (per questo esempio, &quot;GenericTest&quot;), poi cliccare su &quot;Add Source&quot; e selezionare il file <span class="inline">.java</span>. Questo aggiungerà il file selezionato alla directory del tuo progetto -- puoi cliccare con il tasto destro del mouse sul tuo <span class="notranslate">extension</span>, selezionare &quot;Open in Explorer&quot; e vedere i file sorgente lì.</p>
    <p>Ora potete aggiungere un nuovo file segnaposto al vostro <span class="notranslate">extension</span> e creare funzioni al suo interno con le seguenti proprietà:</p>
    <ul class="dropspotlist">
      <li><em>funzione / nome esterno:</em><span><span> </span></span><span class="inline">AddTwoNumbers</span><br>
        <em>aiuto:</em><span><span> </span></span><span class="inline">AddTwoNumbers(value1, value2)</span><br>
        <em>argomenti:</em><span><span> </span></span><span class="inline">double, </span><span class="inline">double</span><br>
        <em>tipo di ritorno:</em><span><span> </span></span><span class="inline">double</span>
      </li>
      <li><em>funzione / nome esterno:</em><span> </span><span class="inline">HowManyObjects</span><br>
        <em>aiuto:</em><span><span> </span></span><span class="inline">HowManyObjects(value1, value2, string)</span><br>
        <em>argomenti:</em><span><span> </span></span><span class="inline">double, </span><span class="inline">double, </span><span class="inline">string</span><br>
        <em>tipo di ritorno:</em><span><span> </span></span><span class="inline">string</span>
      </li>
      <li><em>funzione / nome esterno:</em><span><span> </span></span><span class="inline">BuildAString</span><br>
        <em>aiuto:</em><span><span> </span></span><span class="inline">BuildAString(string1, string2)</span><br>
        <em>argomenti:</em><span><span> </span></span><span class="inline">string, </span><span class="inline">string</span><br>
        <em>tipo di ritorno:</em><span><span> </span></span><span class="inline">string</span>
      </li>
      <li><em>funzione / nome esterno:</em><span><span> </span></span><span class="inline">ReturnAsync</span><br>
        <em>aiuto:</em><span><span> </span></span><span class="inline">ReturnAsync(value1, value2)</span><br>
        <em>argomenti:</em><span><span> </span></span><span class="inline">double,</span><span> </span><span class="inline">double</span><br>
        <em>tipo di ritorno:</em><span><span> </span></span><span class="inline">double</span>
      </li>
    </ul>
    <p>Ecco un esempio della funzione <span class="inline">AddTwoNumbers()</span>:</p>
    <p><img>Ora potete chiamare queste funzioni dal vostro codice di gioco e usarle come qualsiasi altra funzione incorporata:</p>
    <p class="code">var result1 = string(AddTwoNumbers(irandom(100), 50));<br />
      var result2 = BuildAString(&quot;Hello&quot;, &quot;World&quot;);<br />
      var result3 = HowManyObjects(irandom(1000), irandom(1000), &quot;Targets&quot;);<br />
      ReturnAsync(irandom(1000), irandom(1000));</p>
    <p>La funzione <span class="inline">ReturnAsync()</span> attiverà l'evento <a href="../Object_Properties/Async_Events/Social.htm">Async - Social</a>, quindi dovrai aggiungere quell'evento al tuo <span class="notranslate">object</span> e leggere i dati dalla sua mappa <span class="inline">async_load</span> (che è riempita dal codice sorgente dell'estensione dato sopra).</p>
    <p class="code">var type = async_load[? &quot;type&quot;];<br />
      <br />
      if (type == &quot;finished&quot;)<br />
      {<br />
          var result4 = &quot;value1: &quot; + string(async_load[? &quot;argument0&quot;]) + &quot;, &quot;;<br />
          result4 += &quot;value2: &quot; + string(async_load[? &quot;argument1&quot;]);<br />
      }
    </p>
    <p> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">iOS (esempio base)</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p>L'esempio fornito per <span class="notranslate">iOS</span> è lo stesso dell'esempio di <span class="notranslate">Android</span> dato sopra; solo i file sorgente differiscono, cosa di cui ci occuperemo in questa sezione.</p>
    <p>iOS <span class="notranslate">extensions</span> fa uso di un file <span class="inline">.h</span> e un file <span class="inline">.mm</span>, e il contenuto di entrambi è dato qui sotto (clicca per aprire):</p>
    <p class="note"><a data-height="800" data-rhwidget="HyperlinkPopover" data-width="1000" href="Source_Files/GenericTest-iOS.htm">GenericTest <span class="notranslate">iOS</span> File sorgente</a></p>
    <p>Per aggiungere questi file al tuo <span class="notranslate">extension</span>, devi prima andare sotto le sue <a href="iOS_Extensions.htm">proprietà iOS</a> e inserire un nome di classe (per questo esempio, &quot;GenericTest&quot;). Puoi poi usare l'opzione &quot;Enter framework path&quot; (se i file sono presenti sulla tua macchina <span class="notranslate">macOS</span> usata per costruire) o l'opzione &quot;Add Source&quot; (se sono sulla tua macchina di sviluppo); indipendentemente dall'opzione che usi, dovrai indirizzarli alla directory che contiene i tuoi file <span class="inline">.h</span> e <span class="inline">.mm</span>.</p>
    <p>Potete aggiungere questi file sorgente allo stesso <span class="notranslate">extension</span> che è stato impostato nella sezione precedente per <span class="notranslate">Android</span>, il che significa che qualsiasi funzione già definita in quel <span class="notranslate">extension</span> ora funzionerà anche su <span class="notranslate">iOS</span> (dato che i <em>nomi esterni</em> di tutte le funzioni su <span class="notranslate">Android</span> e <span class="notranslate">iOS</span> sono gli stessi). Se state creando un nuovo <span class="notranslate">extension</span>, potete semplicemente creare le funzioni nello stesso modo descritto in precedenza.</p>
    <p> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#">Android (Callback)</a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p>Potete usare le seguenti funzioni di callback nei vostri file <span class="inline">.java</span> <span class="notranslate">extension</span>:</p>
    <p class="code">public void onStart()<br />public void onRestart()<br />public void onStop()<br />public void onDestroy()<br />public void onPause()<br />public void onResume()<br />public void onActivityResult(int requestCode, int resultCode, Intent data)<br />public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults)<br />public void onNewIntent(android.content.Intent newIntent)<br />public void onWindowFocusChanged(boolean hasFocus)<br />public void onConfigurationChanged(Configuration newConfig)<br /></p>
    <p><br /></p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#">iOS (Callback)</a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p>Potete usare le seguenti funzioni di callback nei vostri file <span class="inline">.mm</span> <span class="notranslate">extension</span>:</p>
    <p class="code">-(void) Init<br />
      -(void) onLaunch:(NSDictionary*)launchOptions<br />
      -(void) onResume<br />
      -(void) onPause<br />
      -(void) applicationDidEnterBackground:(UIApplication *)application<br />
      -(void) applicationWillEnterForeground:(UIApplication *)application<br />
      -(void) onStop<br />
      -(void) applicationProtectedDataDidBecomeAvailable:(UIApplication *)application<br />
      -(void) applicationProtectedDataWillBecomeUnavailable:(UIApplication *)application<br />
      -(void) applicationDidReceiveMemoryWarning:(UIApplication *)application<br />
      -(void) applicationSignificantTimeChange:(UIApplication *)application<br />
      -(void) application:(UIApplication *)application willEncodeRestorableStateWithCoder:(NSCoder *)coder<br />
      -(void) application:(UIApplication *)application didDecodeRestorableStateWithCoder:(NSCoder *)coder<br />
      -(void) application:(UIApplication *)application didUpdateUserActivity:(NSUserActivity *)userActivity<br />
      -(void) application:(UIApplication *)application didFailToContinueUserActivityWithType:(NSString *)userActivityType error:(NSError *)error<br />
      -(void) application:(UIApplication *)application handleWatchKitExtensionRequest:(NSDictionary *)userInfo reply:(void (^)(NSDictionary *replyInfo))reply<br />
      -(void) applicationShouldRequestHealthAuthorization:(UIApplication *)application<br />
      -(void) openURL:(NSURL *)url sourceApplication:(NSString *) sourceApplication annotation:(id)annotation<br />
      -(void) application:(UIApplication *)application userDidAcceptCloudKitShareWithMetadata:(CKShareMetadata *)cloudKitShareMetadata</p>
    <p> </p>
  </div>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Indietro: <a href="../Extensions.htm">Il <span class="notranslate">Extension</span> Editor</a></div>
        <div style="float:right">Avanti: <a href="Creating_An_Extension.htm">Creare un'estensione</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tutti i diritti riservati</span></h5>
  </div>
  <!-- KEYWORDS
Android Extensions
iOS Extensions
Source
Native
java
mm
h
-->
  <!-- TAGS
source_extensions
-->
</body>
</html>