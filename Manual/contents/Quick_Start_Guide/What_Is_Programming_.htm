<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Cos'è la programmazione?</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="A brief description of what makes a program, generally and specifically using GameMaker." />
  <meta name="rh-index-keywords" content="Quick Start - What Is Programming?" />
  <meta name="search-keywords" content="programming" />
  <meta name="robots" content="NOODP" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Cos'è la programmazione?</h1>
  <p>Nella <a href="Quick_Start_Guide.htm">sezione precedente</a>, abbiamo spiegato come funziona <span data-keyref="GameMaker Name">GameMaker</span> per creare il vostro gioco, ma indipendentemente dal <span class="notranslate">sprites</span>, <span class="notranslate">objects</span> o <span class="notranslate">rooms</span> che avete aggiunto, nulla accadrà a meno che non lo abbiate <strong>programmato </strong>per accadere. Ma cos'è un programma?</p>
  <p>In senso generale, un programma è semplicemente un insieme di istruzioni (o <strong> <a class="glossterm" data-glossterm="dichiarazione" href="#">dichiarazione</a></strong><span class="glossextra">s</span>) che si danno al computer per dirgli di eseguire certi compiti. Questi compiti possono variare molto dal dire semplicemente al computer di disegnare qualcosa sullo schermo, al calcolare un valore basato su qualche input dell'utente e poi reagire ad esso, ma in tutti i casi è una struttura logica che darà qualche risultato. Nella pagina precedente abbiamo parlato di spostare un'istanza di un <span class="notranslate">object</span> a destra di 2 pixel, quindi diamo un'occhiata al programma effettivo che lo farebbe:</p>
  <p>In <span data-keyref="GML_Visual">GML Visual</span> sarebbe così:</p>
  <p><img alt="GML VisualExample" class="center" src="../assets/Images/QS_Guide/QS_DnD_Example.png" /></p>
  <p>E usando il <span data-keyref="GML_Code">codice GML</span>, sarebbe così:</p>
  <p class="code">x = x + 2;</p>
  <p>Per capire cosa sta succedendo qui sopra, dobbiamo prima parlare delle <strong>variabili</strong>, poi passeremo a discutere delle <strong>funzioni </strong>e infine dei <strong>condizionali </strong>, dato che queste tre cose sono generalmente ciò che costituisce il grosso di ogni programma.</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down" href="What_Is_Programming_.htm#">Variabili</a></p>
  <div class="droptext" data-targetname="drop_down">
    <p class="dropspot">Le variabili sono la pietra angolare della programmazione, insieme alle <strong>funzioni </strong>(che tratteremo brevemente tra un momento). Una variabile è semplicemente un <em>valore con un nome</em>, e nel caso precedente la variabile si chiama &quot;<span class="inline">x</span>&quot;. Ora, &quot;<span class="inline">x</span>&quot; può essere qualsiasi valore, come -126, o 583, o anche 1.56378, ma il valore effettivo di &quot;<span class="inline">x</span>&quot; è irrilevante in quanto può variare (da qui il nome &quot;variabile&quot;). Ciò che è importante è che prendiamo &quot;<span class="inline">x</span>&quot; e gli aggiungiamo 2. Vale la pena notare che in questo caso &quot;<span class="inline">x</span>&quot; è una <strong>variabile incorporata</strong>, il che significa che è una variabile che viene creata da <span data-keyref="GameMaker Name">GameMaker</span> per tutti i <span class="notranslate">objects</span>, ma si possono creare anche le proprie variabili.</p>
    <p class="dropspot">Per creare una variabile, questa deve essere <strong>dichiarata </strong>prima di poter essere utilizzata. Dichiarare una variabile significa dire a <span data-keyref="GameMaker Name">GameMaker</span> che questa nuova variabile esiste e ha un valore iniziale. Per dichiarare una variabile dovreste semplicemente fare qualcosa del genere:</p>
    <p class="dropspot"><img alt="Declare GML VisualVariables" class="center" src="../assets/Images/QS_Guide/QS_DnD_Declare.png" /></p>
    <p class="dropspot">oppure:</p>
    <p class="code">points = 0;</p>
    <p class="dropspot">Una volta che una variabile è stata dichiarata, allora può essere usata in ulteriore codice programmato o azioni. La cosa bella delle variabili è che permettono di &quot;riutilizzare&quot; un valore in più posti, senza doversi effettivamente preoccupare di quale sia il valore. Per esempio, diciamo che avete una variabile &quot;<span class="inline">damage</span>&quot; e la usate in vari posti per dire a <span data-keyref="GameMaker Name">GameMaker</span> di infliggere una certa quantità di danni ad altri <span class="notranslate">objects</span> nel gioco. Possiamo dichiarare &quot;<span class="inline">damage</span>&quot; come 20, ma più tardi decidiamo che questo è un valore troppo grande e vogliamo cambiarlo in 10. Se avessimo usato il valore 20 invece di una variabile, avremmo dovuto passare attraverso tutto il nostro codice o azioni e cambiare 20 in 10, il che richiede tempo ed è soggetto a errori. Tuttavia, usare una variabile significa che dobbiamo cambiarla solo <em>una volta </em>in 10 quando la dichiariamo e il resto del codice o delle azioni userà questo nuovo valore.</p>
    <p class="dropspot">Vale la pena notare che ci sono molti tipi diversi di variabili, e ognuno ha modi leggermente diversi in cui può essere usato. Non ne parleremo qui, ma potete trovare maggiori informazioni nella sezione <a href="../GameMaker_Language/GML_Overview/Variables_And_Variable_Scope.htm">GameMaker Language Overview</a> del manuale.</p>
    <p class="dropspot">Tuttavia, le variabili sono solo la prima parte della storia. La parte successiva è l'uso delle Funzioni...</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down1" href="What_Is_Programming_.htm#">Funzioni</a></p>
  <div class="droptext" data-targetname="drop_down1">
    <p class="dropspot">La prossima parte importante della programmazione è l'uso delle <strong>funzioni </strong>insieme alle variabili. Una funzione è semplicemente un'istruzione al computer per fare qualcosa, e può avere valori di input così come valori di output (cioè: si può dare un valore ad essa, ed essa farà qualche operazione e poi restituirà un valore diverso), anche se non tutte le funzioni richiedono input, né hanno un output. Per capire meglio questo, guardiamo una funzione integrata in <span data-keyref="GameMaker Name">GameMaker</span>.</p>
    <p class="dropspot">La funzione che guarderemo è <a href="../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_number.htm"><span class="inline">instance_number()</span></a>che in <span class="notranslate">GML</span> Visual è l'azione <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Get_Instance_Count.htm">Get Instance Count</a>. Questa funzione/azione recupererà il numero di istanze di un dato <span class="notranslate">object</span> nel gioco <span class="notranslate">room</span>, e la userete in questo modo:</p>
    <p class="dropspot"><img alt="Get Instance Count GML VisualAction" class="center" src="../assets/Images/QS_Guide/QS_DnD_GetInstanceCount.png" /></p>
    <p class="dropspot">oppure:</p>
    <p class="code">number = instance_number(obj_Enemy);</p>
    <p class="dropspot">In entrambi gli esempi precedenti, la funzione prende un ID <span class="notranslate">object</span> come valore di input (il parametro <strong> <a class="glossterm" data-glossterm="argomento" href="#">argomento</a></strong> o <strong>parametro</strong>) e darà un valore di uscita (il valore di <strong>ritorno </strong>), che è il numero di istanze del dato <span class="notranslate">object</span> presenti in <span class="notranslate">room</span> quando la funzione/azione è stata chiamata. Notate che usiamo una variabile per memorizzare il valore restituito, la variabile &quot;<span class="inline">number</span>&quot;. Questa variabile può essere dichiarata prima dell'esecuzione di questo codice, oppure sarà considerata come dichiarata quando il codice viene eseguito e il valore di ritorno dalla funzione/azione assegnato ad essa.</p>
    <p class="dropspot">Vale la pena notare che non siete solo limitati ad usare le azioni incorporate in <span class="notranslate">GameMaker Language</span> o <span class="notranslate">GML</span> Visual e potete effettivamente costruire le vostre proprie funzioni da usare per estendere ciò che è possibile quando si programma (potete trovare maggiori informazioni su questo <a href="../GameMaker_Language/GML_Overview/Script_Functions.htm">qui</a> per <span class="notranslate">GML</span> e <a href="../Drag_And_Drop/Drag_And_Drop_Overview/Action_Block_Functions.htm">qui</a> per <span class="notranslate">GML</span> Visual).</p>
    <p class="dropspot">Si può fare molto con le funzioni e le variabili, tuttavia sarebbero praticamente inutili senza l'ultimo pezzo importante della storia della programmazione, i <strong>condizionali</strong>...</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down2" href="What_Is_Programming_.htm#">Condizionali</a></p>
  <div class="droptext" data-targetname="drop_down2">
    <p class="dropspot">Gran parte della programmazione è fatta di domande. Queste domande sono generalmente semplici che possono valutare o vero o falso, e sono chiamate <strong>condizionali </strong>(e i valori di <span class="inline">true </span>e <span class="inline">false </span>sono chiamati valori <strong>booleani </strong>). Il condizionale più comune e ampiamente utilizzato è la domanda &quot;<span class="inline">if</span>&quot;, che viene utilizzata per verificare se qualcosa è <span class="inline">true </span>o <span class="inline">false </span>e poi agire di conseguenza. Un semplice esempio potrebbe essere la rimozione di un personaggio dal gioco se la sua salute scende sotto lo zero, che in un linguaggio semplice sarebbe espresso come:</p>
    <p class="code">if the character variable &quot;hp&quot; is less than or equal to zero, then destroy it.</p>
    <p class="dropspot">Per trasformare quanto sopra in codice avremmo questo:</p>
    <p class="dropspot"><img alt="GML VisualConditional" class="center" src="../assets/Images/QS_Guide/QS_DnD_Conditional.png" /></p>
    <p class="dropspot">oppure:</p>
    <p class="code">if (hp &lt;= 0)<br />
      {<br />
      <br />
          instance_destroy();<br />
      <br />
      }
    </p>
    <p class="dropspot">Quindi, sopra ci poniamo la domanda &quot;se la variabile hp è minore o uguale a 0&quot; e poi se questo valuta vero chiamiamo la funzione <a href="../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_destroy.htm"><span class="inline">instance_destroy()</span></a> o l'azione <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Destroy_Object_Instance.htm">Destroy <span class="notranslate">Object</span> Instance</a>. Notate che il &quot;<span class="inline">then</span>&quot; (if something... then something...) è <em>implicito </em>e non c'è bisogno di aggiungerlo, e notate anche che nel codice di <span class="notranslate">GML</span> usiamo le parentesi <span class="inline">{} </span>per &quot;bloccare&quot; il codice che vogliamo sia eseguito quando il &quot; <span class="inline">if</span>&quot; valuta a <span class="inline">true </span>(in <span class="notranslate">GML</span> Visual questo è simboleggiato dalla caduta delle azioni a <em>destra </em>dell'azione &quot;<span class="inline">If</span>&quot;). Qualsiasi cosa aggiunta tra le parentesi graffe verrà eseguita solo se &quot; <span class="inline">if</span>&quot; valuta a <span class="inline">true</span>, quindi è possibile avere più di una dichiarazione eseguita in un singolo &quot;blocco&quot;.</p>
    <p class="dropspot">Un'altra cosa da notare quando si usa la condizionale &quot;<span class="inline">if</span>&quot; è che possiamo aggiungere anche una dichiarazione &quot;<span class="inline">else</span>&quot;, così la condizionale diventerebbe &quot;se qualcosa valuta <span class="inline">true </span>allora fai qualcosa, <em>altrimenti </em>fai qualcosa di diverso&quot;. In questo modo possiamo trattare un'espressione condizionale che restituisce <span class="inline">true </span> <em>o </em> <span class="inline">false</span>. Facciamo anche un esempio di questo:</p>
    <p class="dropspot"><img alt="GML VisualIf... Else.. Example" class="center" src="../assets/Images/QS_Guide/QS_DnD_IfElse.png" /></p>
    <p class="dropspot">oppure:</p>
    <p class="code">if (countdown &lt;= 0)<br />
      {<br />
      <br />
          instance_create_layer(x, y, &quot;Instances&quot;, obj_Bullet);<br />
      <br />
          countdown = 30;<br />
      <br />
      }<br />
      else<br />
      {<br />
      <br />
          countdown = countdown - 1;<br />
      <br />
      }
    </p>
    <p class="dropspot">Il codice di cui sopra si traduce in linguaggio semplice come:</p>
    <p class="code">if the countdown variable is less than or equal to zero then:<br />
      <br />
          create an instance of the object &quot;obj_Bullet&quot; at the current x/y position on the layer &quot;instances&quot;,<br />
      <br />
          reset the countdown variable to 30.<br />
      <br />
      else:<br />
      <br />
          subtract one from the countdown variable.
    </p>
    <p class="dropspot">Non preoccupatevi troppo della parte effettiva di creazione dell'istanza del codice di cui sopra, perché la tratteremo in modo più dettagliato nelle sezioni seguenti. La cosa importante da capire qui è che potete creare espressioni condizionali che controllano se qualcosa è <span class="inline">true </span>o <span class="inline">false </span>e far rispondere il vostro programma in modi diversi. Questa può sembrare una cosa molto semplice, ma in realtà è incredibilmente potente e costituirà la base per quasi tutto ciò che farete quando programmate in <span data-keyref="GameMaker Name">GameMaker</span>.</p>
  </div>
  <p> </p>
  <p>Quindi, per rispondere alla nostra domanda &quot;Che cos'è la programmazione?&quot;, possiamo dire che la <strong>programmazione </strong>è l'uso di una combinazione di <strong>dichiarazioni - </strong> che possono usare <strong> <a class="glossterm" data-glossterm="variabile" href="#">variabile</a></strong> <span class="glossextra">s</span><strong> </strong>per formare <strong> <a class="glossterm" data-glossterm="espressione" href="#">espressione</a></strong><span class="glossextra">s</span>, <strong>funzioni </strong>per eseguire compiti, e <strong><a class="glossterm" data-glossterm="condizionale" href="#">condizionale</a></strong> <span class="glossextra">s</span> per porre domande - e poi eseguire queste istruzioni contemporaneamente per raggiungere un obiettivo. Qui sotto potete vedere un programma leggermente più complesso in <span class="notranslate">GML</span> Visual e <span class="notranslate">GML</span>. Riuscite a indovinare cosa fa?</p>
  <p><img alt="GML VisualFinal Code Example" class="center" src="../assets/Images/QS_Guide/QS_DnD_FinalCode.png" /></p>
  <p>oppure:</p>
  <p class="code">if mouse_check_button_pressed(mb_left) == true<br />
    {<br />
    <br />
        x = mouse_x<br />
    <br />
        y = mouse_y<br />
    <br />
        image_blend = c_red;<br />
    <br />
    }<br />
    else<br />
    {<br />
    <br />
        if (mouse_check_button_released(mb_left) == true) <br />
        {<br />
    <br />
            image_blend = c_white;<br />
    <br />
        }<br />
    <br />
    }
  </p>
  <p><a class="expandspot" data-rhwidget="ExpandSpot" data-target="expanding" href="What_Is_Programming_.htm#">Spoiler</a><span class="expandtext" data-targetname="expanding">Il codice di cui sopra controlla prima che un pulsante del mouse sia premuto (il pulsante <strong>sinistro </strong>del mouse, che è definito utilizzando la costante &quot; <span class="inline">mb_left</span>&quot;),
      e se è stato premuto, allora sposta l'istanza che esegue il codice nella posizione corrente del mouse (definita usando le variabili integrate &quot; <span class="inline">mouse_x</span>&quot; e &quot; <span class="inline">mouse_y</span>&quot;) e
      imposta anche il colore di fusione dell'istanza sul <strong>rosso</strong>. Se il pulsante del mouse non è stato premuto, allora controlla per vedere se il pulsante del mouse è stato <strong>rilasciato</strong>, e se lo è, reimposta il colore di fusione dell'istanza al bianco (si noti che
      di nuovo, usiamo alcune <strong>costanti </strong> incorporate <strong>- </strong>&quot; <span class="inline">c_red</span>&quot; e &quot; <span class="inline">c_white</span>&quot; - per definire facilmente i colori).</span></p>
  <p> </p>
  <p>Speriamo che ora abbiate un'idea più chiara di cosa sia la programmazione, quindi passiamo ad esplorare l'<a class="glossterm" data-glossterm="IDE" href="#">IDE di</a> <span data-keyref="GameMaker Name">GameMaker</span> e vediamo come aggiungere <span class="notranslate">assets</span> come <em>sprites </em>e <em>oggetti </em>e altre importanti risorse di cui il vostro gioco avrà bisogno.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Indietro: <a href="../Content.htm">Indice</a></div>
        <div style="float:right">Avanti: <a href="Creating_Sprites.htm">Creazione di sprites</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tutti i diritti riservati</span></h5>
  </div>
  <!-- KEYWORDS
What is Programming?
Quick Start: Programming
-->
  <!-- TAGS
qs_programming
-->
</body>
</html>